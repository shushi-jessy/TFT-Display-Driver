
TFTdispolay_Rev0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  08007b1c  08007b1c  00017b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800831c  0800831c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800831c  0800831c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800831c  0800831c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800831c  0800831c  0001831c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008320  08008320  00018320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  20000088  080083ac  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ac  080083ac  000206ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c31  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f16  00000000  00000000  00033ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00036bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00037cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000136fc  00000000  00000000  00038c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ac6  00000000  00000000  0004c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065b99  00000000  00000000  00065dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb95b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004080  00000000  00000000  000cb9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007b04 	.word	0x08007b04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08007b04 	.word	0x08007b04

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_d2uiz>:
 8000234:	b570      	push	{r4, r5, r6, lr}
 8000236:	2200      	movs	r2, #0
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <__aeabi_d2uiz+0x38>)
 800023a:	0004      	movs	r4, r0
 800023c:	000d      	movs	r5, r1
 800023e:	f001 f99b 	bl	8001578 <__aeabi_dcmpge>
 8000242:	2800      	cmp	r0, #0
 8000244:	d104      	bne.n	8000250 <__aeabi_d2uiz+0x1c>
 8000246:	0020      	movs	r0, r4
 8000248:	0029      	movs	r1, r5
 800024a:	f001 f905 	bl	8001458 <__aeabi_d2iz>
 800024e:	bd70      	pop	{r4, r5, r6, pc}
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <__aeabi_d2uiz+0x38>)
 8000252:	2200      	movs	r2, #0
 8000254:	0020      	movs	r0, r4
 8000256:	0029      	movs	r1, r5
 8000258:	f000 fd6c 	bl	8000d34 <__aeabi_dsub>
 800025c:	f001 f8fc 	bl	8001458 <__aeabi_d2iz>
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	061b      	lsls	r3, r3, #24
 8000264:	469c      	mov	ip, r3
 8000266:	4460      	add	r0, ip
 8000268:	e7f1      	b.n	800024e <__aeabi_d2uiz+0x1a>
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	41e00000 	.word	0x41e00000

08000270 <__aeabi_ddiv>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	4681      	mov	r9, r0
 800027e:	0005      	movs	r5, r0
 8000280:	030c      	lsls	r4, r1, #12
 8000282:	0048      	lsls	r0, r1, #1
 8000284:	4692      	mov	sl, r2
 8000286:	001f      	movs	r7, r3
 8000288:	b085      	sub	sp, #20
 800028a:	0b24      	lsrs	r4, r4, #12
 800028c:	0d40      	lsrs	r0, r0, #21
 800028e:	0fce      	lsrs	r6, r1, #31
 8000290:	2800      	cmp	r0, #0
 8000292:	d100      	bne.n	8000296 <__aeabi_ddiv+0x26>
 8000294:	e156      	b.n	8000544 <__aeabi_ddiv+0x2d4>
 8000296:	4bd4      	ldr	r3, [pc, #848]	; (80005e8 <__aeabi_ddiv+0x378>)
 8000298:	4298      	cmp	r0, r3
 800029a:	d100      	bne.n	800029e <__aeabi_ddiv+0x2e>
 800029c:	e172      	b.n	8000584 <__aeabi_ddiv+0x314>
 800029e:	0f6b      	lsrs	r3, r5, #29
 80002a0:	00e4      	lsls	r4, r4, #3
 80002a2:	431c      	orrs	r4, r3
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	041b      	lsls	r3, r3, #16
 80002a8:	4323      	orrs	r3, r4
 80002aa:	4698      	mov	r8, r3
 80002ac:	4bcf      	ldr	r3, [pc, #828]	; (80005ec <__aeabi_ddiv+0x37c>)
 80002ae:	00ed      	lsls	r5, r5, #3
 80002b0:	469b      	mov	fp, r3
 80002b2:	2300      	movs	r3, #0
 80002b4:	4699      	mov	r9, r3
 80002b6:	4483      	add	fp, r0
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	033c      	lsls	r4, r7, #12
 80002bc:	007b      	lsls	r3, r7, #1
 80002be:	4650      	mov	r0, sl
 80002c0:	0b24      	lsrs	r4, r4, #12
 80002c2:	0d5b      	lsrs	r3, r3, #21
 80002c4:	0fff      	lsrs	r7, r7, #31
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d100      	bne.n	80002cc <__aeabi_ddiv+0x5c>
 80002ca:	e11f      	b.n	800050c <__aeabi_ddiv+0x29c>
 80002cc:	4ac6      	ldr	r2, [pc, #792]	; (80005e8 <__aeabi_ddiv+0x378>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d100      	bne.n	80002d4 <__aeabi_ddiv+0x64>
 80002d2:	e162      	b.n	800059a <__aeabi_ddiv+0x32a>
 80002d4:	49c5      	ldr	r1, [pc, #788]	; (80005ec <__aeabi_ddiv+0x37c>)
 80002d6:	0f42      	lsrs	r2, r0, #29
 80002d8:	468c      	mov	ip, r1
 80002da:	00e4      	lsls	r4, r4, #3
 80002dc:	4659      	mov	r1, fp
 80002de:	4314      	orrs	r4, r2
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	4463      	add	r3, ip
 80002e4:	0412      	lsls	r2, r2, #16
 80002e6:	1acb      	subs	r3, r1, r3
 80002e8:	4314      	orrs	r4, r2
 80002ea:	469b      	mov	fp, r3
 80002ec:	00c2      	lsls	r2, r0, #3
 80002ee:	2000      	movs	r0, #0
 80002f0:	0033      	movs	r3, r6
 80002f2:	407b      	eors	r3, r7
 80002f4:	469a      	mov	sl, r3
 80002f6:	464b      	mov	r3, r9
 80002f8:	2b0f      	cmp	r3, #15
 80002fa:	d827      	bhi.n	800034c <__aeabi_ddiv+0xdc>
 80002fc:	49bc      	ldr	r1, [pc, #752]	; (80005f0 <__aeabi_ddiv+0x380>)
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	58cb      	ldr	r3, [r1, r3]
 8000302:	469f      	mov	pc, r3
 8000304:	46b2      	mov	sl, r6
 8000306:	9b00      	ldr	r3, [sp, #0]
 8000308:	2b02      	cmp	r3, #2
 800030a:	d016      	beq.n	800033a <__aeabi_ddiv+0xca>
 800030c:	2b03      	cmp	r3, #3
 800030e:	d100      	bne.n	8000312 <__aeabi_ddiv+0xa2>
 8000310:	e28e      	b.n	8000830 <__aeabi_ddiv+0x5c0>
 8000312:	2b01      	cmp	r3, #1
 8000314:	d000      	beq.n	8000318 <__aeabi_ddiv+0xa8>
 8000316:	e0d9      	b.n	80004cc <__aeabi_ddiv+0x25c>
 8000318:	2300      	movs	r3, #0
 800031a:	2400      	movs	r4, #0
 800031c:	2500      	movs	r5, #0
 800031e:	4652      	mov	r2, sl
 8000320:	051b      	lsls	r3, r3, #20
 8000322:	4323      	orrs	r3, r4
 8000324:	07d2      	lsls	r2, r2, #31
 8000326:	4313      	orrs	r3, r2
 8000328:	0028      	movs	r0, r5
 800032a:	0019      	movs	r1, r3
 800032c:	b005      	add	sp, #20
 800032e:	bcf0      	pop	{r4, r5, r6, r7}
 8000330:	46bb      	mov	fp, r7
 8000332:	46b2      	mov	sl, r6
 8000334:	46a9      	mov	r9, r5
 8000336:	46a0      	mov	r8, r4
 8000338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800033a:	2400      	movs	r4, #0
 800033c:	2500      	movs	r5, #0
 800033e:	4baa      	ldr	r3, [pc, #680]	; (80005e8 <__aeabi_ddiv+0x378>)
 8000340:	e7ed      	b.n	800031e <__aeabi_ddiv+0xae>
 8000342:	46ba      	mov	sl, r7
 8000344:	46a0      	mov	r8, r4
 8000346:	0015      	movs	r5, r2
 8000348:	9000      	str	r0, [sp, #0]
 800034a:	e7dc      	b.n	8000306 <__aeabi_ddiv+0x96>
 800034c:	4544      	cmp	r4, r8
 800034e:	d200      	bcs.n	8000352 <__aeabi_ddiv+0xe2>
 8000350:	e1c7      	b.n	80006e2 <__aeabi_ddiv+0x472>
 8000352:	d100      	bne.n	8000356 <__aeabi_ddiv+0xe6>
 8000354:	e1c2      	b.n	80006dc <__aeabi_ddiv+0x46c>
 8000356:	2301      	movs	r3, #1
 8000358:	425b      	negs	r3, r3
 800035a:	469c      	mov	ip, r3
 800035c:	002e      	movs	r6, r5
 800035e:	4640      	mov	r0, r8
 8000360:	2500      	movs	r5, #0
 8000362:	44e3      	add	fp, ip
 8000364:	0223      	lsls	r3, r4, #8
 8000366:	0e14      	lsrs	r4, r2, #24
 8000368:	431c      	orrs	r4, r3
 800036a:	0c1b      	lsrs	r3, r3, #16
 800036c:	4699      	mov	r9, r3
 800036e:	0423      	lsls	r3, r4, #16
 8000370:	0c1f      	lsrs	r7, r3, #16
 8000372:	0212      	lsls	r2, r2, #8
 8000374:	4649      	mov	r1, r9
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9701      	str	r7, [sp, #4]
 800037a:	f7ff ff55 	bl	8000228 <__aeabi_uidivmod>
 800037e:	0002      	movs	r2, r0
 8000380:	437a      	muls	r2, r7
 8000382:	040b      	lsls	r3, r1, #16
 8000384:	0c31      	lsrs	r1, r6, #16
 8000386:	4680      	mov	r8, r0
 8000388:	4319      	orrs	r1, r3
 800038a:	428a      	cmp	r2, r1
 800038c:	d907      	bls.n	800039e <__aeabi_ddiv+0x12e>
 800038e:	2301      	movs	r3, #1
 8000390:	425b      	negs	r3, r3
 8000392:	469c      	mov	ip, r3
 8000394:	1909      	adds	r1, r1, r4
 8000396:	44e0      	add	r8, ip
 8000398:	428c      	cmp	r4, r1
 800039a:	d800      	bhi.n	800039e <__aeabi_ddiv+0x12e>
 800039c:	e207      	b.n	80007ae <__aeabi_ddiv+0x53e>
 800039e:	1a88      	subs	r0, r1, r2
 80003a0:	4649      	mov	r1, r9
 80003a2:	f7ff ff41 	bl	8000228 <__aeabi_uidivmod>
 80003a6:	0409      	lsls	r1, r1, #16
 80003a8:	468c      	mov	ip, r1
 80003aa:	0431      	lsls	r1, r6, #16
 80003ac:	4666      	mov	r6, ip
 80003ae:	9a01      	ldr	r2, [sp, #4]
 80003b0:	0c09      	lsrs	r1, r1, #16
 80003b2:	4342      	muls	r2, r0
 80003b4:	0003      	movs	r3, r0
 80003b6:	4331      	orrs	r1, r6
 80003b8:	428a      	cmp	r2, r1
 80003ba:	d904      	bls.n	80003c6 <__aeabi_ddiv+0x156>
 80003bc:	1909      	adds	r1, r1, r4
 80003be:	3b01      	subs	r3, #1
 80003c0:	428c      	cmp	r4, r1
 80003c2:	d800      	bhi.n	80003c6 <__aeabi_ddiv+0x156>
 80003c4:	e1ed      	b.n	80007a2 <__aeabi_ddiv+0x532>
 80003c6:	1a88      	subs	r0, r1, r2
 80003c8:	4642      	mov	r2, r8
 80003ca:	0412      	lsls	r2, r2, #16
 80003cc:	431a      	orrs	r2, r3
 80003ce:	4690      	mov	r8, r2
 80003d0:	4641      	mov	r1, r8
 80003d2:	9b00      	ldr	r3, [sp, #0]
 80003d4:	040e      	lsls	r6, r1, #16
 80003d6:	0c1b      	lsrs	r3, r3, #16
 80003d8:	001f      	movs	r7, r3
 80003da:	9302      	str	r3, [sp, #8]
 80003dc:	9b00      	ldr	r3, [sp, #0]
 80003de:	0c36      	lsrs	r6, r6, #16
 80003e0:	041b      	lsls	r3, r3, #16
 80003e2:	0c19      	lsrs	r1, r3, #16
 80003e4:	000b      	movs	r3, r1
 80003e6:	4373      	muls	r3, r6
 80003e8:	0c12      	lsrs	r2, r2, #16
 80003ea:	437e      	muls	r6, r7
 80003ec:	9103      	str	r1, [sp, #12]
 80003ee:	4351      	muls	r1, r2
 80003f0:	437a      	muls	r2, r7
 80003f2:	0c1f      	lsrs	r7, r3, #16
 80003f4:	46bc      	mov	ip, r7
 80003f6:	1876      	adds	r6, r6, r1
 80003f8:	4466      	add	r6, ip
 80003fa:	42b1      	cmp	r1, r6
 80003fc:	d903      	bls.n	8000406 <__aeabi_ddiv+0x196>
 80003fe:	2180      	movs	r1, #128	; 0x80
 8000400:	0249      	lsls	r1, r1, #9
 8000402:	468c      	mov	ip, r1
 8000404:	4462      	add	r2, ip
 8000406:	0c31      	lsrs	r1, r6, #16
 8000408:	188a      	adds	r2, r1, r2
 800040a:	0431      	lsls	r1, r6, #16
 800040c:	041e      	lsls	r6, r3, #16
 800040e:	0c36      	lsrs	r6, r6, #16
 8000410:	198e      	adds	r6, r1, r6
 8000412:	4290      	cmp	r0, r2
 8000414:	d302      	bcc.n	800041c <__aeabi_ddiv+0x1ac>
 8000416:	d112      	bne.n	800043e <__aeabi_ddiv+0x1ce>
 8000418:	42b5      	cmp	r5, r6
 800041a:	d210      	bcs.n	800043e <__aeabi_ddiv+0x1ce>
 800041c:	4643      	mov	r3, r8
 800041e:	1e59      	subs	r1, r3, #1
 8000420:	9b00      	ldr	r3, [sp, #0]
 8000422:	469c      	mov	ip, r3
 8000424:	4465      	add	r5, ip
 8000426:	001f      	movs	r7, r3
 8000428:	429d      	cmp	r5, r3
 800042a:	419b      	sbcs	r3, r3
 800042c:	425b      	negs	r3, r3
 800042e:	191b      	adds	r3, r3, r4
 8000430:	18c0      	adds	r0, r0, r3
 8000432:	4284      	cmp	r4, r0
 8000434:	d200      	bcs.n	8000438 <__aeabi_ddiv+0x1c8>
 8000436:	e1a0      	b.n	800077a <__aeabi_ddiv+0x50a>
 8000438:	d100      	bne.n	800043c <__aeabi_ddiv+0x1cc>
 800043a:	e19b      	b.n	8000774 <__aeabi_ddiv+0x504>
 800043c:	4688      	mov	r8, r1
 800043e:	1bae      	subs	r6, r5, r6
 8000440:	42b5      	cmp	r5, r6
 8000442:	41ad      	sbcs	r5, r5
 8000444:	1a80      	subs	r0, r0, r2
 8000446:	426d      	negs	r5, r5
 8000448:	1b40      	subs	r0, r0, r5
 800044a:	4284      	cmp	r4, r0
 800044c:	d100      	bne.n	8000450 <__aeabi_ddiv+0x1e0>
 800044e:	e1d5      	b.n	80007fc <__aeabi_ddiv+0x58c>
 8000450:	4649      	mov	r1, r9
 8000452:	f7ff fee9 	bl	8000228 <__aeabi_uidivmod>
 8000456:	9a01      	ldr	r2, [sp, #4]
 8000458:	040b      	lsls	r3, r1, #16
 800045a:	4342      	muls	r2, r0
 800045c:	0c31      	lsrs	r1, r6, #16
 800045e:	0005      	movs	r5, r0
 8000460:	4319      	orrs	r1, r3
 8000462:	428a      	cmp	r2, r1
 8000464:	d900      	bls.n	8000468 <__aeabi_ddiv+0x1f8>
 8000466:	e16c      	b.n	8000742 <__aeabi_ddiv+0x4d2>
 8000468:	1a88      	subs	r0, r1, r2
 800046a:	4649      	mov	r1, r9
 800046c:	f7ff fedc 	bl	8000228 <__aeabi_uidivmod>
 8000470:	9a01      	ldr	r2, [sp, #4]
 8000472:	0436      	lsls	r6, r6, #16
 8000474:	4342      	muls	r2, r0
 8000476:	0409      	lsls	r1, r1, #16
 8000478:	0c36      	lsrs	r6, r6, #16
 800047a:	0003      	movs	r3, r0
 800047c:	430e      	orrs	r6, r1
 800047e:	42b2      	cmp	r2, r6
 8000480:	d900      	bls.n	8000484 <__aeabi_ddiv+0x214>
 8000482:	e153      	b.n	800072c <__aeabi_ddiv+0x4bc>
 8000484:	9803      	ldr	r0, [sp, #12]
 8000486:	1ab6      	subs	r6, r6, r2
 8000488:	0002      	movs	r2, r0
 800048a:	042d      	lsls	r5, r5, #16
 800048c:	431d      	orrs	r5, r3
 800048e:	9f02      	ldr	r7, [sp, #8]
 8000490:	042b      	lsls	r3, r5, #16
 8000492:	0c1b      	lsrs	r3, r3, #16
 8000494:	435a      	muls	r2, r3
 8000496:	437b      	muls	r3, r7
 8000498:	469c      	mov	ip, r3
 800049a:	0c29      	lsrs	r1, r5, #16
 800049c:	4348      	muls	r0, r1
 800049e:	0c13      	lsrs	r3, r2, #16
 80004a0:	4484      	add	ip, r0
 80004a2:	4463      	add	r3, ip
 80004a4:	4379      	muls	r1, r7
 80004a6:	4298      	cmp	r0, r3
 80004a8:	d903      	bls.n	80004b2 <__aeabi_ddiv+0x242>
 80004aa:	2080      	movs	r0, #128	; 0x80
 80004ac:	0240      	lsls	r0, r0, #9
 80004ae:	4684      	mov	ip, r0
 80004b0:	4461      	add	r1, ip
 80004b2:	0c18      	lsrs	r0, r3, #16
 80004b4:	0412      	lsls	r2, r2, #16
 80004b6:	041b      	lsls	r3, r3, #16
 80004b8:	0c12      	lsrs	r2, r2, #16
 80004ba:	1841      	adds	r1, r0, r1
 80004bc:	189b      	adds	r3, r3, r2
 80004be:	428e      	cmp	r6, r1
 80004c0:	d200      	bcs.n	80004c4 <__aeabi_ddiv+0x254>
 80004c2:	e0ff      	b.n	80006c4 <__aeabi_ddiv+0x454>
 80004c4:	d100      	bne.n	80004c8 <__aeabi_ddiv+0x258>
 80004c6:	e0fa      	b.n	80006be <__aeabi_ddiv+0x44e>
 80004c8:	2301      	movs	r3, #1
 80004ca:	431d      	orrs	r5, r3
 80004cc:	4a49      	ldr	r2, [pc, #292]	; (80005f4 <__aeabi_ddiv+0x384>)
 80004ce:	445a      	add	r2, fp
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	dc00      	bgt.n	80004d6 <__aeabi_ddiv+0x266>
 80004d4:	e0aa      	b.n	800062c <__aeabi_ddiv+0x3bc>
 80004d6:	076b      	lsls	r3, r5, #29
 80004d8:	d000      	beq.n	80004dc <__aeabi_ddiv+0x26c>
 80004da:	e13d      	b.n	8000758 <__aeabi_ddiv+0x4e8>
 80004dc:	08ed      	lsrs	r5, r5, #3
 80004de:	4643      	mov	r3, r8
 80004e0:	01db      	lsls	r3, r3, #7
 80004e2:	d506      	bpl.n	80004f2 <__aeabi_ddiv+0x282>
 80004e4:	4642      	mov	r2, r8
 80004e6:	4b44      	ldr	r3, [pc, #272]	; (80005f8 <__aeabi_ddiv+0x388>)
 80004e8:	401a      	ands	r2, r3
 80004ea:	4690      	mov	r8, r2
 80004ec:	2280      	movs	r2, #128	; 0x80
 80004ee:	00d2      	lsls	r2, r2, #3
 80004f0:	445a      	add	r2, fp
 80004f2:	4b42      	ldr	r3, [pc, #264]	; (80005fc <__aeabi_ddiv+0x38c>)
 80004f4:	429a      	cmp	r2, r3
 80004f6:	dd00      	ble.n	80004fa <__aeabi_ddiv+0x28a>
 80004f8:	e71f      	b.n	800033a <__aeabi_ddiv+0xca>
 80004fa:	4643      	mov	r3, r8
 80004fc:	075b      	lsls	r3, r3, #29
 80004fe:	431d      	orrs	r5, r3
 8000500:	4643      	mov	r3, r8
 8000502:	0552      	lsls	r2, r2, #21
 8000504:	025c      	lsls	r4, r3, #9
 8000506:	0b24      	lsrs	r4, r4, #12
 8000508:	0d53      	lsrs	r3, r2, #21
 800050a:	e708      	b.n	800031e <__aeabi_ddiv+0xae>
 800050c:	4652      	mov	r2, sl
 800050e:	4322      	orrs	r2, r4
 8000510:	d100      	bne.n	8000514 <__aeabi_ddiv+0x2a4>
 8000512:	e07b      	b.n	800060c <__aeabi_ddiv+0x39c>
 8000514:	2c00      	cmp	r4, #0
 8000516:	d100      	bne.n	800051a <__aeabi_ddiv+0x2aa>
 8000518:	e0fa      	b.n	8000710 <__aeabi_ddiv+0x4a0>
 800051a:	0020      	movs	r0, r4
 800051c:	f001 f836 	bl	800158c <__clzsi2>
 8000520:	0002      	movs	r2, r0
 8000522:	3a0b      	subs	r2, #11
 8000524:	231d      	movs	r3, #29
 8000526:	0001      	movs	r1, r0
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	3908      	subs	r1, #8
 800052e:	40da      	lsrs	r2, r3
 8000530:	408c      	lsls	r4, r1
 8000532:	4314      	orrs	r4, r2
 8000534:	4652      	mov	r2, sl
 8000536:	408a      	lsls	r2, r1
 8000538:	4b31      	ldr	r3, [pc, #196]	; (8000600 <__aeabi_ddiv+0x390>)
 800053a:	4458      	add	r0, fp
 800053c:	469b      	mov	fp, r3
 800053e:	4483      	add	fp, r0
 8000540:	2000      	movs	r0, #0
 8000542:	e6d5      	b.n	80002f0 <__aeabi_ddiv+0x80>
 8000544:	464b      	mov	r3, r9
 8000546:	4323      	orrs	r3, r4
 8000548:	4698      	mov	r8, r3
 800054a:	d044      	beq.n	80005d6 <__aeabi_ddiv+0x366>
 800054c:	2c00      	cmp	r4, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_ddiv+0x2e2>
 8000550:	e0ce      	b.n	80006f0 <__aeabi_ddiv+0x480>
 8000552:	0020      	movs	r0, r4
 8000554:	f001 f81a 	bl	800158c <__clzsi2>
 8000558:	0001      	movs	r1, r0
 800055a:	0002      	movs	r2, r0
 800055c:	390b      	subs	r1, #11
 800055e:	231d      	movs	r3, #29
 8000560:	1a5b      	subs	r3, r3, r1
 8000562:	4649      	mov	r1, r9
 8000564:	0010      	movs	r0, r2
 8000566:	40d9      	lsrs	r1, r3
 8000568:	3808      	subs	r0, #8
 800056a:	4084      	lsls	r4, r0
 800056c:	000b      	movs	r3, r1
 800056e:	464d      	mov	r5, r9
 8000570:	4323      	orrs	r3, r4
 8000572:	4698      	mov	r8, r3
 8000574:	4085      	lsls	r5, r0
 8000576:	4823      	ldr	r0, [pc, #140]	; (8000604 <__aeabi_ddiv+0x394>)
 8000578:	1a83      	subs	r3, r0, r2
 800057a:	469b      	mov	fp, r3
 800057c:	2300      	movs	r3, #0
 800057e:	4699      	mov	r9, r3
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	e69a      	b.n	80002ba <__aeabi_ddiv+0x4a>
 8000584:	464b      	mov	r3, r9
 8000586:	4323      	orrs	r3, r4
 8000588:	4698      	mov	r8, r3
 800058a:	d11d      	bne.n	80005c8 <__aeabi_ddiv+0x358>
 800058c:	2308      	movs	r3, #8
 800058e:	4699      	mov	r9, r3
 8000590:	3b06      	subs	r3, #6
 8000592:	2500      	movs	r5, #0
 8000594:	4683      	mov	fp, r0
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	e68f      	b.n	80002ba <__aeabi_ddiv+0x4a>
 800059a:	4652      	mov	r2, sl
 800059c:	4322      	orrs	r2, r4
 800059e:	d109      	bne.n	80005b4 <__aeabi_ddiv+0x344>
 80005a0:	2302      	movs	r3, #2
 80005a2:	4649      	mov	r1, r9
 80005a4:	4319      	orrs	r1, r3
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <__aeabi_ddiv+0x398>)
 80005a8:	4689      	mov	r9, r1
 80005aa:	469c      	mov	ip, r3
 80005ac:	2400      	movs	r4, #0
 80005ae:	2002      	movs	r0, #2
 80005b0:	44e3      	add	fp, ip
 80005b2:	e69d      	b.n	80002f0 <__aeabi_ddiv+0x80>
 80005b4:	2303      	movs	r3, #3
 80005b6:	464a      	mov	r2, r9
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <__aeabi_ddiv+0x398>)
 80005bc:	4691      	mov	r9, r2
 80005be:	469c      	mov	ip, r3
 80005c0:	4652      	mov	r2, sl
 80005c2:	2003      	movs	r0, #3
 80005c4:	44e3      	add	fp, ip
 80005c6:	e693      	b.n	80002f0 <__aeabi_ddiv+0x80>
 80005c8:	230c      	movs	r3, #12
 80005ca:	4699      	mov	r9, r3
 80005cc:	3b09      	subs	r3, #9
 80005ce:	46a0      	mov	r8, r4
 80005d0:	4683      	mov	fp, r0
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	e671      	b.n	80002ba <__aeabi_ddiv+0x4a>
 80005d6:	2304      	movs	r3, #4
 80005d8:	4699      	mov	r9, r3
 80005da:	2300      	movs	r3, #0
 80005dc:	469b      	mov	fp, r3
 80005de:	3301      	adds	r3, #1
 80005e0:	2500      	movs	r5, #0
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	e669      	b.n	80002ba <__aeabi_ddiv+0x4a>
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	000007ff 	.word	0x000007ff
 80005ec:	fffffc01 	.word	0xfffffc01
 80005f0:	08008218 	.word	0x08008218
 80005f4:	000003ff 	.word	0x000003ff
 80005f8:	feffffff 	.word	0xfeffffff
 80005fc:	000007fe 	.word	0x000007fe
 8000600:	000003f3 	.word	0x000003f3
 8000604:	fffffc0d 	.word	0xfffffc0d
 8000608:	fffff801 	.word	0xfffff801
 800060c:	4649      	mov	r1, r9
 800060e:	2301      	movs	r3, #1
 8000610:	4319      	orrs	r1, r3
 8000612:	4689      	mov	r9, r1
 8000614:	2400      	movs	r4, #0
 8000616:	2001      	movs	r0, #1
 8000618:	e66a      	b.n	80002f0 <__aeabi_ddiv+0x80>
 800061a:	2300      	movs	r3, #0
 800061c:	2480      	movs	r4, #128	; 0x80
 800061e:	469a      	mov	sl, r3
 8000620:	2500      	movs	r5, #0
 8000622:	4b8a      	ldr	r3, [pc, #552]	; (800084c <__aeabi_ddiv+0x5dc>)
 8000624:	0324      	lsls	r4, r4, #12
 8000626:	e67a      	b.n	800031e <__aeabi_ddiv+0xae>
 8000628:	2501      	movs	r5, #1
 800062a:	426d      	negs	r5, r5
 800062c:	2301      	movs	r3, #1
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	2b38      	cmp	r3, #56	; 0x38
 8000632:	dd00      	ble.n	8000636 <__aeabi_ddiv+0x3c6>
 8000634:	e670      	b.n	8000318 <__aeabi_ddiv+0xa8>
 8000636:	2b1f      	cmp	r3, #31
 8000638:	dc00      	bgt.n	800063c <__aeabi_ddiv+0x3cc>
 800063a:	e0bf      	b.n	80007bc <__aeabi_ddiv+0x54c>
 800063c:	211f      	movs	r1, #31
 800063e:	4249      	negs	r1, r1
 8000640:	1a8a      	subs	r2, r1, r2
 8000642:	4641      	mov	r1, r8
 8000644:	40d1      	lsrs	r1, r2
 8000646:	000a      	movs	r2, r1
 8000648:	2b20      	cmp	r3, #32
 800064a:	d004      	beq.n	8000656 <__aeabi_ddiv+0x3e6>
 800064c:	4641      	mov	r1, r8
 800064e:	4b80      	ldr	r3, [pc, #512]	; (8000850 <__aeabi_ddiv+0x5e0>)
 8000650:	445b      	add	r3, fp
 8000652:	4099      	lsls	r1, r3
 8000654:	430d      	orrs	r5, r1
 8000656:	1e6b      	subs	r3, r5, #1
 8000658:	419d      	sbcs	r5, r3
 800065a:	2307      	movs	r3, #7
 800065c:	432a      	orrs	r2, r5
 800065e:	001d      	movs	r5, r3
 8000660:	2400      	movs	r4, #0
 8000662:	4015      	ands	r5, r2
 8000664:	4213      	tst	r3, r2
 8000666:	d100      	bne.n	800066a <__aeabi_ddiv+0x3fa>
 8000668:	e0d4      	b.n	8000814 <__aeabi_ddiv+0x5a4>
 800066a:	210f      	movs	r1, #15
 800066c:	2300      	movs	r3, #0
 800066e:	4011      	ands	r1, r2
 8000670:	2904      	cmp	r1, #4
 8000672:	d100      	bne.n	8000676 <__aeabi_ddiv+0x406>
 8000674:	e0cb      	b.n	800080e <__aeabi_ddiv+0x59e>
 8000676:	1d11      	adds	r1, r2, #4
 8000678:	4291      	cmp	r1, r2
 800067a:	4192      	sbcs	r2, r2
 800067c:	4252      	negs	r2, r2
 800067e:	189b      	adds	r3, r3, r2
 8000680:	000a      	movs	r2, r1
 8000682:	0219      	lsls	r1, r3, #8
 8000684:	d400      	bmi.n	8000688 <__aeabi_ddiv+0x418>
 8000686:	e0c2      	b.n	800080e <__aeabi_ddiv+0x59e>
 8000688:	2301      	movs	r3, #1
 800068a:	2400      	movs	r4, #0
 800068c:	2500      	movs	r5, #0
 800068e:	e646      	b.n	800031e <__aeabi_ddiv+0xae>
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	4641      	mov	r1, r8
 8000694:	031b      	lsls	r3, r3, #12
 8000696:	4219      	tst	r1, r3
 8000698:	d008      	beq.n	80006ac <__aeabi_ddiv+0x43c>
 800069a:	421c      	tst	r4, r3
 800069c:	d106      	bne.n	80006ac <__aeabi_ddiv+0x43c>
 800069e:	431c      	orrs	r4, r3
 80006a0:	0324      	lsls	r4, r4, #12
 80006a2:	46ba      	mov	sl, r7
 80006a4:	0015      	movs	r5, r2
 80006a6:	4b69      	ldr	r3, [pc, #420]	; (800084c <__aeabi_ddiv+0x5dc>)
 80006a8:	0b24      	lsrs	r4, r4, #12
 80006aa:	e638      	b.n	800031e <__aeabi_ddiv+0xae>
 80006ac:	2480      	movs	r4, #128	; 0x80
 80006ae:	4643      	mov	r3, r8
 80006b0:	0324      	lsls	r4, r4, #12
 80006b2:	431c      	orrs	r4, r3
 80006b4:	0324      	lsls	r4, r4, #12
 80006b6:	46b2      	mov	sl, r6
 80006b8:	4b64      	ldr	r3, [pc, #400]	; (800084c <__aeabi_ddiv+0x5dc>)
 80006ba:	0b24      	lsrs	r4, r4, #12
 80006bc:	e62f      	b.n	800031e <__aeabi_ddiv+0xae>
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_ddiv+0x454>
 80006c2:	e703      	b.n	80004cc <__aeabi_ddiv+0x25c>
 80006c4:	19a6      	adds	r6, r4, r6
 80006c6:	1e68      	subs	r0, r5, #1
 80006c8:	42a6      	cmp	r6, r4
 80006ca:	d200      	bcs.n	80006ce <__aeabi_ddiv+0x45e>
 80006cc:	e08d      	b.n	80007ea <__aeabi_ddiv+0x57a>
 80006ce:	428e      	cmp	r6, r1
 80006d0:	d200      	bcs.n	80006d4 <__aeabi_ddiv+0x464>
 80006d2:	e0a3      	b.n	800081c <__aeabi_ddiv+0x5ac>
 80006d4:	d100      	bne.n	80006d8 <__aeabi_ddiv+0x468>
 80006d6:	e0b3      	b.n	8000840 <__aeabi_ddiv+0x5d0>
 80006d8:	0005      	movs	r5, r0
 80006da:	e6f5      	b.n	80004c8 <__aeabi_ddiv+0x258>
 80006dc:	42aa      	cmp	r2, r5
 80006de:	d900      	bls.n	80006e2 <__aeabi_ddiv+0x472>
 80006e0:	e639      	b.n	8000356 <__aeabi_ddiv+0xe6>
 80006e2:	4643      	mov	r3, r8
 80006e4:	07de      	lsls	r6, r3, #31
 80006e6:	0858      	lsrs	r0, r3, #1
 80006e8:	086b      	lsrs	r3, r5, #1
 80006ea:	431e      	orrs	r6, r3
 80006ec:	07ed      	lsls	r5, r5, #31
 80006ee:	e639      	b.n	8000364 <__aeabi_ddiv+0xf4>
 80006f0:	4648      	mov	r0, r9
 80006f2:	f000 ff4b 	bl	800158c <__clzsi2>
 80006f6:	0001      	movs	r1, r0
 80006f8:	0002      	movs	r2, r0
 80006fa:	3115      	adds	r1, #21
 80006fc:	3220      	adds	r2, #32
 80006fe:	291c      	cmp	r1, #28
 8000700:	dc00      	bgt.n	8000704 <__aeabi_ddiv+0x494>
 8000702:	e72c      	b.n	800055e <__aeabi_ddiv+0x2ee>
 8000704:	464b      	mov	r3, r9
 8000706:	3808      	subs	r0, #8
 8000708:	4083      	lsls	r3, r0
 800070a:	2500      	movs	r5, #0
 800070c:	4698      	mov	r8, r3
 800070e:	e732      	b.n	8000576 <__aeabi_ddiv+0x306>
 8000710:	f000 ff3c 	bl	800158c <__clzsi2>
 8000714:	0003      	movs	r3, r0
 8000716:	001a      	movs	r2, r3
 8000718:	3215      	adds	r2, #21
 800071a:	3020      	adds	r0, #32
 800071c:	2a1c      	cmp	r2, #28
 800071e:	dc00      	bgt.n	8000722 <__aeabi_ddiv+0x4b2>
 8000720:	e700      	b.n	8000524 <__aeabi_ddiv+0x2b4>
 8000722:	4654      	mov	r4, sl
 8000724:	3b08      	subs	r3, #8
 8000726:	2200      	movs	r2, #0
 8000728:	409c      	lsls	r4, r3
 800072a:	e705      	b.n	8000538 <__aeabi_ddiv+0x2c8>
 800072c:	1936      	adds	r6, r6, r4
 800072e:	3b01      	subs	r3, #1
 8000730:	42b4      	cmp	r4, r6
 8000732:	d900      	bls.n	8000736 <__aeabi_ddiv+0x4c6>
 8000734:	e6a6      	b.n	8000484 <__aeabi_ddiv+0x214>
 8000736:	42b2      	cmp	r2, r6
 8000738:	d800      	bhi.n	800073c <__aeabi_ddiv+0x4cc>
 800073a:	e6a3      	b.n	8000484 <__aeabi_ddiv+0x214>
 800073c:	1e83      	subs	r3, r0, #2
 800073e:	1936      	adds	r6, r6, r4
 8000740:	e6a0      	b.n	8000484 <__aeabi_ddiv+0x214>
 8000742:	1909      	adds	r1, r1, r4
 8000744:	3d01      	subs	r5, #1
 8000746:	428c      	cmp	r4, r1
 8000748:	d900      	bls.n	800074c <__aeabi_ddiv+0x4dc>
 800074a:	e68d      	b.n	8000468 <__aeabi_ddiv+0x1f8>
 800074c:	428a      	cmp	r2, r1
 800074e:	d800      	bhi.n	8000752 <__aeabi_ddiv+0x4e2>
 8000750:	e68a      	b.n	8000468 <__aeabi_ddiv+0x1f8>
 8000752:	1e85      	subs	r5, r0, #2
 8000754:	1909      	adds	r1, r1, r4
 8000756:	e687      	b.n	8000468 <__aeabi_ddiv+0x1f8>
 8000758:	230f      	movs	r3, #15
 800075a:	402b      	ands	r3, r5
 800075c:	2b04      	cmp	r3, #4
 800075e:	d100      	bne.n	8000762 <__aeabi_ddiv+0x4f2>
 8000760:	e6bc      	b.n	80004dc <__aeabi_ddiv+0x26c>
 8000762:	2305      	movs	r3, #5
 8000764:	425b      	negs	r3, r3
 8000766:	42ab      	cmp	r3, r5
 8000768:	419b      	sbcs	r3, r3
 800076a:	3504      	adds	r5, #4
 800076c:	425b      	negs	r3, r3
 800076e:	08ed      	lsrs	r5, r5, #3
 8000770:	4498      	add	r8, r3
 8000772:	e6b4      	b.n	80004de <__aeabi_ddiv+0x26e>
 8000774:	42af      	cmp	r7, r5
 8000776:	d900      	bls.n	800077a <__aeabi_ddiv+0x50a>
 8000778:	e660      	b.n	800043c <__aeabi_ddiv+0x1cc>
 800077a:	4282      	cmp	r2, r0
 800077c:	d804      	bhi.n	8000788 <__aeabi_ddiv+0x518>
 800077e:	d000      	beq.n	8000782 <__aeabi_ddiv+0x512>
 8000780:	e65c      	b.n	800043c <__aeabi_ddiv+0x1cc>
 8000782:	42ae      	cmp	r6, r5
 8000784:	d800      	bhi.n	8000788 <__aeabi_ddiv+0x518>
 8000786:	e659      	b.n	800043c <__aeabi_ddiv+0x1cc>
 8000788:	2302      	movs	r3, #2
 800078a:	425b      	negs	r3, r3
 800078c:	469c      	mov	ip, r3
 800078e:	9b00      	ldr	r3, [sp, #0]
 8000790:	44e0      	add	r8, ip
 8000792:	469c      	mov	ip, r3
 8000794:	4465      	add	r5, ip
 8000796:	429d      	cmp	r5, r3
 8000798:	419b      	sbcs	r3, r3
 800079a:	425b      	negs	r3, r3
 800079c:	191b      	adds	r3, r3, r4
 800079e:	18c0      	adds	r0, r0, r3
 80007a0:	e64d      	b.n	800043e <__aeabi_ddiv+0x1ce>
 80007a2:	428a      	cmp	r2, r1
 80007a4:	d800      	bhi.n	80007a8 <__aeabi_ddiv+0x538>
 80007a6:	e60e      	b.n	80003c6 <__aeabi_ddiv+0x156>
 80007a8:	1e83      	subs	r3, r0, #2
 80007aa:	1909      	adds	r1, r1, r4
 80007ac:	e60b      	b.n	80003c6 <__aeabi_ddiv+0x156>
 80007ae:	428a      	cmp	r2, r1
 80007b0:	d800      	bhi.n	80007b4 <__aeabi_ddiv+0x544>
 80007b2:	e5f4      	b.n	800039e <__aeabi_ddiv+0x12e>
 80007b4:	1e83      	subs	r3, r0, #2
 80007b6:	4698      	mov	r8, r3
 80007b8:	1909      	adds	r1, r1, r4
 80007ba:	e5f0      	b.n	800039e <__aeabi_ddiv+0x12e>
 80007bc:	4925      	ldr	r1, [pc, #148]	; (8000854 <__aeabi_ddiv+0x5e4>)
 80007be:	0028      	movs	r0, r5
 80007c0:	4459      	add	r1, fp
 80007c2:	408d      	lsls	r5, r1
 80007c4:	4642      	mov	r2, r8
 80007c6:	408a      	lsls	r2, r1
 80007c8:	1e69      	subs	r1, r5, #1
 80007ca:	418d      	sbcs	r5, r1
 80007cc:	4641      	mov	r1, r8
 80007ce:	40d8      	lsrs	r0, r3
 80007d0:	40d9      	lsrs	r1, r3
 80007d2:	4302      	orrs	r2, r0
 80007d4:	432a      	orrs	r2, r5
 80007d6:	000b      	movs	r3, r1
 80007d8:	0751      	lsls	r1, r2, #29
 80007da:	d100      	bne.n	80007de <__aeabi_ddiv+0x56e>
 80007dc:	e751      	b.n	8000682 <__aeabi_ddiv+0x412>
 80007de:	210f      	movs	r1, #15
 80007e0:	4011      	ands	r1, r2
 80007e2:	2904      	cmp	r1, #4
 80007e4:	d000      	beq.n	80007e8 <__aeabi_ddiv+0x578>
 80007e6:	e746      	b.n	8000676 <__aeabi_ddiv+0x406>
 80007e8:	e74b      	b.n	8000682 <__aeabi_ddiv+0x412>
 80007ea:	0005      	movs	r5, r0
 80007ec:	428e      	cmp	r6, r1
 80007ee:	d000      	beq.n	80007f2 <__aeabi_ddiv+0x582>
 80007f0:	e66a      	b.n	80004c8 <__aeabi_ddiv+0x258>
 80007f2:	9a00      	ldr	r2, [sp, #0]
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d000      	beq.n	80007fa <__aeabi_ddiv+0x58a>
 80007f8:	e666      	b.n	80004c8 <__aeabi_ddiv+0x258>
 80007fa:	e667      	b.n	80004cc <__aeabi_ddiv+0x25c>
 80007fc:	4a16      	ldr	r2, [pc, #88]	; (8000858 <__aeabi_ddiv+0x5e8>)
 80007fe:	445a      	add	r2, fp
 8000800:	2a00      	cmp	r2, #0
 8000802:	dc00      	bgt.n	8000806 <__aeabi_ddiv+0x596>
 8000804:	e710      	b.n	8000628 <__aeabi_ddiv+0x3b8>
 8000806:	2301      	movs	r3, #1
 8000808:	2500      	movs	r5, #0
 800080a:	4498      	add	r8, r3
 800080c:	e667      	b.n	80004de <__aeabi_ddiv+0x26e>
 800080e:	075d      	lsls	r5, r3, #29
 8000810:	025b      	lsls	r3, r3, #9
 8000812:	0b1c      	lsrs	r4, r3, #12
 8000814:	08d2      	lsrs	r2, r2, #3
 8000816:	2300      	movs	r3, #0
 8000818:	4315      	orrs	r5, r2
 800081a:	e580      	b.n	800031e <__aeabi_ddiv+0xae>
 800081c:	9800      	ldr	r0, [sp, #0]
 800081e:	3d02      	subs	r5, #2
 8000820:	0042      	lsls	r2, r0, #1
 8000822:	4282      	cmp	r2, r0
 8000824:	41bf      	sbcs	r7, r7
 8000826:	427f      	negs	r7, r7
 8000828:	193c      	adds	r4, r7, r4
 800082a:	1936      	adds	r6, r6, r4
 800082c:	9200      	str	r2, [sp, #0]
 800082e:	e7dd      	b.n	80007ec <__aeabi_ddiv+0x57c>
 8000830:	2480      	movs	r4, #128	; 0x80
 8000832:	4643      	mov	r3, r8
 8000834:	0324      	lsls	r4, r4, #12
 8000836:	431c      	orrs	r4, r3
 8000838:	0324      	lsls	r4, r4, #12
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <__aeabi_ddiv+0x5dc>)
 800083c:	0b24      	lsrs	r4, r4, #12
 800083e:	e56e      	b.n	800031e <__aeabi_ddiv+0xae>
 8000840:	9a00      	ldr	r2, [sp, #0]
 8000842:	429a      	cmp	r2, r3
 8000844:	d3ea      	bcc.n	800081c <__aeabi_ddiv+0x5ac>
 8000846:	0005      	movs	r5, r0
 8000848:	e7d3      	b.n	80007f2 <__aeabi_ddiv+0x582>
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	000007ff 	.word	0x000007ff
 8000850:	0000043e 	.word	0x0000043e
 8000854:	0000041e 	.word	0x0000041e
 8000858:	000003ff 	.word	0x000003ff

0800085c <__aeabi_dmul>:
 800085c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085e:	4657      	mov	r7, sl
 8000860:	464e      	mov	r6, r9
 8000862:	4645      	mov	r5, r8
 8000864:	46de      	mov	lr, fp
 8000866:	b5e0      	push	{r5, r6, r7, lr}
 8000868:	4698      	mov	r8, r3
 800086a:	030c      	lsls	r4, r1, #12
 800086c:	004b      	lsls	r3, r1, #1
 800086e:	0006      	movs	r6, r0
 8000870:	4692      	mov	sl, r2
 8000872:	b087      	sub	sp, #28
 8000874:	0b24      	lsrs	r4, r4, #12
 8000876:	0d5b      	lsrs	r3, r3, #21
 8000878:	0fcf      	lsrs	r7, r1, #31
 800087a:	2b00      	cmp	r3, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_dmul+0x24>
 800087e:	e15c      	b.n	8000b3a <__aeabi_dmul+0x2de>
 8000880:	4ad9      	ldr	r2, [pc, #868]	; (8000be8 <__aeabi_dmul+0x38c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d100      	bne.n	8000888 <__aeabi_dmul+0x2c>
 8000886:	e175      	b.n	8000b74 <__aeabi_dmul+0x318>
 8000888:	0f42      	lsrs	r2, r0, #29
 800088a:	00e4      	lsls	r4, r4, #3
 800088c:	4314      	orrs	r4, r2
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0412      	lsls	r2, r2, #16
 8000892:	4314      	orrs	r4, r2
 8000894:	4ad5      	ldr	r2, [pc, #852]	; (8000bec <__aeabi_dmul+0x390>)
 8000896:	00c5      	lsls	r5, r0, #3
 8000898:	4694      	mov	ip, r2
 800089a:	4463      	add	r3, ip
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2300      	movs	r3, #0
 80008a0:	4699      	mov	r9, r3
 80008a2:	469b      	mov	fp, r3
 80008a4:	4643      	mov	r3, r8
 80008a6:	4642      	mov	r2, r8
 80008a8:	031e      	lsls	r6, r3, #12
 80008aa:	0fd2      	lsrs	r2, r2, #31
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4650      	mov	r0, sl
 80008b0:	4690      	mov	r8, r2
 80008b2:	0b36      	lsrs	r6, r6, #12
 80008b4:	0d5b      	lsrs	r3, r3, #21
 80008b6:	d100      	bne.n	80008ba <__aeabi_dmul+0x5e>
 80008b8:	e120      	b.n	8000afc <__aeabi_dmul+0x2a0>
 80008ba:	4acb      	ldr	r2, [pc, #812]	; (8000be8 <__aeabi_dmul+0x38c>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d100      	bne.n	80008c2 <__aeabi_dmul+0x66>
 80008c0:	e162      	b.n	8000b88 <__aeabi_dmul+0x32c>
 80008c2:	49ca      	ldr	r1, [pc, #808]	; (8000bec <__aeabi_dmul+0x390>)
 80008c4:	0f42      	lsrs	r2, r0, #29
 80008c6:	468c      	mov	ip, r1
 80008c8:	9900      	ldr	r1, [sp, #0]
 80008ca:	4463      	add	r3, ip
 80008cc:	00f6      	lsls	r6, r6, #3
 80008ce:	468c      	mov	ip, r1
 80008d0:	4316      	orrs	r6, r2
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	449c      	add	ip, r3
 80008d6:	0412      	lsls	r2, r2, #16
 80008d8:	4663      	mov	r3, ip
 80008da:	4316      	orrs	r6, r2
 80008dc:	00c2      	lsls	r2, r0, #3
 80008de:	2000      	movs	r0, #0
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	9900      	ldr	r1, [sp, #0]
 80008e4:	4643      	mov	r3, r8
 80008e6:	3101      	adds	r1, #1
 80008e8:	468c      	mov	ip, r1
 80008ea:	4649      	mov	r1, r9
 80008ec:	407b      	eors	r3, r7
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	290f      	cmp	r1, #15
 80008f2:	d826      	bhi.n	8000942 <__aeabi_dmul+0xe6>
 80008f4:	4bbe      	ldr	r3, [pc, #760]	; (8000bf0 <__aeabi_dmul+0x394>)
 80008f6:	0089      	lsls	r1, r1, #2
 80008f8:	5859      	ldr	r1, [r3, r1]
 80008fa:	468f      	mov	pc, r1
 80008fc:	4643      	mov	r3, r8
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	0034      	movs	r4, r6
 8000902:	0015      	movs	r5, r2
 8000904:	4683      	mov	fp, r0
 8000906:	465b      	mov	r3, fp
 8000908:	2b02      	cmp	r3, #2
 800090a:	d016      	beq.n	800093a <__aeabi_dmul+0xde>
 800090c:	2b03      	cmp	r3, #3
 800090e:	d100      	bne.n	8000912 <__aeabi_dmul+0xb6>
 8000910:	e203      	b.n	8000d1a <__aeabi_dmul+0x4be>
 8000912:	2b01      	cmp	r3, #1
 8000914:	d000      	beq.n	8000918 <__aeabi_dmul+0xbc>
 8000916:	e0cd      	b.n	8000ab4 <__aeabi_dmul+0x258>
 8000918:	2200      	movs	r2, #0
 800091a:	2400      	movs	r4, #0
 800091c:	2500      	movs	r5, #0
 800091e:	9b01      	ldr	r3, [sp, #4]
 8000920:	0512      	lsls	r2, r2, #20
 8000922:	4322      	orrs	r2, r4
 8000924:	07db      	lsls	r3, r3, #31
 8000926:	431a      	orrs	r2, r3
 8000928:	0028      	movs	r0, r5
 800092a:	0011      	movs	r1, r2
 800092c:	b007      	add	sp, #28
 800092e:	bcf0      	pop	{r4, r5, r6, r7}
 8000930:	46bb      	mov	fp, r7
 8000932:	46b2      	mov	sl, r6
 8000934:	46a9      	mov	r9, r5
 8000936:	46a0      	mov	r8, r4
 8000938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093a:	2400      	movs	r4, #0
 800093c:	2500      	movs	r5, #0
 800093e:	4aaa      	ldr	r2, [pc, #680]	; (8000be8 <__aeabi_dmul+0x38c>)
 8000940:	e7ed      	b.n	800091e <__aeabi_dmul+0xc2>
 8000942:	0c28      	lsrs	r0, r5, #16
 8000944:	042d      	lsls	r5, r5, #16
 8000946:	0c2d      	lsrs	r5, r5, #16
 8000948:	002b      	movs	r3, r5
 800094a:	0c11      	lsrs	r1, r2, #16
 800094c:	0412      	lsls	r2, r2, #16
 800094e:	0c12      	lsrs	r2, r2, #16
 8000950:	4353      	muls	r3, r2
 8000952:	4698      	mov	r8, r3
 8000954:	0013      	movs	r3, r2
 8000956:	002f      	movs	r7, r5
 8000958:	4343      	muls	r3, r0
 800095a:	4699      	mov	r9, r3
 800095c:	434f      	muls	r7, r1
 800095e:	444f      	add	r7, r9
 8000960:	46bb      	mov	fp, r7
 8000962:	4647      	mov	r7, r8
 8000964:	000b      	movs	r3, r1
 8000966:	0c3f      	lsrs	r7, r7, #16
 8000968:	46ba      	mov	sl, r7
 800096a:	4343      	muls	r3, r0
 800096c:	44da      	add	sl, fp
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	45d1      	cmp	r9, sl
 8000972:	d904      	bls.n	800097e <__aeabi_dmul+0x122>
 8000974:	2780      	movs	r7, #128	; 0x80
 8000976:	027f      	lsls	r7, r7, #9
 8000978:	46b9      	mov	r9, r7
 800097a:	444b      	add	r3, r9
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	4653      	mov	r3, sl
 8000980:	0c1b      	lsrs	r3, r3, #16
 8000982:	469b      	mov	fp, r3
 8000984:	4653      	mov	r3, sl
 8000986:	041f      	lsls	r7, r3, #16
 8000988:	4643      	mov	r3, r8
 800098a:	041b      	lsls	r3, r3, #16
 800098c:	0c1b      	lsrs	r3, r3, #16
 800098e:	4698      	mov	r8, r3
 8000990:	003b      	movs	r3, r7
 8000992:	4443      	add	r3, r8
 8000994:	9304      	str	r3, [sp, #16]
 8000996:	0c33      	lsrs	r3, r6, #16
 8000998:	0436      	lsls	r6, r6, #16
 800099a:	0c36      	lsrs	r6, r6, #16
 800099c:	4698      	mov	r8, r3
 800099e:	0033      	movs	r3, r6
 80009a0:	4343      	muls	r3, r0
 80009a2:	4699      	mov	r9, r3
 80009a4:	4643      	mov	r3, r8
 80009a6:	4343      	muls	r3, r0
 80009a8:	002f      	movs	r7, r5
 80009aa:	469a      	mov	sl, r3
 80009ac:	4643      	mov	r3, r8
 80009ae:	4377      	muls	r7, r6
 80009b0:	435d      	muls	r5, r3
 80009b2:	0c38      	lsrs	r0, r7, #16
 80009b4:	444d      	add	r5, r9
 80009b6:	1945      	adds	r5, r0, r5
 80009b8:	45a9      	cmp	r9, r5
 80009ba:	d903      	bls.n	80009c4 <__aeabi_dmul+0x168>
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	025b      	lsls	r3, r3, #9
 80009c0:	4699      	mov	r9, r3
 80009c2:	44ca      	add	sl, r9
 80009c4:	043f      	lsls	r7, r7, #16
 80009c6:	0c28      	lsrs	r0, r5, #16
 80009c8:	0c3f      	lsrs	r7, r7, #16
 80009ca:	042d      	lsls	r5, r5, #16
 80009cc:	19ed      	adds	r5, r5, r7
 80009ce:	0c27      	lsrs	r7, r4, #16
 80009d0:	0424      	lsls	r4, r4, #16
 80009d2:	0c24      	lsrs	r4, r4, #16
 80009d4:	0003      	movs	r3, r0
 80009d6:	0020      	movs	r0, r4
 80009d8:	4350      	muls	r0, r2
 80009da:	437a      	muls	r2, r7
 80009dc:	4691      	mov	r9, r2
 80009de:	003a      	movs	r2, r7
 80009e0:	4453      	add	r3, sl
 80009e2:	9305      	str	r3, [sp, #20]
 80009e4:	0c03      	lsrs	r3, r0, #16
 80009e6:	469a      	mov	sl, r3
 80009e8:	434a      	muls	r2, r1
 80009ea:	4361      	muls	r1, r4
 80009ec:	4449      	add	r1, r9
 80009ee:	4451      	add	r1, sl
 80009f0:	44ab      	add	fp, r5
 80009f2:	4589      	cmp	r9, r1
 80009f4:	d903      	bls.n	80009fe <__aeabi_dmul+0x1a2>
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	025b      	lsls	r3, r3, #9
 80009fa:	4699      	mov	r9, r3
 80009fc:	444a      	add	r2, r9
 80009fe:	0400      	lsls	r0, r0, #16
 8000a00:	0c0b      	lsrs	r3, r1, #16
 8000a02:	0c00      	lsrs	r0, r0, #16
 8000a04:	0409      	lsls	r1, r1, #16
 8000a06:	1809      	adds	r1, r1, r0
 8000a08:	0020      	movs	r0, r4
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	4643      	mov	r3, r8
 8000a0e:	4370      	muls	r0, r6
 8000a10:	435c      	muls	r4, r3
 8000a12:	437e      	muls	r6, r7
 8000a14:	435f      	muls	r7, r3
 8000a16:	0c03      	lsrs	r3, r0, #16
 8000a18:	4698      	mov	r8, r3
 8000a1a:	19a4      	adds	r4, r4, r6
 8000a1c:	4444      	add	r4, r8
 8000a1e:	444a      	add	r2, r9
 8000a20:	9703      	str	r7, [sp, #12]
 8000a22:	42a6      	cmp	r6, r4
 8000a24:	d904      	bls.n	8000a30 <__aeabi_dmul+0x1d4>
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	025b      	lsls	r3, r3, #9
 8000a2a:	4698      	mov	r8, r3
 8000a2c:	4447      	add	r7, r8
 8000a2e:	9703      	str	r7, [sp, #12]
 8000a30:	0423      	lsls	r3, r4, #16
 8000a32:	9e02      	ldr	r6, [sp, #8]
 8000a34:	469a      	mov	sl, r3
 8000a36:	9b05      	ldr	r3, [sp, #20]
 8000a38:	445e      	add	r6, fp
 8000a3a:	4698      	mov	r8, r3
 8000a3c:	42ae      	cmp	r6, r5
 8000a3e:	41ad      	sbcs	r5, r5
 8000a40:	1876      	adds	r6, r6, r1
 8000a42:	428e      	cmp	r6, r1
 8000a44:	4189      	sbcs	r1, r1
 8000a46:	0400      	lsls	r0, r0, #16
 8000a48:	0c00      	lsrs	r0, r0, #16
 8000a4a:	4450      	add	r0, sl
 8000a4c:	4440      	add	r0, r8
 8000a4e:	426d      	negs	r5, r5
 8000a50:	1947      	adds	r7, r0, r5
 8000a52:	46b8      	mov	r8, r7
 8000a54:	4693      	mov	fp, r2
 8000a56:	4249      	negs	r1, r1
 8000a58:	4689      	mov	r9, r1
 8000a5a:	44c3      	add	fp, r8
 8000a5c:	44d9      	add	r9, fp
 8000a5e:	4298      	cmp	r0, r3
 8000a60:	4180      	sbcs	r0, r0
 8000a62:	45a8      	cmp	r8, r5
 8000a64:	41ad      	sbcs	r5, r5
 8000a66:	4593      	cmp	fp, r2
 8000a68:	4192      	sbcs	r2, r2
 8000a6a:	4589      	cmp	r9, r1
 8000a6c:	4189      	sbcs	r1, r1
 8000a6e:	426d      	negs	r5, r5
 8000a70:	4240      	negs	r0, r0
 8000a72:	4328      	orrs	r0, r5
 8000a74:	0c24      	lsrs	r4, r4, #16
 8000a76:	4252      	negs	r2, r2
 8000a78:	4249      	negs	r1, r1
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	9b03      	ldr	r3, [sp, #12]
 8000a7e:	1900      	adds	r0, r0, r4
 8000a80:	1880      	adds	r0, r0, r2
 8000a82:	18c7      	adds	r7, r0, r3
 8000a84:	464b      	mov	r3, r9
 8000a86:	0ddc      	lsrs	r4, r3, #23
 8000a88:	9b04      	ldr	r3, [sp, #16]
 8000a8a:	0275      	lsls	r5, r6, #9
 8000a8c:	431d      	orrs	r5, r3
 8000a8e:	1e6a      	subs	r2, r5, #1
 8000a90:	4195      	sbcs	r5, r2
 8000a92:	464b      	mov	r3, r9
 8000a94:	0df6      	lsrs	r6, r6, #23
 8000a96:	027f      	lsls	r7, r7, #9
 8000a98:	4335      	orrs	r5, r6
 8000a9a:	025a      	lsls	r2, r3, #9
 8000a9c:	433c      	orrs	r4, r7
 8000a9e:	4315      	orrs	r5, r2
 8000aa0:	01fb      	lsls	r3, r7, #7
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dmul+0x24a>
 8000aa4:	e11c      	b.n	8000ce0 <__aeabi_dmul+0x484>
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	086a      	lsrs	r2, r5, #1
 8000aaa:	400d      	ands	r5, r1
 8000aac:	4315      	orrs	r5, r2
 8000aae:	07e2      	lsls	r2, r4, #31
 8000ab0:	4315      	orrs	r5, r2
 8000ab2:	0864      	lsrs	r4, r4, #1
 8000ab4:	494f      	ldr	r1, [pc, #316]	; (8000bf4 <__aeabi_dmul+0x398>)
 8000ab6:	4461      	add	r1, ip
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	dc00      	bgt.n	8000abe <__aeabi_dmul+0x262>
 8000abc:	e0b0      	b.n	8000c20 <__aeabi_dmul+0x3c4>
 8000abe:	076b      	lsls	r3, r5, #29
 8000ac0:	d009      	beq.n	8000ad6 <__aeabi_dmul+0x27a>
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	402a      	ands	r2, r5
 8000ac6:	2a04      	cmp	r2, #4
 8000ac8:	d005      	beq.n	8000ad6 <__aeabi_dmul+0x27a>
 8000aca:	1d2a      	adds	r2, r5, #4
 8000acc:	42aa      	cmp	r2, r5
 8000ace:	41ad      	sbcs	r5, r5
 8000ad0:	426d      	negs	r5, r5
 8000ad2:	1964      	adds	r4, r4, r5
 8000ad4:	0015      	movs	r5, r2
 8000ad6:	01e3      	lsls	r3, r4, #7
 8000ad8:	d504      	bpl.n	8000ae4 <__aeabi_dmul+0x288>
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	4a46      	ldr	r2, [pc, #280]	; (8000bf8 <__aeabi_dmul+0x39c>)
 8000ade:	00c9      	lsls	r1, r1, #3
 8000ae0:	4014      	ands	r4, r2
 8000ae2:	4461      	add	r1, ip
 8000ae4:	4a45      	ldr	r2, [pc, #276]	; (8000bfc <__aeabi_dmul+0x3a0>)
 8000ae6:	4291      	cmp	r1, r2
 8000ae8:	dd00      	ble.n	8000aec <__aeabi_dmul+0x290>
 8000aea:	e726      	b.n	800093a <__aeabi_dmul+0xde>
 8000aec:	0762      	lsls	r2, r4, #29
 8000aee:	08ed      	lsrs	r5, r5, #3
 8000af0:	0264      	lsls	r4, r4, #9
 8000af2:	0549      	lsls	r1, r1, #21
 8000af4:	4315      	orrs	r5, r2
 8000af6:	0b24      	lsrs	r4, r4, #12
 8000af8:	0d4a      	lsrs	r2, r1, #21
 8000afa:	e710      	b.n	800091e <__aeabi_dmul+0xc2>
 8000afc:	4652      	mov	r2, sl
 8000afe:	4332      	orrs	r2, r6
 8000b00:	d100      	bne.n	8000b04 <__aeabi_dmul+0x2a8>
 8000b02:	e07f      	b.n	8000c04 <__aeabi_dmul+0x3a8>
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dmul+0x2ae>
 8000b08:	e0dc      	b.n	8000cc4 <__aeabi_dmul+0x468>
 8000b0a:	0030      	movs	r0, r6
 8000b0c:	f000 fd3e 	bl	800158c <__clzsi2>
 8000b10:	0002      	movs	r2, r0
 8000b12:	3a0b      	subs	r2, #11
 8000b14:	231d      	movs	r3, #29
 8000b16:	0001      	movs	r1, r0
 8000b18:	1a9b      	subs	r3, r3, r2
 8000b1a:	4652      	mov	r2, sl
 8000b1c:	3908      	subs	r1, #8
 8000b1e:	40da      	lsrs	r2, r3
 8000b20:	408e      	lsls	r6, r1
 8000b22:	4316      	orrs	r6, r2
 8000b24:	4652      	mov	r2, sl
 8000b26:	408a      	lsls	r2, r1
 8000b28:	9b00      	ldr	r3, [sp, #0]
 8000b2a:	4935      	ldr	r1, [pc, #212]	; (8000c00 <__aeabi_dmul+0x3a4>)
 8000b2c:	1a18      	subs	r0, r3, r0
 8000b2e:	0003      	movs	r3, r0
 8000b30:	468c      	mov	ip, r1
 8000b32:	4463      	add	r3, ip
 8000b34:	2000      	movs	r0, #0
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	e6d3      	b.n	80008e2 <__aeabi_dmul+0x86>
 8000b3a:	0025      	movs	r5, r4
 8000b3c:	4305      	orrs	r5, r0
 8000b3e:	d04a      	beq.n	8000bd6 <__aeabi_dmul+0x37a>
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dmul+0x2ea>
 8000b44:	e0b0      	b.n	8000ca8 <__aeabi_dmul+0x44c>
 8000b46:	0020      	movs	r0, r4
 8000b48:	f000 fd20 	bl	800158c <__clzsi2>
 8000b4c:	0001      	movs	r1, r0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	390b      	subs	r1, #11
 8000b52:	231d      	movs	r3, #29
 8000b54:	0010      	movs	r0, r2
 8000b56:	1a5b      	subs	r3, r3, r1
 8000b58:	0031      	movs	r1, r6
 8000b5a:	0035      	movs	r5, r6
 8000b5c:	3808      	subs	r0, #8
 8000b5e:	4084      	lsls	r4, r0
 8000b60:	40d9      	lsrs	r1, r3
 8000b62:	4085      	lsls	r5, r0
 8000b64:	430c      	orrs	r4, r1
 8000b66:	4826      	ldr	r0, [pc, #152]	; (8000c00 <__aeabi_dmul+0x3a4>)
 8000b68:	1a83      	subs	r3, r0, r2
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4699      	mov	r9, r3
 8000b70:	469b      	mov	fp, r3
 8000b72:	e697      	b.n	80008a4 <__aeabi_dmul+0x48>
 8000b74:	0005      	movs	r5, r0
 8000b76:	4325      	orrs	r5, r4
 8000b78:	d126      	bne.n	8000bc8 <__aeabi_dmul+0x36c>
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2302      	movs	r3, #2
 8000b80:	2400      	movs	r4, #0
 8000b82:	4691      	mov	r9, r2
 8000b84:	469b      	mov	fp, r3
 8000b86:	e68d      	b.n	80008a4 <__aeabi_dmul+0x48>
 8000b88:	4652      	mov	r2, sl
 8000b8a:	9b00      	ldr	r3, [sp, #0]
 8000b8c:	4332      	orrs	r2, r6
 8000b8e:	d110      	bne.n	8000bb2 <__aeabi_dmul+0x356>
 8000b90:	4915      	ldr	r1, [pc, #84]	; (8000be8 <__aeabi_dmul+0x38c>)
 8000b92:	2600      	movs	r6, #0
 8000b94:	468c      	mov	ip, r1
 8000b96:	4463      	add	r3, ip
 8000b98:	4649      	mov	r1, r9
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	4319      	orrs	r1, r3
 8000ba0:	4689      	mov	r9, r1
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	e69d      	b.n	80008e2 <__aeabi_dmul+0x86>
 8000ba6:	465b      	mov	r3, fp
 8000ba8:	9701      	str	r7, [sp, #4]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_dmul+0x354>
 8000bae:	e6ad      	b.n	800090c <__aeabi_dmul+0xb0>
 8000bb0:	e6c3      	b.n	800093a <__aeabi_dmul+0xde>
 8000bb2:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <__aeabi_dmul+0x38c>)
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	4694      	mov	ip, r2
 8000bb8:	4463      	add	r3, ip
 8000bba:	464a      	mov	r2, r9
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	4691      	mov	r9, r2
 8000bc4:	4652      	mov	r2, sl
 8000bc6:	e68c      	b.n	80008e2 <__aeabi_dmul+0x86>
 8000bc8:	220c      	movs	r2, #12
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2303      	movs	r3, #3
 8000bce:	0005      	movs	r5, r0
 8000bd0:	4691      	mov	r9, r2
 8000bd2:	469b      	mov	fp, r3
 8000bd4:	e666      	b.n	80008a4 <__aeabi_dmul+0x48>
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	4699      	mov	r9, r3
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	2400      	movs	r4, #0
 8000be2:	469b      	mov	fp, r3
 8000be4:	e65e      	b.n	80008a4 <__aeabi_dmul+0x48>
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	000007ff 	.word	0x000007ff
 8000bec:	fffffc01 	.word	0xfffffc01
 8000bf0:	08008258 	.word	0x08008258
 8000bf4:	000003ff 	.word	0x000003ff
 8000bf8:	feffffff 	.word	0xfeffffff
 8000bfc:	000007fe 	.word	0x000007fe
 8000c00:	fffffc0d 	.word	0xfffffc0d
 8000c04:	4649      	mov	r1, r9
 8000c06:	2301      	movs	r3, #1
 8000c08:	4319      	orrs	r1, r3
 8000c0a:	4689      	mov	r9, r1
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	2001      	movs	r0, #1
 8000c10:	e667      	b.n	80008e2 <__aeabi_dmul+0x86>
 8000c12:	2300      	movs	r3, #0
 8000c14:	2480      	movs	r4, #128	; 0x80
 8000c16:	2500      	movs	r5, #0
 8000c18:	4a43      	ldr	r2, [pc, #268]	; (8000d28 <__aeabi_dmul+0x4cc>)
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	0324      	lsls	r4, r4, #12
 8000c1e:	e67e      	b.n	800091e <__aeabi_dmul+0xc2>
 8000c20:	2001      	movs	r0, #1
 8000c22:	1a40      	subs	r0, r0, r1
 8000c24:	2838      	cmp	r0, #56	; 0x38
 8000c26:	dd00      	ble.n	8000c2a <__aeabi_dmul+0x3ce>
 8000c28:	e676      	b.n	8000918 <__aeabi_dmul+0xbc>
 8000c2a:	281f      	cmp	r0, #31
 8000c2c:	dd5b      	ble.n	8000ce6 <__aeabi_dmul+0x48a>
 8000c2e:	221f      	movs	r2, #31
 8000c30:	0023      	movs	r3, r4
 8000c32:	4252      	negs	r2, r2
 8000c34:	1a51      	subs	r1, r2, r1
 8000c36:	40cb      	lsrs	r3, r1
 8000c38:	0019      	movs	r1, r3
 8000c3a:	2820      	cmp	r0, #32
 8000c3c:	d003      	beq.n	8000c46 <__aeabi_dmul+0x3ea>
 8000c3e:	4a3b      	ldr	r2, [pc, #236]	; (8000d2c <__aeabi_dmul+0x4d0>)
 8000c40:	4462      	add	r2, ip
 8000c42:	4094      	lsls	r4, r2
 8000c44:	4325      	orrs	r5, r4
 8000c46:	1e6a      	subs	r2, r5, #1
 8000c48:	4195      	sbcs	r5, r2
 8000c4a:	002a      	movs	r2, r5
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	2107      	movs	r1, #7
 8000c50:	000d      	movs	r5, r1
 8000c52:	2400      	movs	r4, #0
 8000c54:	4015      	ands	r5, r2
 8000c56:	4211      	tst	r1, r2
 8000c58:	d05b      	beq.n	8000d12 <__aeabi_dmul+0x4b6>
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	4011      	ands	r1, r2
 8000c60:	2904      	cmp	r1, #4
 8000c62:	d053      	beq.n	8000d0c <__aeabi_dmul+0x4b0>
 8000c64:	1d11      	adds	r1, r2, #4
 8000c66:	4291      	cmp	r1, r2
 8000c68:	4192      	sbcs	r2, r2
 8000c6a:	4252      	negs	r2, r2
 8000c6c:	18a4      	adds	r4, r4, r2
 8000c6e:	000a      	movs	r2, r1
 8000c70:	0223      	lsls	r3, r4, #8
 8000c72:	d54b      	bpl.n	8000d0c <__aeabi_dmul+0x4b0>
 8000c74:	2201      	movs	r2, #1
 8000c76:	2400      	movs	r4, #0
 8000c78:	2500      	movs	r5, #0
 8000c7a:	e650      	b.n	800091e <__aeabi_dmul+0xc2>
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	031b      	lsls	r3, r3, #12
 8000c80:	421c      	tst	r4, r3
 8000c82:	d009      	beq.n	8000c98 <__aeabi_dmul+0x43c>
 8000c84:	421e      	tst	r6, r3
 8000c86:	d107      	bne.n	8000c98 <__aeabi_dmul+0x43c>
 8000c88:	4333      	orrs	r3, r6
 8000c8a:	031c      	lsls	r4, r3, #12
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	0015      	movs	r5, r2
 8000c90:	0b24      	lsrs	r4, r4, #12
 8000c92:	4a25      	ldr	r2, [pc, #148]	; (8000d28 <__aeabi_dmul+0x4cc>)
 8000c94:	9301      	str	r3, [sp, #4]
 8000c96:	e642      	b.n	800091e <__aeabi_dmul+0xc2>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	0312      	lsls	r2, r2, #12
 8000c9c:	4314      	orrs	r4, r2
 8000c9e:	0324      	lsls	r4, r4, #12
 8000ca0:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <__aeabi_dmul+0x4cc>)
 8000ca2:	0b24      	lsrs	r4, r4, #12
 8000ca4:	9701      	str	r7, [sp, #4]
 8000ca6:	e63a      	b.n	800091e <__aeabi_dmul+0xc2>
 8000ca8:	f000 fc70 	bl	800158c <__clzsi2>
 8000cac:	0001      	movs	r1, r0
 8000cae:	0002      	movs	r2, r0
 8000cb0:	3115      	adds	r1, #21
 8000cb2:	3220      	adds	r2, #32
 8000cb4:	291c      	cmp	r1, #28
 8000cb6:	dc00      	bgt.n	8000cba <__aeabi_dmul+0x45e>
 8000cb8:	e74b      	b.n	8000b52 <__aeabi_dmul+0x2f6>
 8000cba:	0034      	movs	r4, r6
 8000cbc:	3808      	subs	r0, #8
 8000cbe:	2500      	movs	r5, #0
 8000cc0:	4084      	lsls	r4, r0
 8000cc2:	e750      	b.n	8000b66 <__aeabi_dmul+0x30a>
 8000cc4:	f000 fc62 	bl	800158c <__clzsi2>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	001a      	movs	r2, r3
 8000ccc:	3215      	adds	r2, #21
 8000cce:	3020      	adds	r0, #32
 8000cd0:	2a1c      	cmp	r2, #28
 8000cd2:	dc00      	bgt.n	8000cd6 <__aeabi_dmul+0x47a>
 8000cd4:	e71e      	b.n	8000b14 <__aeabi_dmul+0x2b8>
 8000cd6:	4656      	mov	r6, sl
 8000cd8:	3b08      	subs	r3, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	409e      	lsls	r6, r3
 8000cde:	e723      	b.n	8000b28 <__aeabi_dmul+0x2cc>
 8000ce0:	9b00      	ldr	r3, [sp, #0]
 8000ce2:	469c      	mov	ip, r3
 8000ce4:	e6e6      	b.n	8000ab4 <__aeabi_dmul+0x258>
 8000ce6:	4912      	ldr	r1, [pc, #72]	; (8000d30 <__aeabi_dmul+0x4d4>)
 8000ce8:	0022      	movs	r2, r4
 8000cea:	4461      	add	r1, ip
 8000cec:	002e      	movs	r6, r5
 8000cee:	408d      	lsls	r5, r1
 8000cf0:	408a      	lsls	r2, r1
 8000cf2:	40c6      	lsrs	r6, r0
 8000cf4:	1e69      	subs	r1, r5, #1
 8000cf6:	418d      	sbcs	r5, r1
 8000cf8:	4332      	orrs	r2, r6
 8000cfa:	432a      	orrs	r2, r5
 8000cfc:	40c4      	lsrs	r4, r0
 8000cfe:	0753      	lsls	r3, r2, #29
 8000d00:	d0b6      	beq.n	8000c70 <__aeabi_dmul+0x414>
 8000d02:	210f      	movs	r1, #15
 8000d04:	4011      	ands	r1, r2
 8000d06:	2904      	cmp	r1, #4
 8000d08:	d1ac      	bne.n	8000c64 <__aeabi_dmul+0x408>
 8000d0a:	e7b1      	b.n	8000c70 <__aeabi_dmul+0x414>
 8000d0c:	0765      	lsls	r5, r4, #29
 8000d0e:	0264      	lsls	r4, r4, #9
 8000d10:	0b24      	lsrs	r4, r4, #12
 8000d12:	08d2      	lsrs	r2, r2, #3
 8000d14:	4315      	orrs	r5, r2
 8000d16:	2200      	movs	r2, #0
 8000d18:	e601      	b.n	800091e <__aeabi_dmul+0xc2>
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	0312      	lsls	r2, r2, #12
 8000d1e:	4314      	orrs	r4, r2
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	4a01      	ldr	r2, [pc, #4]	; (8000d28 <__aeabi_dmul+0x4cc>)
 8000d24:	0b24      	lsrs	r4, r4, #12
 8000d26:	e5fa      	b.n	800091e <__aeabi_dmul+0xc2>
 8000d28:	000007ff 	.word	0x000007ff
 8000d2c:	0000043e 	.word	0x0000043e
 8000d30:	0000041e 	.word	0x0000041e

08000d34 <__aeabi_dsub>:
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	4657      	mov	r7, sl
 8000d38:	464e      	mov	r6, r9
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	46de      	mov	lr, fp
 8000d3e:	b5e0      	push	{r5, r6, r7, lr}
 8000d40:	001e      	movs	r6, r3
 8000d42:	0017      	movs	r7, r2
 8000d44:	004a      	lsls	r2, r1, #1
 8000d46:	030b      	lsls	r3, r1, #12
 8000d48:	0d52      	lsrs	r2, r2, #21
 8000d4a:	0a5b      	lsrs	r3, r3, #9
 8000d4c:	4690      	mov	r8, r2
 8000d4e:	0f42      	lsrs	r2, r0, #29
 8000d50:	431a      	orrs	r2, r3
 8000d52:	0fcd      	lsrs	r5, r1, #31
 8000d54:	4ccd      	ldr	r4, [pc, #820]	; (800108c <__aeabi_dsub+0x358>)
 8000d56:	0331      	lsls	r1, r6, #12
 8000d58:	00c3      	lsls	r3, r0, #3
 8000d5a:	4694      	mov	ip, r2
 8000d5c:	0070      	lsls	r0, r6, #1
 8000d5e:	0f7a      	lsrs	r2, r7, #29
 8000d60:	0a49      	lsrs	r1, r1, #9
 8000d62:	00ff      	lsls	r7, r7, #3
 8000d64:	469a      	mov	sl, r3
 8000d66:	46b9      	mov	r9, r7
 8000d68:	0d40      	lsrs	r0, r0, #21
 8000d6a:	0ff6      	lsrs	r6, r6, #31
 8000d6c:	4311      	orrs	r1, r2
 8000d6e:	42a0      	cmp	r0, r4
 8000d70:	d100      	bne.n	8000d74 <__aeabi_dsub+0x40>
 8000d72:	e0b1      	b.n	8000ed8 <__aeabi_dsub+0x1a4>
 8000d74:	2201      	movs	r2, #1
 8000d76:	4056      	eors	r6, r2
 8000d78:	46b3      	mov	fp, r6
 8000d7a:	42b5      	cmp	r5, r6
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_dsub+0x4c>
 8000d7e:	e088      	b.n	8000e92 <__aeabi_dsub+0x15e>
 8000d80:	4642      	mov	r2, r8
 8000d82:	1a12      	subs	r2, r2, r0
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	dc00      	bgt.n	8000d8a <__aeabi_dsub+0x56>
 8000d88:	e0ae      	b.n	8000ee8 <__aeabi_dsub+0x1b4>
 8000d8a:	2800      	cmp	r0, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_dsub+0x5c>
 8000d8e:	e0c1      	b.n	8000f14 <__aeabi_dsub+0x1e0>
 8000d90:	48be      	ldr	r0, [pc, #760]	; (800108c <__aeabi_dsub+0x358>)
 8000d92:	4580      	cmp	r8, r0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_dsub+0x64>
 8000d96:	e151      	b.n	800103c <__aeabi_dsub+0x308>
 8000d98:	2080      	movs	r0, #128	; 0x80
 8000d9a:	0400      	lsls	r0, r0, #16
 8000d9c:	4301      	orrs	r1, r0
 8000d9e:	2a38      	cmp	r2, #56	; 0x38
 8000da0:	dd00      	ble.n	8000da4 <__aeabi_dsub+0x70>
 8000da2:	e17b      	b.n	800109c <__aeabi_dsub+0x368>
 8000da4:	2a1f      	cmp	r2, #31
 8000da6:	dd00      	ble.n	8000daa <__aeabi_dsub+0x76>
 8000da8:	e1ee      	b.n	8001188 <__aeabi_dsub+0x454>
 8000daa:	2020      	movs	r0, #32
 8000dac:	003e      	movs	r6, r7
 8000dae:	1a80      	subs	r0, r0, r2
 8000db0:	000c      	movs	r4, r1
 8000db2:	40d6      	lsrs	r6, r2
 8000db4:	40d1      	lsrs	r1, r2
 8000db6:	4087      	lsls	r7, r0
 8000db8:	4662      	mov	r2, ip
 8000dba:	4084      	lsls	r4, r0
 8000dbc:	1a52      	subs	r2, r2, r1
 8000dbe:	1e78      	subs	r0, r7, #1
 8000dc0:	4187      	sbcs	r7, r0
 8000dc2:	4694      	mov	ip, r2
 8000dc4:	4334      	orrs	r4, r6
 8000dc6:	4327      	orrs	r7, r4
 8000dc8:	1bdc      	subs	r4, r3, r7
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	419b      	sbcs	r3, r3
 8000dce:	4662      	mov	r2, ip
 8000dd0:	425b      	negs	r3, r3
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	4699      	mov	r9, r3
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	d400      	bmi.n	8000dde <__aeabi_dsub+0xaa>
 8000ddc:	e118      	b.n	8001010 <__aeabi_dsub+0x2dc>
 8000dde:	464b      	mov	r3, r9
 8000de0:	0258      	lsls	r0, r3, #9
 8000de2:	0a43      	lsrs	r3, r0, #9
 8000de4:	4699      	mov	r9, r3
 8000de6:	464b      	mov	r3, r9
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d100      	bne.n	8000dee <__aeabi_dsub+0xba>
 8000dec:	e137      	b.n	800105e <__aeabi_dsub+0x32a>
 8000dee:	4648      	mov	r0, r9
 8000df0:	f000 fbcc 	bl	800158c <__clzsi2>
 8000df4:	0001      	movs	r1, r0
 8000df6:	3908      	subs	r1, #8
 8000df8:	2320      	movs	r3, #32
 8000dfa:	0022      	movs	r2, r4
 8000dfc:	4648      	mov	r0, r9
 8000dfe:	1a5b      	subs	r3, r3, r1
 8000e00:	40da      	lsrs	r2, r3
 8000e02:	4088      	lsls	r0, r1
 8000e04:	408c      	lsls	r4, r1
 8000e06:	4643      	mov	r3, r8
 8000e08:	4310      	orrs	r0, r2
 8000e0a:	4588      	cmp	r8, r1
 8000e0c:	dd00      	ble.n	8000e10 <__aeabi_dsub+0xdc>
 8000e0e:	e136      	b.n	800107e <__aeabi_dsub+0x34a>
 8000e10:	1ac9      	subs	r1, r1, r3
 8000e12:	1c4b      	adds	r3, r1, #1
 8000e14:	2b1f      	cmp	r3, #31
 8000e16:	dd00      	ble.n	8000e1a <__aeabi_dsub+0xe6>
 8000e18:	e0ea      	b.n	8000ff0 <__aeabi_dsub+0x2bc>
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	0026      	movs	r6, r4
 8000e1e:	1ad2      	subs	r2, r2, r3
 8000e20:	0001      	movs	r1, r0
 8000e22:	4094      	lsls	r4, r2
 8000e24:	40de      	lsrs	r6, r3
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	2300      	movs	r3, #0
 8000e2a:	4091      	lsls	r1, r2
 8000e2c:	1e62      	subs	r2, r4, #1
 8000e2e:	4194      	sbcs	r4, r2
 8000e30:	4681      	mov	r9, r0
 8000e32:	4698      	mov	r8, r3
 8000e34:	4331      	orrs	r1, r6
 8000e36:	430c      	orrs	r4, r1
 8000e38:	0763      	lsls	r3, r4, #29
 8000e3a:	d009      	beq.n	8000e50 <__aeabi_dsub+0x11c>
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	4023      	ands	r3, r4
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d005      	beq.n	8000e50 <__aeabi_dsub+0x11c>
 8000e44:	1d23      	adds	r3, r4, #4
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	41a4      	sbcs	r4, r4
 8000e4a:	4264      	negs	r4, r4
 8000e4c:	44a1      	add	r9, r4
 8000e4e:	001c      	movs	r4, r3
 8000e50:	464b      	mov	r3, r9
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	d400      	bmi.n	8000e58 <__aeabi_dsub+0x124>
 8000e56:	e0de      	b.n	8001016 <__aeabi_dsub+0x2e2>
 8000e58:	4641      	mov	r1, r8
 8000e5a:	4b8c      	ldr	r3, [pc, #560]	; (800108c <__aeabi_dsub+0x358>)
 8000e5c:	3101      	adds	r1, #1
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d100      	bne.n	8000e64 <__aeabi_dsub+0x130>
 8000e62:	e0e7      	b.n	8001034 <__aeabi_dsub+0x300>
 8000e64:	464b      	mov	r3, r9
 8000e66:	488a      	ldr	r0, [pc, #552]	; (8001090 <__aeabi_dsub+0x35c>)
 8000e68:	08e4      	lsrs	r4, r4, #3
 8000e6a:	4003      	ands	r3, r0
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	0549      	lsls	r1, r1, #21
 8000e70:	075b      	lsls	r3, r3, #29
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	4323      	orrs	r3, r4
 8000e76:	0d4a      	lsrs	r2, r1, #21
 8000e78:	0b04      	lsrs	r4, r0, #12
 8000e7a:	0512      	lsls	r2, r2, #20
 8000e7c:	07ed      	lsls	r5, r5, #31
 8000e7e:	4322      	orrs	r2, r4
 8000e80:	432a      	orrs	r2, r5
 8000e82:	0018      	movs	r0, r3
 8000e84:	0011      	movs	r1, r2
 8000e86:	bcf0      	pop	{r4, r5, r6, r7}
 8000e88:	46bb      	mov	fp, r7
 8000e8a:	46b2      	mov	sl, r6
 8000e8c:	46a9      	mov	r9, r5
 8000e8e:	46a0      	mov	r8, r4
 8000e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e92:	4642      	mov	r2, r8
 8000e94:	1a12      	subs	r2, r2, r0
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	dd52      	ble.n	8000f40 <__aeabi_dsub+0x20c>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dsub+0x16c>
 8000e9e:	e09c      	b.n	8000fda <__aeabi_dsub+0x2a6>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_dsub+0x172>
 8000ea4:	e0ca      	b.n	800103c <__aeabi_dsub+0x308>
 8000ea6:	2080      	movs	r0, #128	; 0x80
 8000ea8:	0400      	lsls	r0, r0, #16
 8000eaa:	4301      	orrs	r1, r0
 8000eac:	2a38      	cmp	r2, #56	; 0x38
 8000eae:	dd00      	ble.n	8000eb2 <__aeabi_dsub+0x17e>
 8000eb0:	e149      	b.n	8001146 <__aeabi_dsub+0x412>
 8000eb2:	2a1f      	cmp	r2, #31
 8000eb4:	dc00      	bgt.n	8000eb8 <__aeabi_dsub+0x184>
 8000eb6:	e197      	b.n	80011e8 <__aeabi_dsub+0x4b4>
 8000eb8:	0010      	movs	r0, r2
 8000eba:	000e      	movs	r6, r1
 8000ebc:	3820      	subs	r0, #32
 8000ebe:	40c6      	lsrs	r6, r0
 8000ec0:	2a20      	cmp	r2, #32
 8000ec2:	d004      	beq.n	8000ece <__aeabi_dsub+0x19a>
 8000ec4:	2040      	movs	r0, #64	; 0x40
 8000ec6:	1a82      	subs	r2, r0, r2
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	430f      	orrs	r7, r1
 8000ecc:	46b9      	mov	r9, r7
 8000ece:	464c      	mov	r4, r9
 8000ed0:	1e62      	subs	r2, r4, #1
 8000ed2:	4194      	sbcs	r4, r2
 8000ed4:	4334      	orrs	r4, r6
 8000ed6:	e13a      	b.n	800114e <__aeabi_dsub+0x41a>
 8000ed8:	000a      	movs	r2, r1
 8000eda:	433a      	orrs	r2, r7
 8000edc:	d028      	beq.n	8000f30 <__aeabi_dsub+0x1fc>
 8000ede:	46b3      	mov	fp, r6
 8000ee0:	42b5      	cmp	r5, r6
 8000ee2:	d02b      	beq.n	8000f3c <__aeabi_dsub+0x208>
 8000ee4:	4a6b      	ldr	r2, [pc, #428]	; (8001094 <__aeabi_dsub+0x360>)
 8000ee6:	4442      	add	r2, r8
 8000ee8:	2a00      	cmp	r2, #0
 8000eea:	d05d      	beq.n	8000fa8 <__aeabi_dsub+0x274>
 8000eec:	4642      	mov	r2, r8
 8000eee:	4644      	mov	r4, r8
 8000ef0:	1a82      	subs	r2, r0, r2
 8000ef2:	2c00      	cmp	r4, #0
 8000ef4:	d000      	beq.n	8000ef8 <__aeabi_dsub+0x1c4>
 8000ef6:	e0f5      	b.n	80010e4 <__aeabi_dsub+0x3b0>
 8000ef8:	4665      	mov	r5, ip
 8000efa:	431d      	orrs	r5, r3
 8000efc:	d100      	bne.n	8000f00 <__aeabi_dsub+0x1cc>
 8000efe:	e19c      	b.n	800123a <__aeabi_dsub+0x506>
 8000f00:	1e55      	subs	r5, r2, #1
 8000f02:	2a01      	cmp	r2, #1
 8000f04:	d100      	bne.n	8000f08 <__aeabi_dsub+0x1d4>
 8000f06:	e1fb      	b.n	8001300 <__aeabi_dsub+0x5cc>
 8000f08:	4c60      	ldr	r4, [pc, #384]	; (800108c <__aeabi_dsub+0x358>)
 8000f0a:	42a2      	cmp	r2, r4
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_dsub+0x1dc>
 8000f0e:	e1bd      	b.n	800128c <__aeabi_dsub+0x558>
 8000f10:	002a      	movs	r2, r5
 8000f12:	e0f0      	b.n	80010f6 <__aeabi_dsub+0x3c2>
 8000f14:	0008      	movs	r0, r1
 8000f16:	4338      	orrs	r0, r7
 8000f18:	d100      	bne.n	8000f1c <__aeabi_dsub+0x1e8>
 8000f1a:	e0c3      	b.n	80010a4 <__aeabi_dsub+0x370>
 8000f1c:	1e50      	subs	r0, r2, #1
 8000f1e:	2a01      	cmp	r2, #1
 8000f20:	d100      	bne.n	8000f24 <__aeabi_dsub+0x1f0>
 8000f22:	e1a8      	b.n	8001276 <__aeabi_dsub+0x542>
 8000f24:	4c59      	ldr	r4, [pc, #356]	; (800108c <__aeabi_dsub+0x358>)
 8000f26:	42a2      	cmp	r2, r4
 8000f28:	d100      	bne.n	8000f2c <__aeabi_dsub+0x1f8>
 8000f2a:	e087      	b.n	800103c <__aeabi_dsub+0x308>
 8000f2c:	0002      	movs	r2, r0
 8000f2e:	e736      	b.n	8000d9e <__aeabi_dsub+0x6a>
 8000f30:	2201      	movs	r2, #1
 8000f32:	4056      	eors	r6, r2
 8000f34:	46b3      	mov	fp, r6
 8000f36:	42b5      	cmp	r5, r6
 8000f38:	d000      	beq.n	8000f3c <__aeabi_dsub+0x208>
 8000f3a:	e721      	b.n	8000d80 <__aeabi_dsub+0x4c>
 8000f3c:	4a55      	ldr	r2, [pc, #340]	; (8001094 <__aeabi_dsub+0x360>)
 8000f3e:	4442      	add	r2, r8
 8000f40:	2a00      	cmp	r2, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dsub+0x212>
 8000f44:	e0b5      	b.n	80010b2 <__aeabi_dsub+0x37e>
 8000f46:	4642      	mov	r2, r8
 8000f48:	4644      	mov	r4, r8
 8000f4a:	1a82      	subs	r2, r0, r2
 8000f4c:	2c00      	cmp	r4, #0
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_dsub+0x21e>
 8000f50:	e138      	b.n	80011c4 <__aeabi_dsub+0x490>
 8000f52:	4e4e      	ldr	r6, [pc, #312]	; (800108c <__aeabi_dsub+0x358>)
 8000f54:	42b0      	cmp	r0, r6
 8000f56:	d100      	bne.n	8000f5a <__aeabi_dsub+0x226>
 8000f58:	e1de      	b.n	8001318 <__aeabi_dsub+0x5e4>
 8000f5a:	2680      	movs	r6, #128	; 0x80
 8000f5c:	4664      	mov	r4, ip
 8000f5e:	0436      	lsls	r6, r6, #16
 8000f60:	4334      	orrs	r4, r6
 8000f62:	46a4      	mov	ip, r4
 8000f64:	2a38      	cmp	r2, #56	; 0x38
 8000f66:	dd00      	ble.n	8000f6a <__aeabi_dsub+0x236>
 8000f68:	e196      	b.n	8001298 <__aeabi_dsub+0x564>
 8000f6a:	2a1f      	cmp	r2, #31
 8000f6c:	dd00      	ble.n	8000f70 <__aeabi_dsub+0x23c>
 8000f6e:	e224      	b.n	80013ba <__aeabi_dsub+0x686>
 8000f70:	2620      	movs	r6, #32
 8000f72:	1ab4      	subs	r4, r6, r2
 8000f74:	46a2      	mov	sl, r4
 8000f76:	4664      	mov	r4, ip
 8000f78:	4656      	mov	r6, sl
 8000f7a:	40b4      	lsls	r4, r6
 8000f7c:	46a1      	mov	r9, r4
 8000f7e:	001c      	movs	r4, r3
 8000f80:	464e      	mov	r6, r9
 8000f82:	40d4      	lsrs	r4, r2
 8000f84:	4326      	orrs	r6, r4
 8000f86:	0034      	movs	r4, r6
 8000f88:	4656      	mov	r6, sl
 8000f8a:	40b3      	lsls	r3, r6
 8000f8c:	1e5e      	subs	r6, r3, #1
 8000f8e:	41b3      	sbcs	r3, r6
 8000f90:	431c      	orrs	r4, r3
 8000f92:	4663      	mov	r3, ip
 8000f94:	40d3      	lsrs	r3, r2
 8000f96:	18c9      	adds	r1, r1, r3
 8000f98:	19e4      	adds	r4, r4, r7
 8000f9a:	42bc      	cmp	r4, r7
 8000f9c:	41bf      	sbcs	r7, r7
 8000f9e:	427f      	negs	r7, r7
 8000fa0:	46b9      	mov	r9, r7
 8000fa2:	4680      	mov	r8, r0
 8000fa4:	4489      	add	r9, r1
 8000fa6:	e0d8      	b.n	800115a <__aeabi_dsub+0x426>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	4c3b      	ldr	r4, [pc, #236]	; (8001098 <__aeabi_dsub+0x364>)
 8000fac:	3001      	adds	r0, #1
 8000fae:	4220      	tst	r0, r4
 8000fb0:	d000      	beq.n	8000fb4 <__aeabi_dsub+0x280>
 8000fb2:	e0b4      	b.n	800111e <__aeabi_dsub+0x3ea>
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	d000      	beq.n	8000fbc <__aeabi_dsub+0x288>
 8000fba:	e144      	b.n	8001246 <__aeabi_dsub+0x512>
 8000fbc:	4660      	mov	r0, ip
 8000fbe:	4318      	orrs	r0, r3
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_dsub+0x290>
 8000fc2:	e190      	b.n	80012e6 <__aeabi_dsub+0x5b2>
 8000fc4:	0008      	movs	r0, r1
 8000fc6:	4338      	orrs	r0, r7
 8000fc8:	d000      	beq.n	8000fcc <__aeabi_dsub+0x298>
 8000fca:	e1aa      	b.n	8001322 <__aeabi_dsub+0x5ee>
 8000fcc:	4661      	mov	r1, ip
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	0749      	lsls	r1, r1, #29
 8000fd2:	430b      	orrs	r3, r1
 8000fd4:	4661      	mov	r1, ip
 8000fd6:	08cc      	lsrs	r4, r1, #3
 8000fd8:	e027      	b.n	800102a <__aeabi_dsub+0x2f6>
 8000fda:	0008      	movs	r0, r1
 8000fdc:	4338      	orrs	r0, r7
 8000fde:	d061      	beq.n	80010a4 <__aeabi_dsub+0x370>
 8000fe0:	1e50      	subs	r0, r2, #1
 8000fe2:	2a01      	cmp	r2, #1
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dsub+0x2b4>
 8000fe6:	e139      	b.n	800125c <__aeabi_dsub+0x528>
 8000fe8:	42a2      	cmp	r2, r4
 8000fea:	d027      	beq.n	800103c <__aeabi_dsub+0x308>
 8000fec:	0002      	movs	r2, r0
 8000fee:	e75d      	b.n	8000eac <__aeabi_dsub+0x178>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	391f      	subs	r1, #31
 8000ff4:	40ca      	lsrs	r2, r1
 8000ff6:	0011      	movs	r1, r2
 8000ff8:	2b20      	cmp	r3, #32
 8000ffa:	d003      	beq.n	8001004 <__aeabi_dsub+0x2d0>
 8000ffc:	2240      	movs	r2, #64	; 0x40
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	4098      	lsls	r0, r3
 8001002:	4304      	orrs	r4, r0
 8001004:	1e63      	subs	r3, r4, #1
 8001006:	419c      	sbcs	r4, r3
 8001008:	2300      	movs	r3, #0
 800100a:	4699      	mov	r9, r3
 800100c:	4698      	mov	r8, r3
 800100e:	430c      	orrs	r4, r1
 8001010:	0763      	lsls	r3, r4, #29
 8001012:	d000      	beq.n	8001016 <__aeabi_dsub+0x2e2>
 8001014:	e712      	b.n	8000e3c <__aeabi_dsub+0x108>
 8001016:	464b      	mov	r3, r9
 8001018:	464a      	mov	r2, r9
 800101a:	08e4      	lsrs	r4, r4, #3
 800101c:	075b      	lsls	r3, r3, #29
 800101e:	4323      	orrs	r3, r4
 8001020:	08d4      	lsrs	r4, r2, #3
 8001022:	4642      	mov	r2, r8
 8001024:	4919      	ldr	r1, [pc, #100]	; (800108c <__aeabi_dsub+0x358>)
 8001026:	428a      	cmp	r2, r1
 8001028:	d00e      	beq.n	8001048 <__aeabi_dsub+0x314>
 800102a:	0324      	lsls	r4, r4, #12
 800102c:	0552      	lsls	r2, r2, #21
 800102e:	0b24      	lsrs	r4, r4, #12
 8001030:	0d52      	lsrs	r2, r2, #21
 8001032:	e722      	b.n	8000e7a <__aeabi_dsub+0x146>
 8001034:	000a      	movs	r2, r1
 8001036:	2400      	movs	r4, #0
 8001038:	2300      	movs	r3, #0
 800103a:	e71e      	b.n	8000e7a <__aeabi_dsub+0x146>
 800103c:	08db      	lsrs	r3, r3, #3
 800103e:	4662      	mov	r2, ip
 8001040:	0752      	lsls	r2, r2, #29
 8001042:	4313      	orrs	r3, r2
 8001044:	4662      	mov	r2, ip
 8001046:	08d4      	lsrs	r4, r2, #3
 8001048:	001a      	movs	r2, r3
 800104a:	4322      	orrs	r2, r4
 800104c:	d100      	bne.n	8001050 <__aeabi_dsub+0x31c>
 800104e:	e1fc      	b.n	800144a <__aeabi_dsub+0x716>
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	0312      	lsls	r2, r2, #12
 8001054:	4314      	orrs	r4, r2
 8001056:	0324      	lsls	r4, r4, #12
 8001058:	4a0c      	ldr	r2, [pc, #48]	; (800108c <__aeabi_dsub+0x358>)
 800105a:	0b24      	lsrs	r4, r4, #12
 800105c:	e70d      	b.n	8000e7a <__aeabi_dsub+0x146>
 800105e:	0020      	movs	r0, r4
 8001060:	f000 fa94 	bl	800158c <__clzsi2>
 8001064:	0001      	movs	r1, r0
 8001066:	3118      	adds	r1, #24
 8001068:	291f      	cmp	r1, #31
 800106a:	dc00      	bgt.n	800106e <__aeabi_dsub+0x33a>
 800106c:	e6c4      	b.n	8000df8 <__aeabi_dsub+0xc4>
 800106e:	3808      	subs	r0, #8
 8001070:	4084      	lsls	r4, r0
 8001072:	4643      	mov	r3, r8
 8001074:	0020      	movs	r0, r4
 8001076:	2400      	movs	r4, #0
 8001078:	4588      	cmp	r8, r1
 800107a:	dc00      	bgt.n	800107e <__aeabi_dsub+0x34a>
 800107c:	e6c8      	b.n	8000e10 <__aeabi_dsub+0xdc>
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <__aeabi_dsub+0x35c>)
 8001080:	1a5b      	subs	r3, r3, r1
 8001082:	4010      	ands	r0, r2
 8001084:	4698      	mov	r8, r3
 8001086:	4681      	mov	r9, r0
 8001088:	e6d6      	b.n	8000e38 <__aeabi_dsub+0x104>
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	000007ff 	.word	0x000007ff
 8001090:	ff7fffff 	.word	0xff7fffff
 8001094:	fffff801 	.word	0xfffff801
 8001098:	000007fe 	.word	0x000007fe
 800109c:	430f      	orrs	r7, r1
 800109e:	1e7a      	subs	r2, r7, #1
 80010a0:	4197      	sbcs	r7, r2
 80010a2:	e691      	b.n	8000dc8 <__aeabi_dsub+0x94>
 80010a4:	4661      	mov	r1, ip
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	0749      	lsls	r1, r1, #29
 80010aa:	430b      	orrs	r3, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	08cc      	lsrs	r4, r1, #3
 80010b0:	e7b8      	b.n	8001024 <__aeabi_dsub+0x2f0>
 80010b2:	4640      	mov	r0, r8
 80010b4:	4cd3      	ldr	r4, [pc, #844]	; (8001404 <__aeabi_dsub+0x6d0>)
 80010b6:	3001      	adds	r0, #1
 80010b8:	4220      	tst	r0, r4
 80010ba:	d000      	beq.n	80010be <__aeabi_dsub+0x38a>
 80010bc:	e0a2      	b.n	8001204 <__aeabi_dsub+0x4d0>
 80010be:	4640      	mov	r0, r8
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d000      	beq.n	80010c6 <__aeabi_dsub+0x392>
 80010c4:	e101      	b.n	80012ca <__aeabi_dsub+0x596>
 80010c6:	4660      	mov	r0, ip
 80010c8:	4318      	orrs	r0, r3
 80010ca:	d100      	bne.n	80010ce <__aeabi_dsub+0x39a>
 80010cc:	e15e      	b.n	800138c <__aeabi_dsub+0x658>
 80010ce:	0008      	movs	r0, r1
 80010d0:	4338      	orrs	r0, r7
 80010d2:	d000      	beq.n	80010d6 <__aeabi_dsub+0x3a2>
 80010d4:	e15f      	b.n	8001396 <__aeabi_dsub+0x662>
 80010d6:	4661      	mov	r1, ip
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	0749      	lsls	r1, r1, #29
 80010dc:	430b      	orrs	r3, r1
 80010de:	4661      	mov	r1, ip
 80010e0:	08cc      	lsrs	r4, r1, #3
 80010e2:	e7a2      	b.n	800102a <__aeabi_dsub+0x2f6>
 80010e4:	4dc8      	ldr	r5, [pc, #800]	; (8001408 <__aeabi_dsub+0x6d4>)
 80010e6:	42a8      	cmp	r0, r5
 80010e8:	d100      	bne.n	80010ec <__aeabi_dsub+0x3b8>
 80010ea:	e0cf      	b.n	800128c <__aeabi_dsub+0x558>
 80010ec:	2580      	movs	r5, #128	; 0x80
 80010ee:	4664      	mov	r4, ip
 80010f0:	042d      	lsls	r5, r5, #16
 80010f2:	432c      	orrs	r4, r5
 80010f4:	46a4      	mov	ip, r4
 80010f6:	2a38      	cmp	r2, #56	; 0x38
 80010f8:	dc56      	bgt.n	80011a8 <__aeabi_dsub+0x474>
 80010fa:	2a1f      	cmp	r2, #31
 80010fc:	dd00      	ble.n	8001100 <__aeabi_dsub+0x3cc>
 80010fe:	e0d1      	b.n	80012a4 <__aeabi_dsub+0x570>
 8001100:	2520      	movs	r5, #32
 8001102:	001e      	movs	r6, r3
 8001104:	1aad      	subs	r5, r5, r2
 8001106:	4664      	mov	r4, ip
 8001108:	40ab      	lsls	r3, r5
 800110a:	40ac      	lsls	r4, r5
 800110c:	40d6      	lsrs	r6, r2
 800110e:	1e5d      	subs	r5, r3, #1
 8001110:	41ab      	sbcs	r3, r5
 8001112:	4334      	orrs	r4, r6
 8001114:	4323      	orrs	r3, r4
 8001116:	4664      	mov	r4, ip
 8001118:	40d4      	lsrs	r4, r2
 800111a:	1b09      	subs	r1, r1, r4
 800111c:	e049      	b.n	80011b2 <__aeabi_dsub+0x47e>
 800111e:	4660      	mov	r0, ip
 8001120:	1bdc      	subs	r4, r3, r7
 8001122:	1a46      	subs	r6, r0, r1
 8001124:	42a3      	cmp	r3, r4
 8001126:	4180      	sbcs	r0, r0
 8001128:	4240      	negs	r0, r0
 800112a:	4681      	mov	r9, r0
 800112c:	0030      	movs	r0, r6
 800112e:	464e      	mov	r6, r9
 8001130:	1b80      	subs	r0, r0, r6
 8001132:	4681      	mov	r9, r0
 8001134:	0200      	lsls	r0, r0, #8
 8001136:	d476      	bmi.n	8001226 <__aeabi_dsub+0x4f2>
 8001138:	464b      	mov	r3, r9
 800113a:	4323      	orrs	r3, r4
 800113c:	d000      	beq.n	8001140 <__aeabi_dsub+0x40c>
 800113e:	e652      	b.n	8000de6 <__aeabi_dsub+0xb2>
 8001140:	2400      	movs	r4, #0
 8001142:	2500      	movs	r5, #0
 8001144:	e771      	b.n	800102a <__aeabi_dsub+0x2f6>
 8001146:	4339      	orrs	r1, r7
 8001148:	000c      	movs	r4, r1
 800114a:	1e62      	subs	r2, r4, #1
 800114c:	4194      	sbcs	r4, r2
 800114e:	18e4      	adds	r4, r4, r3
 8001150:	429c      	cmp	r4, r3
 8001152:	419b      	sbcs	r3, r3
 8001154:	425b      	negs	r3, r3
 8001156:	4463      	add	r3, ip
 8001158:	4699      	mov	r9, r3
 800115a:	464b      	mov	r3, r9
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	d400      	bmi.n	8001162 <__aeabi_dsub+0x42e>
 8001160:	e756      	b.n	8001010 <__aeabi_dsub+0x2dc>
 8001162:	2301      	movs	r3, #1
 8001164:	469c      	mov	ip, r3
 8001166:	4ba8      	ldr	r3, [pc, #672]	; (8001408 <__aeabi_dsub+0x6d4>)
 8001168:	44e0      	add	r8, ip
 800116a:	4598      	cmp	r8, r3
 800116c:	d038      	beq.n	80011e0 <__aeabi_dsub+0x4ac>
 800116e:	464b      	mov	r3, r9
 8001170:	48a6      	ldr	r0, [pc, #664]	; (800140c <__aeabi_dsub+0x6d8>)
 8001172:	2201      	movs	r2, #1
 8001174:	4003      	ands	r3, r0
 8001176:	0018      	movs	r0, r3
 8001178:	0863      	lsrs	r3, r4, #1
 800117a:	4014      	ands	r4, r2
 800117c:	431c      	orrs	r4, r3
 800117e:	07c3      	lsls	r3, r0, #31
 8001180:	431c      	orrs	r4, r3
 8001182:	0843      	lsrs	r3, r0, #1
 8001184:	4699      	mov	r9, r3
 8001186:	e657      	b.n	8000e38 <__aeabi_dsub+0x104>
 8001188:	0010      	movs	r0, r2
 800118a:	000e      	movs	r6, r1
 800118c:	3820      	subs	r0, #32
 800118e:	40c6      	lsrs	r6, r0
 8001190:	2a20      	cmp	r2, #32
 8001192:	d004      	beq.n	800119e <__aeabi_dsub+0x46a>
 8001194:	2040      	movs	r0, #64	; 0x40
 8001196:	1a82      	subs	r2, r0, r2
 8001198:	4091      	lsls	r1, r2
 800119a:	430f      	orrs	r7, r1
 800119c:	46b9      	mov	r9, r7
 800119e:	464f      	mov	r7, r9
 80011a0:	1e7a      	subs	r2, r7, #1
 80011a2:	4197      	sbcs	r7, r2
 80011a4:	4337      	orrs	r7, r6
 80011a6:	e60f      	b.n	8000dc8 <__aeabi_dsub+0x94>
 80011a8:	4662      	mov	r2, ip
 80011aa:	431a      	orrs	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	1e5a      	subs	r2, r3, #1
 80011b0:	4193      	sbcs	r3, r2
 80011b2:	1afc      	subs	r4, r7, r3
 80011b4:	42a7      	cmp	r7, r4
 80011b6:	41bf      	sbcs	r7, r7
 80011b8:	427f      	negs	r7, r7
 80011ba:	1bcb      	subs	r3, r1, r7
 80011bc:	4699      	mov	r9, r3
 80011be:	465d      	mov	r5, fp
 80011c0:	4680      	mov	r8, r0
 80011c2:	e608      	b.n	8000dd6 <__aeabi_dsub+0xa2>
 80011c4:	4666      	mov	r6, ip
 80011c6:	431e      	orrs	r6, r3
 80011c8:	d100      	bne.n	80011cc <__aeabi_dsub+0x498>
 80011ca:	e0be      	b.n	800134a <__aeabi_dsub+0x616>
 80011cc:	1e56      	subs	r6, r2, #1
 80011ce:	2a01      	cmp	r2, #1
 80011d0:	d100      	bne.n	80011d4 <__aeabi_dsub+0x4a0>
 80011d2:	e109      	b.n	80013e8 <__aeabi_dsub+0x6b4>
 80011d4:	4c8c      	ldr	r4, [pc, #560]	; (8001408 <__aeabi_dsub+0x6d4>)
 80011d6:	42a2      	cmp	r2, r4
 80011d8:	d100      	bne.n	80011dc <__aeabi_dsub+0x4a8>
 80011da:	e119      	b.n	8001410 <__aeabi_dsub+0x6dc>
 80011dc:	0032      	movs	r2, r6
 80011de:	e6c1      	b.n	8000f64 <__aeabi_dsub+0x230>
 80011e0:	4642      	mov	r2, r8
 80011e2:	2400      	movs	r4, #0
 80011e4:	2300      	movs	r3, #0
 80011e6:	e648      	b.n	8000e7a <__aeabi_dsub+0x146>
 80011e8:	2020      	movs	r0, #32
 80011ea:	000c      	movs	r4, r1
 80011ec:	1a80      	subs	r0, r0, r2
 80011ee:	003e      	movs	r6, r7
 80011f0:	4087      	lsls	r7, r0
 80011f2:	4084      	lsls	r4, r0
 80011f4:	40d6      	lsrs	r6, r2
 80011f6:	1e78      	subs	r0, r7, #1
 80011f8:	4187      	sbcs	r7, r0
 80011fa:	40d1      	lsrs	r1, r2
 80011fc:	4334      	orrs	r4, r6
 80011fe:	433c      	orrs	r4, r7
 8001200:	448c      	add	ip, r1
 8001202:	e7a4      	b.n	800114e <__aeabi_dsub+0x41a>
 8001204:	4a80      	ldr	r2, [pc, #512]	; (8001408 <__aeabi_dsub+0x6d4>)
 8001206:	4290      	cmp	r0, r2
 8001208:	d100      	bne.n	800120c <__aeabi_dsub+0x4d8>
 800120a:	e0e9      	b.n	80013e0 <__aeabi_dsub+0x6ac>
 800120c:	19df      	adds	r7, r3, r7
 800120e:	429f      	cmp	r7, r3
 8001210:	419b      	sbcs	r3, r3
 8001212:	4461      	add	r1, ip
 8001214:	425b      	negs	r3, r3
 8001216:	18c9      	adds	r1, r1, r3
 8001218:	07cc      	lsls	r4, r1, #31
 800121a:	087f      	lsrs	r7, r7, #1
 800121c:	084b      	lsrs	r3, r1, #1
 800121e:	4699      	mov	r9, r3
 8001220:	4680      	mov	r8, r0
 8001222:	433c      	orrs	r4, r7
 8001224:	e6f4      	b.n	8001010 <__aeabi_dsub+0x2dc>
 8001226:	1afc      	subs	r4, r7, r3
 8001228:	42a7      	cmp	r7, r4
 800122a:	41bf      	sbcs	r7, r7
 800122c:	4663      	mov	r3, ip
 800122e:	427f      	negs	r7, r7
 8001230:	1ac9      	subs	r1, r1, r3
 8001232:	1bcb      	subs	r3, r1, r7
 8001234:	4699      	mov	r9, r3
 8001236:	465d      	mov	r5, fp
 8001238:	e5d5      	b.n	8000de6 <__aeabi_dsub+0xb2>
 800123a:	08ff      	lsrs	r7, r7, #3
 800123c:	074b      	lsls	r3, r1, #29
 800123e:	465d      	mov	r5, fp
 8001240:	433b      	orrs	r3, r7
 8001242:	08cc      	lsrs	r4, r1, #3
 8001244:	e6ee      	b.n	8001024 <__aeabi_dsub+0x2f0>
 8001246:	4662      	mov	r2, ip
 8001248:	431a      	orrs	r2, r3
 800124a:	d000      	beq.n	800124e <__aeabi_dsub+0x51a>
 800124c:	e082      	b.n	8001354 <__aeabi_dsub+0x620>
 800124e:	000b      	movs	r3, r1
 8001250:	433b      	orrs	r3, r7
 8001252:	d11b      	bne.n	800128c <__aeabi_dsub+0x558>
 8001254:	2480      	movs	r4, #128	; 0x80
 8001256:	2500      	movs	r5, #0
 8001258:	0324      	lsls	r4, r4, #12
 800125a:	e6f9      	b.n	8001050 <__aeabi_dsub+0x31c>
 800125c:	19dc      	adds	r4, r3, r7
 800125e:	429c      	cmp	r4, r3
 8001260:	419b      	sbcs	r3, r3
 8001262:	4461      	add	r1, ip
 8001264:	4689      	mov	r9, r1
 8001266:	425b      	negs	r3, r3
 8001268:	4499      	add	r9, r3
 800126a:	464b      	mov	r3, r9
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	d444      	bmi.n	80012fa <__aeabi_dsub+0x5c6>
 8001270:	2301      	movs	r3, #1
 8001272:	4698      	mov	r8, r3
 8001274:	e6cc      	b.n	8001010 <__aeabi_dsub+0x2dc>
 8001276:	1bdc      	subs	r4, r3, r7
 8001278:	4662      	mov	r2, ip
 800127a:	42a3      	cmp	r3, r4
 800127c:	419b      	sbcs	r3, r3
 800127e:	1a51      	subs	r1, r2, r1
 8001280:	425b      	negs	r3, r3
 8001282:	1acb      	subs	r3, r1, r3
 8001284:	4699      	mov	r9, r3
 8001286:	2301      	movs	r3, #1
 8001288:	4698      	mov	r8, r3
 800128a:	e5a4      	b.n	8000dd6 <__aeabi_dsub+0xa2>
 800128c:	08ff      	lsrs	r7, r7, #3
 800128e:	074b      	lsls	r3, r1, #29
 8001290:	465d      	mov	r5, fp
 8001292:	433b      	orrs	r3, r7
 8001294:	08cc      	lsrs	r4, r1, #3
 8001296:	e6d7      	b.n	8001048 <__aeabi_dsub+0x314>
 8001298:	4662      	mov	r2, ip
 800129a:	431a      	orrs	r2, r3
 800129c:	0014      	movs	r4, r2
 800129e:	1e63      	subs	r3, r4, #1
 80012a0:	419c      	sbcs	r4, r3
 80012a2:	e679      	b.n	8000f98 <__aeabi_dsub+0x264>
 80012a4:	0015      	movs	r5, r2
 80012a6:	4664      	mov	r4, ip
 80012a8:	3d20      	subs	r5, #32
 80012aa:	40ec      	lsrs	r4, r5
 80012ac:	46a0      	mov	r8, r4
 80012ae:	2a20      	cmp	r2, #32
 80012b0:	d005      	beq.n	80012be <__aeabi_dsub+0x58a>
 80012b2:	2540      	movs	r5, #64	; 0x40
 80012b4:	4664      	mov	r4, ip
 80012b6:	1aaa      	subs	r2, r5, r2
 80012b8:	4094      	lsls	r4, r2
 80012ba:	4323      	orrs	r3, r4
 80012bc:	469a      	mov	sl, r3
 80012be:	4654      	mov	r4, sl
 80012c0:	1e63      	subs	r3, r4, #1
 80012c2:	419c      	sbcs	r4, r3
 80012c4:	4643      	mov	r3, r8
 80012c6:	4323      	orrs	r3, r4
 80012c8:	e773      	b.n	80011b2 <__aeabi_dsub+0x47e>
 80012ca:	4662      	mov	r2, ip
 80012cc:	431a      	orrs	r2, r3
 80012ce:	d023      	beq.n	8001318 <__aeabi_dsub+0x5e4>
 80012d0:	000a      	movs	r2, r1
 80012d2:	433a      	orrs	r2, r7
 80012d4:	d000      	beq.n	80012d8 <__aeabi_dsub+0x5a4>
 80012d6:	e0a0      	b.n	800141a <__aeabi_dsub+0x6e6>
 80012d8:	4662      	mov	r2, ip
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	0752      	lsls	r2, r2, #29
 80012de:	4313      	orrs	r3, r2
 80012e0:	4662      	mov	r2, ip
 80012e2:	08d4      	lsrs	r4, r2, #3
 80012e4:	e6b0      	b.n	8001048 <__aeabi_dsub+0x314>
 80012e6:	000b      	movs	r3, r1
 80012e8:	433b      	orrs	r3, r7
 80012ea:	d100      	bne.n	80012ee <__aeabi_dsub+0x5ba>
 80012ec:	e728      	b.n	8001140 <__aeabi_dsub+0x40c>
 80012ee:	08ff      	lsrs	r7, r7, #3
 80012f0:	074b      	lsls	r3, r1, #29
 80012f2:	465d      	mov	r5, fp
 80012f4:	433b      	orrs	r3, r7
 80012f6:	08cc      	lsrs	r4, r1, #3
 80012f8:	e697      	b.n	800102a <__aeabi_dsub+0x2f6>
 80012fa:	2302      	movs	r3, #2
 80012fc:	4698      	mov	r8, r3
 80012fe:	e736      	b.n	800116e <__aeabi_dsub+0x43a>
 8001300:	1afc      	subs	r4, r7, r3
 8001302:	42a7      	cmp	r7, r4
 8001304:	41bf      	sbcs	r7, r7
 8001306:	4663      	mov	r3, ip
 8001308:	427f      	negs	r7, r7
 800130a:	1ac9      	subs	r1, r1, r3
 800130c:	1bcb      	subs	r3, r1, r7
 800130e:	4699      	mov	r9, r3
 8001310:	2301      	movs	r3, #1
 8001312:	465d      	mov	r5, fp
 8001314:	4698      	mov	r8, r3
 8001316:	e55e      	b.n	8000dd6 <__aeabi_dsub+0xa2>
 8001318:	074b      	lsls	r3, r1, #29
 800131a:	08ff      	lsrs	r7, r7, #3
 800131c:	433b      	orrs	r3, r7
 800131e:	08cc      	lsrs	r4, r1, #3
 8001320:	e692      	b.n	8001048 <__aeabi_dsub+0x314>
 8001322:	1bdc      	subs	r4, r3, r7
 8001324:	4660      	mov	r0, ip
 8001326:	42a3      	cmp	r3, r4
 8001328:	41b6      	sbcs	r6, r6
 800132a:	1a40      	subs	r0, r0, r1
 800132c:	4276      	negs	r6, r6
 800132e:	1b80      	subs	r0, r0, r6
 8001330:	4681      	mov	r9, r0
 8001332:	0200      	lsls	r0, r0, #8
 8001334:	d560      	bpl.n	80013f8 <__aeabi_dsub+0x6c4>
 8001336:	1afc      	subs	r4, r7, r3
 8001338:	42a7      	cmp	r7, r4
 800133a:	41bf      	sbcs	r7, r7
 800133c:	4663      	mov	r3, ip
 800133e:	427f      	negs	r7, r7
 8001340:	1ac9      	subs	r1, r1, r3
 8001342:	1bcb      	subs	r3, r1, r7
 8001344:	4699      	mov	r9, r3
 8001346:	465d      	mov	r5, fp
 8001348:	e576      	b.n	8000e38 <__aeabi_dsub+0x104>
 800134a:	08ff      	lsrs	r7, r7, #3
 800134c:	074b      	lsls	r3, r1, #29
 800134e:	433b      	orrs	r3, r7
 8001350:	08cc      	lsrs	r4, r1, #3
 8001352:	e667      	b.n	8001024 <__aeabi_dsub+0x2f0>
 8001354:	000a      	movs	r2, r1
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	433a      	orrs	r2, r7
 800135a:	d100      	bne.n	800135e <__aeabi_dsub+0x62a>
 800135c:	e66f      	b.n	800103e <__aeabi_dsub+0x30a>
 800135e:	4662      	mov	r2, ip
 8001360:	0752      	lsls	r2, r2, #29
 8001362:	4313      	orrs	r3, r2
 8001364:	4662      	mov	r2, ip
 8001366:	08d4      	lsrs	r4, r2, #3
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	0312      	lsls	r2, r2, #12
 800136c:	4214      	tst	r4, r2
 800136e:	d007      	beq.n	8001380 <__aeabi_dsub+0x64c>
 8001370:	08c8      	lsrs	r0, r1, #3
 8001372:	4210      	tst	r0, r2
 8001374:	d104      	bne.n	8001380 <__aeabi_dsub+0x64c>
 8001376:	465d      	mov	r5, fp
 8001378:	0004      	movs	r4, r0
 800137a:	08fb      	lsrs	r3, r7, #3
 800137c:	0749      	lsls	r1, r1, #29
 800137e:	430b      	orrs	r3, r1
 8001380:	0f5a      	lsrs	r2, r3, #29
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	08db      	lsrs	r3, r3, #3
 8001386:	0752      	lsls	r2, r2, #29
 8001388:	4313      	orrs	r3, r2
 800138a:	e65d      	b.n	8001048 <__aeabi_dsub+0x314>
 800138c:	074b      	lsls	r3, r1, #29
 800138e:	08ff      	lsrs	r7, r7, #3
 8001390:	433b      	orrs	r3, r7
 8001392:	08cc      	lsrs	r4, r1, #3
 8001394:	e649      	b.n	800102a <__aeabi_dsub+0x2f6>
 8001396:	19dc      	adds	r4, r3, r7
 8001398:	429c      	cmp	r4, r3
 800139a:	419b      	sbcs	r3, r3
 800139c:	4461      	add	r1, ip
 800139e:	4689      	mov	r9, r1
 80013a0:	425b      	negs	r3, r3
 80013a2:	4499      	add	r9, r3
 80013a4:	464b      	mov	r3, r9
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	d400      	bmi.n	80013ac <__aeabi_dsub+0x678>
 80013aa:	e631      	b.n	8001010 <__aeabi_dsub+0x2dc>
 80013ac:	464a      	mov	r2, r9
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <__aeabi_dsub+0x6d8>)
 80013b0:	401a      	ands	r2, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	4691      	mov	r9, r2
 80013b6:	4698      	mov	r8, r3
 80013b8:	e62a      	b.n	8001010 <__aeabi_dsub+0x2dc>
 80013ba:	0016      	movs	r6, r2
 80013bc:	4664      	mov	r4, ip
 80013be:	3e20      	subs	r6, #32
 80013c0:	40f4      	lsrs	r4, r6
 80013c2:	46a0      	mov	r8, r4
 80013c4:	2a20      	cmp	r2, #32
 80013c6:	d005      	beq.n	80013d4 <__aeabi_dsub+0x6a0>
 80013c8:	2640      	movs	r6, #64	; 0x40
 80013ca:	4664      	mov	r4, ip
 80013cc:	1ab2      	subs	r2, r6, r2
 80013ce:	4094      	lsls	r4, r2
 80013d0:	4323      	orrs	r3, r4
 80013d2:	469a      	mov	sl, r3
 80013d4:	4654      	mov	r4, sl
 80013d6:	1e63      	subs	r3, r4, #1
 80013d8:	419c      	sbcs	r4, r3
 80013da:	4643      	mov	r3, r8
 80013dc:	431c      	orrs	r4, r3
 80013de:	e5db      	b.n	8000f98 <__aeabi_dsub+0x264>
 80013e0:	0002      	movs	r2, r0
 80013e2:	2400      	movs	r4, #0
 80013e4:	2300      	movs	r3, #0
 80013e6:	e548      	b.n	8000e7a <__aeabi_dsub+0x146>
 80013e8:	19dc      	adds	r4, r3, r7
 80013ea:	42bc      	cmp	r4, r7
 80013ec:	41bf      	sbcs	r7, r7
 80013ee:	4461      	add	r1, ip
 80013f0:	4689      	mov	r9, r1
 80013f2:	427f      	negs	r7, r7
 80013f4:	44b9      	add	r9, r7
 80013f6:	e738      	b.n	800126a <__aeabi_dsub+0x536>
 80013f8:	464b      	mov	r3, r9
 80013fa:	4323      	orrs	r3, r4
 80013fc:	d100      	bne.n	8001400 <__aeabi_dsub+0x6cc>
 80013fe:	e69f      	b.n	8001140 <__aeabi_dsub+0x40c>
 8001400:	e606      	b.n	8001010 <__aeabi_dsub+0x2dc>
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	000007fe 	.word	0x000007fe
 8001408:	000007ff 	.word	0x000007ff
 800140c:	ff7fffff 	.word	0xff7fffff
 8001410:	08ff      	lsrs	r7, r7, #3
 8001412:	074b      	lsls	r3, r1, #29
 8001414:	433b      	orrs	r3, r7
 8001416:	08cc      	lsrs	r4, r1, #3
 8001418:	e616      	b.n	8001048 <__aeabi_dsub+0x314>
 800141a:	4662      	mov	r2, ip
 800141c:	08db      	lsrs	r3, r3, #3
 800141e:	0752      	lsls	r2, r2, #29
 8001420:	4313      	orrs	r3, r2
 8001422:	4662      	mov	r2, ip
 8001424:	08d4      	lsrs	r4, r2, #3
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	0312      	lsls	r2, r2, #12
 800142a:	4214      	tst	r4, r2
 800142c:	d007      	beq.n	800143e <__aeabi_dsub+0x70a>
 800142e:	08c8      	lsrs	r0, r1, #3
 8001430:	4210      	tst	r0, r2
 8001432:	d104      	bne.n	800143e <__aeabi_dsub+0x70a>
 8001434:	465d      	mov	r5, fp
 8001436:	0004      	movs	r4, r0
 8001438:	08fb      	lsrs	r3, r7, #3
 800143a:	0749      	lsls	r1, r1, #29
 800143c:	430b      	orrs	r3, r1
 800143e:	0f5a      	lsrs	r2, r3, #29
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	0752      	lsls	r2, r2, #29
 8001444:	08db      	lsrs	r3, r3, #3
 8001446:	4313      	orrs	r3, r2
 8001448:	e5fe      	b.n	8001048 <__aeabi_dsub+0x314>
 800144a:	2300      	movs	r3, #0
 800144c:	4a01      	ldr	r2, [pc, #4]	; (8001454 <__aeabi_dsub+0x720>)
 800144e:	001c      	movs	r4, r3
 8001450:	e513      	b.n	8000e7a <__aeabi_dsub+0x146>
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	000007ff 	.word	0x000007ff

08001458 <__aeabi_d2iz>:
 8001458:	000a      	movs	r2, r1
 800145a:	b530      	push	{r4, r5, lr}
 800145c:	4c13      	ldr	r4, [pc, #76]	; (80014ac <__aeabi_d2iz+0x54>)
 800145e:	0053      	lsls	r3, r2, #1
 8001460:	0309      	lsls	r1, r1, #12
 8001462:	0005      	movs	r5, r0
 8001464:	0b09      	lsrs	r1, r1, #12
 8001466:	2000      	movs	r0, #0
 8001468:	0d5b      	lsrs	r3, r3, #21
 800146a:	0fd2      	lsrs	r2, r2, #31
 800146c:	42a3      	cmp	r3, r4
 800146e:	dd04      	ble.n	800147a <__aeabi_d2iz+0x22>
 8001470:	480f      	ldr	r0, [pc, #60]	; (80014b0 <__aeabi_d2iz+0x58>)
 8001472:	4283      	cmp	r3, r0
 8001474:	dd02      	ble.n	800147c <__aeabi_d2iz+0x24>
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <__aeabi_d2iz+0x5c>)
 8001478:	18d0      	adds	r0, r2, r3
 800147a:	bd30      	pop	{r4, r5, pc}
 800147c:	2080      	movs	r0, #128	; 0x80
 800147e:	0340      	lsls	r0, r0, #13
 8001480:	4301      	orrs	r1, r0
 8001482:	480d      	ldr	r0, [pc, #52]	; (80014b8 <__aeabi_d2iz+0x60>)
 8001484:	1ac0      	subs	r0, r0, r3
 8001486:	281f      	cmp	r0, #31
 8001488:	dd08      	ble.n	800149c <__aeabi_d2iz+0x44>
 800148a:	480c      	ldr	r0, [pc, #48]	; (80014bc <__aeabi_d2iz+0x64>)
 800148c:	1ac3      	subs	r3, r0, r3
 800148e:	40d9      	lsrs	r1, r3
 8001490:	000b      	movs	r3, r1
 8001492:	4258      	negs	r0, r3
 8001494:	2a00      	cmp	r2, #0
 8001496:	d1f0      	bne.n	800147a <__aeabi_d2iz+0x22>
 8001498:	0018      	movs	r0, r3
 800149a:	e7ee      	b.n	800147a <__aeabi_d2iz+0x22>
 800149c:	4c08      	ldr	r4, [pc, #32]	; (80014c0 <__aeabi_d2iz+0x68>)
 800149e:	40c5      	lsrs	r5, r0
 80014a0:	46a4      	mov	ip, r4
 80014a2:	4463      	add	r3, ip
 80014a4:	4099      	lsls	r1, r3
 80014a6:	000b      	movs	r3, r1
 80014a8:	432b      	orrs	r3, r5
 80014aa:	e7f2      	b.n	8001492 <__aeabi_d2iz+0x3a>
 80014ac:	000003fe 	.word	0x000003fe
 80014b0:	0000041d 	.word	0x0000041d
 80014b4:	7fffffff 	.word	0x7fffffff
 80014b8:	00000433 	.word	0x00000433
 80014bc:	00000413 	.word	0x00000413
 80014c0:	fffffbed 	.word	0xfffffbed

080014c4 <__aeabi_ui2d>:
 80014c4:	b510      	push	{r4, lr}
 80014c6:	1e04      	subs	r4, r0, #0
 80014c8:	d010      	beq.n	80014ec <__aeabi_ui2d+0x28>
 80014ca:	f000 f85f 	bl	800158c <__clzsi2>
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <__aeabi_ui2d+0x48>)
 80014d0:	1a1b      	subs	r3, r3, r0
 80014d2:	280a      	cmp	r0, #10
 80014d4:	dc11      	bgt.n	80014fa <__aeabi_ui2d+0x36>
 80014d6:	220b      	movs	r2, #11
 80014d8:	0021      	movs	r1, r4
 80014da:	1a12      	subs	r2, r2, r0
 80014dc:	40d1      	lsrs	r1, r2
 80014de:	3015      	adds	r0, #21
 80014e0:	030a      	lsls	r2, r1, #12
 80014e2:	055b      	lsls	r3, r3, #21
 80014e4:	4084      	lsls	r4, r0
 80014e6:	0b12      	lsrs	r2, r2, #12
 80014e8:	0d5b      	lsrs	r3, r3, #21
 80014ea:	e001      	b.n	80014f0 <__aeabi_ui2d+0x2c>
 80014ec:	2300      	movs	r3, #0
 80014ee:	2200      	movs	r2, #0
 80014f0:	051b      	lsls	r3, r3, #20
 80014f2:	4313      	orrs	r3, r2
 80014f4:	0020      	movs	r0, r4
 80014f6:	0019      	movs	r1, r3
 80014f8:	bd10      	pop	{r4, pc}
 80014fa:	0022      	movs	r2, r4
 80014fc:	380b      	subs	r0, #11
 80014fe:	4082      	lsls	r2, r0
 8001500:	055b      	lsls	r3, r3, #21
 8001502:	0312      	lsls	r2, r2, #12
 8001504:	2400      	movs	r4, #0
 8001506:	0b12      	lsrs	r2, r2, #12
 8001508:	0d5b      	lsrs	r3, r3, #21
 800150a:	e7f1      	b.n	80014f0 <__aeabi_ui2d+0x2c>
 800150c:	0000041e 	.word	0x0000041e

08001510 <__aeabi_cdrcmple>:
 8001510:	4684      	mov	ip, r0
 8001512:	0010      	movs	r0, r2
 8001514:	4662      	mov	r2, ip
 8001516:	468c      	mov	ip, r1
 8001518:	0019      	movs	r1, r3
 800151a:	4663      	mov	r3, ip
 800151c:	e000      	b.n	8001520 <__aeabi_cdcmpeq>
 800151e:	46c0      	nop			; (mov r8, r8)

08001520 <__aeabi_cdcmpeq>:
 8001520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001522:	f000 f8f9 	bl	8001718 <__ledf2>
 8001526:	2800      	cmp	r0, #0
 8001528:	d401      	bmi.n	800152e <__aeabi_cdcmpeq+0xe>
 800152a:	2100      	movs	r1, #0
 800152c:	42c8      	cmn	r0, r1
 800152e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001530 <__aeabi_dcmpeq>:
 8001530:	b510      	push	{r4, lr}
 8001532:	f000 f849 	bl	80015c8 <__eqdf2>
 8001536:	4240      	negs	r0, r0
 8001538:	3001      	adds	r0, #1
 800153a:	bd10      	pop	{r4, pc}

0800153c <__aeabi_dcmplt>:
 800153c:	b510      	push	{r4, lr}
 800153e:	f000 f8eb 	bl	8001718 <__ledf2>
 8001542:	2800      	cmp	r0, #0
 8001544:	db01      	blt.n	800154a <__aeabi_dcmplt+0xe>
 8001546:	2000      	movs	r0, #0
 8001548:	bd10      	pop	{r4, pc}
 800154a:	2001      	movs	r0, #1
 800154c:	bd10      	pop	{r4, pc}
 800154e:	46c0      	nop			; (mov r8, r8)

08001550 <__aeabi_dcmple>:
 8001550:	b510      	push	{r4, lr}
 8001552:	f000 f8e1 	bl	8001718 <__ledf2>
 8001556:	2800      	cmp	r0, #0
 8001558:	dd01      	ble.n	800155e <__aeabi_dcmple+0xe>
 800155a:	2000      	movs	r0, #0
 800155c:	bd10      	pop	{r4, pc}
 800155e:	2001      	movs	r0, #1
 8001560:	bd10      	pop	{r4, pc}
 8001562:	46c0      	nop			; (mov r8, r8)

08001564 <__aeabi_dcmpgt>:
 8001564:	b510      	push	{r4, lr}
 8001566:	f000 f871 	bl	800164c <__gedf2>
 800156a:	2800      	cmp	r0, #0
 800156c:	dc01      	bgt.n	8001572 <__aeabi_dcmpgt+0xe>
 800156e:	2000      	movs	r0, #0
 8001570:	bd10      	pop	{r4, pc}
 8001572:	2001      	movs	r0, #1
 8001574:	bd10      	pop	{r4, pc}
 8001576:	46c0      	nop			; (mov r8, r8)

08001578 <__aeabi_dcmpge>:
 8001578:	b510      	push	{r4, lr}
 800157a:	f000 f867 	bl	800164c <__gedf2>
 800157e:	2800      	cmp	r0, #0
 8001580:	da01      	bge.n	8001586 <__aeabi_dcmpge+0xe>
 8001582:	2000      	movs	r0, #0
 8001584:	bd10      	pop	{r4, pc}
 8001586:	2001      	movs	r0, #1
 8001588:	bd10      	pop	{r4, pc}
 800158a:	46c0      	nop			; (mov r8, r8)

0800158c <__clzsi2>:
 800158c:	211c      	movs	r1, #28
 800158e:	2301      	movs	r3, #1
 8001590:	041b      	lsls	r3, r3, #16
 8001592:	4298      	cmp	r0, r3
 8001594:	d301      	bcc.n	800159a <__clzsi2+0xe>
 8001596:	0c00      	lsrs	r0, r0, #16
 8001598:	3910      	subs	r1, #16
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	4298      	cmp	r0, r3
 800159e:	d301      	bcc.n	80015a4 <__clzsi2+0x18>
 80015a0:	0a00      	lsrs	r0, r0, #8
 80015a2:	3908      	subs	r1, #8
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	4298      	cmp	r0, r3
 80015a8:	d301      	bcc.n	80015ae <__clzsi2+0x22>
 80015aa:	0900      	lsrs	r0, r0, #4
 80015ac:	3904      	subs	r1, #4
 80015ae:	a202      	add	r2, pc, #8	; (adr r2, 80015b8 <__clzsi2+0x2c>)
 80015b0:	5c10      	ldrb	r0, [r2, r0]
 80015b2:	1840      	adds	r0, r0, r1
 80015b4:	4770      	bx	lr
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	02020304 	.word	0x02020304
 80015bc:	01010101 	.word	0x01010101
	...

080015c8 <__eqdf2>:
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ca:	464e      	mov	r6, r9
 80015cc:	4645      	mov	r5, r8
 80015ce:	46de      	mov	lr, fp
 80015d0:	4657      	mov	r7, sl
 80015d2:	4690      	mov	r8, r2
 80015d4:	b5e0      	push	{r5, r6, r7, lr}
 80015d6:	0017      	movs	r7, r2
 80015d8:	031a      	lsls	r2, r3, #12
 80015da:	0b12      	lsrs	r2, r2, #12
 80015dc:	0005      	movs	r5, r0
 80015de:	4684      	mov	ip, r0
 80015e0:	4819      	ldr	r0, [pc, #100]	; (8001648 <__eqdf2+0x80>)
 80015e2:	030e      	lsls	r6, r1, #12
 80015e4:	004c      	lsls	r4, r1, #1
 80015e6:	4691      	mov	r9, r2
 80015e8:	005a      	lsls	r2, r3, #1
 80015ea:	0fdb      	lsrs	r3, r3, #31
 80015ec:	469b      	mov	fp, r3
 80015ee:	0b36      	lsrs	r6, r6, #12
 80015f0:	0d64      	lsrs	r4, r4, #21
 80015f2:	0fc9      	lsrs	r1, r1, #31
 80015f4:	0d52      	lsrs	r2, r2, #21
 80015f6:	4284      	cmp	r4, r0
 80015f8:	d019      	beq.n	800162e <__eqdf2+0x66>
 80015fa:	4282      	cmp	r2, r0
 80015fc:	d010      	beq.n	8001620 <__eqdf2+0x58>
 80015fe:	2001      	movs	r0, #1
 8001600:	4294      	cmp	r4, r2
 8001602:	d10e      	bne.n	8001622 <__eqdf2+0x5a>
 8001604:	454e      	cmp	r6, r9
 8001606:	d10c      	bne.n	8001622 <__eqdf2+0x5a>
 8001608:	2001      	movs	r0, #1
 800160a:	45c4      	cmp	ip, r8
 800160c:	d109      	bne.n	8001622 <__eqdf2+0x5a>
 800160e:	4559      	cmp	r1, fp
 8001610:	d017      	beq.n	8001642 <__eqdf2+0x7a>
 8001612:	2c00      	cmp	r4, #0
 8001614:	d105      	bne.n	8001622 <__eqdf2+0x5a>
 8001616:	0030      	movs	r0, r6
 8001618:	4328      	orrs	r0, r5
 800161a:	1e43      	subs	r3, r0, #1
 800161c:	4198      	sbcs	r0, r3
 800161e:	e000      	b.n	8001622 <__eqdf2+0x5a>
 8001620:	2001      	movs	r0, #1
 8001622:	bcf0      	pop	{r4, r5, r6, r7}
 8001624:	46bb      	mov	fp, r7
 8001626:	46b2      	mov	sl, r6
 8001628:	46a9      	mov	r9, r5
 800162a:	46a0      	mov	r8, r4
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162e:	0033      	movs	r3, r6
 8001630:	2001      	movs	r0, #1
 8001632:	432b      	orrs	r3, r5
 8001634:	d1f5      	bne.n	8001622 <__eqdf2+0x5a>
 8001636:	42a2      	cmp	r2, r4
 8001638:	d1f3      	bne.n	8001622 <__eqdf2+0x5a>
 800163a:	464b      	mov	r3, r9
 800163c:	433b      	orrs	r3, r7
 800163e:	d1f0      	bne.n	8001622 <__eqdf2+0x5a>
 8001640:	e7e2      	b.n	8001608 <__eqdf2+0x40>
 8001642:	2000      	movs	r0, #0
 8001644:	e7ed      	b.n	8001622 <__eqdf2+0x5a>
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	000007ff 	.word	0x000007ff

0800164c <__gedf2>:
 800164c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164e:	4647      	mov	r7, r8
 8001650:	46ce      	mov	lr, r9
 8001652:	0004      	movs	r4, r0
 8001654:	0018      	movs	r0, r3
 8001656:	0016      	movs	r6, r2
 8001658:	031b      	lsls	r3, r3, #12
 800165a:	0b1b      	lsrs	r3, r3, #12
 800165c:	4d2d      	ldr	r5, [pc, #180]	; (8001714 <__gedf2+0xc8>)
 800165e:	004a      	lsls	r2, r1, #1
 8001660:	4699      	mov	r9, r3
 8001662:	b580      	push	{r7, lr}
 8001664:	0043      	lsls	r3, r0, #1
 8001666:	030f      	lsls	r7, r1, #12
 8001668:	46a4      	mov	ip, r4
 800166a:	46b0      	mov	r8, r6
 800166c:	0b3f      	lsrs	r7, r7, #12
 800166e:	0d52      	lsrs	r2, r2, #21
 8001670:	0fc9      	lsrs	r1, r1, #31
 8001672:	0d5b      	lsrs	r3, r3, #21
 8001674:	0fc0      	lsrs	r0, r0, #31
 8001676:	42aa      	cmp	r2, r5
 8001678:	d021      	beq.n	80016be <__gedf2+0x72>
 800167a:	42ab      	cmp	r3, r5
 800167c:	d013      	beq.n	80016a6 <__gedf2+0x5a>
 800167e:	2a00      	cmp	r2, #0
 8001680:	d122      	bne.n	80016c8 <__gedf2+0x7c>
 8001682:	433c      	orrs	r4, r7
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <__gedf2+0x42>
 8001688:	464d      	mov	r5, r9
 800168a:	432e      	orrs	r6, r5
 800168c:	d022      	beq.n	80016d4 <__gedf2+0x88>
 800168e:	2c00      	cmp	r4, #0
 8001690:	d010      	beq.n	80016b4 <__gedf2+0x68>
 8001692:	4281      	cmp	r1, r0
 8001694:	d022      	beq.n	80016dc <__gedf2+0x90>
 8001696:	2002      	movs	r0, #2
 8001698:	3901      	subs	r1, #1
 800169a:	4008      	ands	r0, r1
 800169c:	3801      	subs	r0, #1
 800169e:	bcc0      	pop	{r6, r7}
 80016a0:	46b9      	mov	r9, r7
 80016a2:	46b0      	mov	r8, r6
 80016a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a6:	464d      	mov	r5, r9
 80016a8:	432e      	orrs	r6, r5
 80016aa:	d129      	bne.n	8001700 <__gedf2+0xb4>
 80016ac:	2a00      	cmp	r2, #0
 80016ae:	d1f0      	bne.n	8001692 <__gedf2+0x46>
 80016b0:	433c      	orrs	r4, r7
 80016b2:	d1ee      	bne.n	8001692 <__gedf2+0x46>
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d1f2      	bne.n	800169e <__gedf2+0x52>
 80016b8:	2001      	movs	r0, #1
 80016ba:	4240      	negs	r0, r0
 80016bc:	e7ef      	b.n	800169e <__gedf2+0x52>
 80016be:	003d      	movs	r5, r7
 80016c0:	4325      	orrs	r5, r4
 80016c2:	d11d      	bne.n	8001700 <__gedf2+0xb4>
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d0ee      	beq.n	80016a6 <__gedf2+0x5a>
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1e2      	bne.n	8001692 <__gedf2+0x46>
 80016cc:	464c      	mov	r4, r9
 80016ce:	4326      	orrs	r6, r4
 80016d0:	d1df      	bne.n	8001692 <__gedf2+0x46>
 80016d2:	e7e0      	b.n	8001696 <__gedf2+0x4a>
 80016d4:	2000      	movs	r0, #0
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	d0e1      	beq.n	800169e <__gedf2+0x52>
 80016da:	e7dc      	b.n	8001696 <__gedf2+0x4a>
 80016dc:	429a      	cmp	r2, r3
 80016de:	dc0a      	bgt.n	80016f6 <__gedf2+0xaa>
 80016e0:	dbe8      	blt.n	80016b4 <__gedf2+0x68>
 80016e2:	454f      	cmp	r7, r9
 80016e4:	d8d7      	bhi.n	8001696 <__gedf2+0x4a>
 80016e6:	d00e      	beq.n	8001706 <__gedf2+0xba>
 80016e8:	2000      	movs	r0, #0
 80016ea:	454f      	cmp	r7, r9
 80016ec:	d2d7      	bcs.n	800169e <__gedf2+0x52>
 80016ee:	2900      	cmp	r1, #0
 80016f0:	d0e2      	beq.n	80016b8 <__gedf2+0x6c>
 80016f2:	0008      	movs	r0, r1
 80016f4:	e7d3      	b.n	800169e <__gedf2+0x52>
 80016f6:	4243      	negs	r3, r0
 80016f8:	4158      	adcs	r0, r3
 80016fa:	0040      	lsls	r0, r0, #1
 80016fc:	3801      	subs	r0, #1
 80016fe:	e7ce      	b.n	800169e <__gedf2+0x52>
 8001700:	2002      	movs	r0, #2
 8001702:	4240      	negs	r0, r0
 8001704:	e7cb      	b.n	800169e <__gedf2+0x52>
 8001706:	45c4      	cmp	ip, r8
 8001708:	d8c5      	bhi.n	8001696 <__gedf2+0x4a>
 800170a:	2000      	movs	r0, #0
 800170c:	45c4      	cmp	ip, r8
 800170e:	d2c6      	bcs.n	800169e <__gedf2+0x52>
 8001710:	e7ed      	b.n	80016ee <__gedf2+0xa2>
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	000007ff 	.word	0x000007ff

08001718 <__ledf2>:
 8001718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171a:	4647      	mov	r7, r8
 800171c:	46ce      	mov	lr, r9
 800171e:	0004      	movs	r4, r0
 8001720:	0018      	movs	r0, r3
 8001722:	0016      	movs	r6, r2
 8001724:	031b      	lsls	r3, r3, #12
 8001726:	0b1b      	lsrs	r3, r3, #12
 8001728:	4d2c      	ldr	r5, [pc, #176]	; (80017dc <__ledf2+0xc4>)
 800172a:	004a      	lsls	r2, r1, #1
 800172c:	4699      	mov	r9, r3
 800172e:	b580      	push	{r7, lr}
 8001730:	0043      	lsls	r3, r0, #1
 8001732:	030f      	lsls	r7, r1, #12
 8001734:	46a4      	mov	ip, r4
 8001736:	46b0      	mov	r8, r6
 8001738:	0b3f      	lsrs	r7, r7, #12
 800173a:	0d52      	lsrs	r2, r2, #21
 800173c:	0fc9      	lsrs	r1, r1, #31
 800173e:	0d5b      	lsrs	r3, r3, #21
 8001740:	0fc0      	lsrs	r0, r0, #31
 8001742:	42aa      	cmp	r2, r5
 8001744:	d00d      	beq.n	8001762 <__ledf2+0x4a>
 8001746:	42ab      	cmp	r3, r5
 8001748:	d010      	beq.n	800176c <__ledf2+0x54>
 800174a:	2a00      	cmp	r2, #0
 800174c:	d127      	bne.n	800179e <__ledf2+0x86>
 800174e:	433c      	orrs	r4, r7
 8001750:	2b00      	cmp	r3, #0
 8001752:	d111      	bne.n	8001778 <__ledf2+0x60>
 8001754:	464d      	mov	r5, r9
 8001756:	432e      	orrs	r6, r5
 8001758:	d10e      	bne.n	8001778 <__ledf2+0x60>
 800175a:	2000      	movs	r0, #0
 800175c:	2c00      	cmp	r4, #0
 800175e:	d015      	beq.n	800178c <__ledf2+0x74>
 8001760:	e00e      	b.n	8001780 <__ledf2+0x68>
 8001762:	003d      	movs	r5, r7
 8001764:	4325      	orrs	r5, r4
 8001766:	d110      	bne.n	800178a <__ledf2+0x72>
 8001768:	4293      	cmp	r3, r2
 800176a:	d118      	bne.n	800179e <__ledf2+0x86>
 800176c:	464d      	mov	r5, r9
 800176e:	432e      	orrs	r6, r5
 8001770:	d10b      	bne.n	800178a <__ledf2+0x72>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d102      	bne.n	800177c <__ledf2+0x64>
 8001776:	433c      	orrs	r4, r7
 8001778:	2c00      	cmp	r4, #0
 800177a:	d00b      	beq.n	8001794 <__ledf2+0x7c>
 800177c:	4281      	cmp	r1, r0
 800177e:	d014      	beq.n	80017aa <__ledf2+0x92>
 8001780:	2002      	movs	r0, #2
 8001782:	3901      	subs	r1, #1
 8001784:	4008      	ands	r0, r1
 8001786:	3801      	subs	r0, #1
 8001788:	e000      	b.n	800178c <__ledf2+0x74>
 800178a:	2002      	movs	r0, #2
 800178c:	bcc0      	pop	{r6, r7}
 800178e:	46b9      	mov	r9, r7
 8001790:	46b0      	mov	r8, r6
 8001792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001794:	2800      	cmp	r0, #0
 8001796:	d1f9      	bne.n	800178c <__ledf2+0x74>
 8001798:	2001      	movs	r0, #1
 800179a:	4240      	negs	r0, r0
 800179c:	e7f6      	b.n	800178c <__ledf2+0x74>
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1ec      	bne.n	800177c <__ledf2+0x64>
 80017a2:	464c      	mov	r4, r9
 80017a4:	4326      	orrs	r6, r4
 80017a6:	d1e9      	bne.n	800177c <__ledf2+0x64>
 80017a8:	e7ea      	b.n	8001780 <__ledf2+0x68>
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dd04      	ble.n	80017b8 <__ledf2+0xa0>
 80017ae:	4243      	negs	r3, r0
 80017b0:	4158      	adcs	r0, r3
 80017b2:	0040      	lsls	r0, r0, #1
 80017b4:	3801      	subs	r0, #1
 80017b6:	e7e9      	b.n	800178c <__ledf2+0x74>
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dbeb      	blt.n	8001794 <__ledf2+0x7c>
 80017bc:	454f      	cmp	r7, r9
 80017be:	d8df      	bhi.n	8001780 <__ledf2+0x68>
 80017c0:	d006      	beq.n	80017d0 <__ledf2+0xb8>
 80017c2:	2000      	movs	r0, #0
 80017c4:	454f      	cmp	r7, r9
 80017c6:	d2e1      	bcs.n	800178c <__ledf2+0x74>
 80017c8:	2900      	cmp	r1, #0
 80017ca:	d0e5      	beq.n	8001798 <__ledf2+0x80>
 80017cc:	0008      	movs	r0, r1
 80017ce:	e7dd      	b.n	800178c <__ledf2+0x74>
 80017d0:	45c4      	cmp	ip, r8
 80017d2:	d8d5      	bhi.n	8001780 <__ledf2+0x68>
 80017d4:	2000      	movs	r0, #0
 80017d6:	45c4      	cmp	ip, r8
 80017d8:	d2d8      	bcs.n	800178c <__ledf2+0x74>
 80017da:	e7f5      	b.n	80017c8 <__ledf2+0xb0>
 80017dc:	000007ff 	.word	0x000007ff

080017e0 <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  // CS pin is constantly active low
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
	// CS pin is constantly active low
}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	0002      	movs	r2, r0
 80017fc:	1dfb      	adds	r3, r7, #7
 80017fe:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <SPI_TxByte+0x30>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2202      	movs	r2, #2
 800180a:	4013      	ands	r3, r2
 800180c:	2b02      	cmp	r3, #2
 800180e:	d1f8      	bne.n	8001802 <SPI_TxByte+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001810:	1df9      	adds	r1, r7, #7
 8001812:	4804      	ldr	r0, [pc, #16]	; (8001824 <SPI_TxByte+0x30>)
 8001814:	2364      	movs	r3, #100	; 0x64
 8001816:	2201      	movs	r2, #1
 8001818:	f002 fddc 	bl	80043d4 <HAL_SPI_Transmit>
}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	b002      	add	sp, #8
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000138 	.word	0x20000138

08001828 <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	000a      	movs	r2, r1
 8001832:	1cbb      	adds	r3, r7, #2
 8001834:	801a      	strh	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <SPI_TxBuffer+0x34>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2202      	movs	r2, #2
 8001840:	4013      	ands	r3, r2
 8001842:	2b02      	cmp	r3, #2
 8001844:	d1f8      	bne.n	8001838 <SPI_TxBuffer+0x10>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001846:	1cbb      	adds	r3, r7, #2
 8001848:	881a      	ldrh	r2, [r3, #0]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4803      	ldr	r0, [pc, #12]	; (800185c <SPI_TxBuffer+0x34>)
 800184e:	2364      	movs	r3, #100	; 0x64
 8001850:	f002 fdc0 	bl	80043d4 <HAL_SPI_Transmit>
}
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b002      	add	sp, #8
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000138 	.word	0x20000138

08001860 <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	22ff      	movs	r2, #255	; 0xff
 800186a:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <SPI_RxByte+0x38>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2202      	movs	r2, #2
 8001876:	4013      	ands	r3, r2
 8001878:	2b02      	cmp	r3, #2
 800187a:	d1f8      	bne.n	800186e <SPI_RxByte+0xe>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800187c:	1dba      	adds	r2, r7, #6
 800187e:	1df9      	adds	r1, r7, #7
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <SPI_RxByte+0x38>)
 8001882:	2364      	movs	r3, #100	; 0x64
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2301      	movs	r3, #1
 8001888:	f002 fefc 	bl	8004684 <HAL_SPI_TransmitReceive>
  return data;
 800188c:	1dbb      	adds	r3, r7, #6
 800188e:	781b      	ldrb	r3, [r3, #0]
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b002      	add	sp, #8
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000138 	.word	0x20000138

0800189c <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80018a4:	f7ff ffdc 	bl	8001860 <SPI_RxByte>
 80018a8:	0003      	movs	r3, r0
 80018aa:	001a      	movs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	701a      	strb	r2, [r3, #0]
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <SD_ReadyWait+0x34>)
 80018c0:	22fa      	movs	r2, #250	; 0xfa
 80018c2:	0052      	lsls	r2, r2, #1
 80018c4:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80018c6:	1dfc      	adds	r4, r7, #7
 80018c8:	f7ff ffca 	bl	8001860 <SPI_RxByte>
 80018cc:	0003      	movs	r3, r0
 80018ce:	7023      	strb	r3, [r4, #0]
  } while ((res != 0xFF) && Timer2);
 80018d0:	1dfb      	adds	r3, r7, #7
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2bff      	cmp	r3, #255	; 0xff
 80018d6:	d003      	beq.n	80018e0 <SD_ReadyWait+0x28>
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SD_ReadyWait+0x34>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f2      	bne.n	80018c6 <SD_ReadyWait+0xe>
  return res;
 80018e0:	1dfb      	adds	r3, r7, #7
 80018e2:	781b      	ldrb	r3, [r3, #0]
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b003      	add	sp, #12
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	200000a6 	.word	0x200000a6

080018f0 <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <SD_PowerOn+0x88>)
 80018f8:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 80018fa:	f7ff ff76 	bl	80017ea <DESELECT>
  for(int i = 0; i < 10; i++)
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	e005      	b.n	8001910 <SD_PowerOn+0x20>
  {
    SPI_TxByte(0xFF);
 8001904:	20ff      	movs	r0, #255	; 0xff
 8001906:	f7ff ff75 	bl	80017f4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	3301      	adds	r3, #1
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b09      	cmp	r3, #9
 8001914:	ddf6      	ble.n	8001904 <SD_PowerOn+0x14>
  }
  /* slave select */
  SELECT();
 8001916:	f7ff ff63 	bl	80017e0 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800191a:	003b      	movs	r3, r7
 800191c:	2240      	movs	r2, #64	; 0x40
 800191e:	701a      	strb	r2, [r3, #0]
  args[1] = 0;
 8001920:	003b      	movs	r3, r7
 8001922:	2200      	movs	r2, #0
 8001924:	705a      	strb	r2, [r3, #1]
  args[2] = 0;
 8001926:	003b      	movs	r3, r7
 8001928:	2200      	movs	r2, #0
 800192a:	709a      	strb	r2, [r3, #2]
  args[3] = 0;
 800192c:	003b      	movs	r3, r7
 800192e:	2200      	movs	r2, #0
 8001930:	70da      	strb	r2, [r3, #3]
  args[4] = 0;
 8001932:	003b      	movs	r3, r7
 8001934:	2200      	movs	r2, #0
 8001936:	711a      	strb	r2, [r3, #4]
  args[5] = 0x95;   /* CRC */
 8001938:	003b      	movs	r3, r7
 800193a:	2295      	movs	r2, #149	; 0x95
 800193c:	715a      	strb	r2, [r3, #5]
  SPI_TxBuffer(args, sizeof(args));
 800193e:	003b      	movs	r3, r7
 8001940:	2106      	movs	r1, #6
 8001942:	0018      	movs	r0, r3
 8001944:	f7ff ff70 	bl	8001828 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8001948:	e002      	b.n	8001950 <SD_PowerOn+0x60>
  {
    cnt--;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3b01      	subs	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8001950:	f7ff ff86 	bl	8001860 <SPI_RxByte>
 8001954:	0003      	movs	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	d002      	beq.n	8001960 <SD_PowerOn+0x70>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f4      	bne.n	800194a <SD_PowerOn+0x5a>
  }
  DESELECT();
 8001960:	f7ff ff43 	bl	80017ea <DESELECT>
  SPI_TxByte(0XFF);
 8001964:	20ff      	movs	r0, #255	; 0xff
 8001966:	f7ff ff45 	bl	80017f4 <SPI_TxByte>
  PowerFlag = 1;
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <SD_PowerOn+0x8c>)
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	b004      	add	sp, #16
 8001976:	bd80      	pop	{r7, pc}
 8001978:	00001fff 	.word	0x00001fff
 800197c:	200000a9 	.word	0x200000a9

08001980 <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001984:	4b02      	ldr	r3, [pc, #8]	; (8001990 <SD_PowerOff+0x10>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200000a9 	.word	0x200000a9

08001994 <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  return PowerFlag;
 8001998:	4b02      	ldr	r3, [pc, #8]	; (80019a4 <SD_CheckPower+0x10>)
 800199a:	781b      	ldrb	r3, [r3, #0]
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	200000a9 	.word	0x200000a9

080019a8 <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80019b2:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <SD_RxDataBlock+0x64>)
 80019b4:	22c8      	movs	r2, #200	; 0xc8
 80019b6:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80019b8:	250f      	movs	r5, #15
 80019ba:	197c      	adds	r4, r7, r5
 80019bc:	f7ff ff50 	bl	8001860 <SPI_RxByte>
 80019c0:	0003      	movs	r3, r0
 80019c2:	7023      	strb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 80019c4:	197b      	adds	r3, r7, r5
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2bff      	cmp	r3, #255	; 0xff
 80019ca:	d103      	bne.n	80019d4 <SD_RxDataBlock+0x2c>
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <SD_RxDataBlock+0x64>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f1      	bne.n	80019b8 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 80019d4:	230f      	movs	r3, #15
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2bfe      	cmp	r3, #254	; 0xfe
 80019dc:	d001      	beq.n	80019e2 <SD_RxDataBlock+0x3a>
 80019de:	2300      	movs	r3, #0
 80019e0:	e00f      	b.n	8001a02 <SD_RxDataBlock+0x5a>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff ff57 	bl	800189c <SPI_RxBytePtr>
  } while(len--);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	1e5a      	subs	r2, r3, #1
 80019f2:	603a      	str	r2, [r7, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f4      	bne.n	80019e2 <SD_RxDataBlock+0x3a>
  /* discard CRC */
  SPI_RxByte();
 80019f8:	f7ff ff32 	bl	8001860 <SPI_RxByte>
  SPI_RxByte();
 80019fc:	f7ff ff30 	bl	8001860 <SPI_RxByte>
  return TRUE;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b004      	add	sp, #16
 8001a08:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	200000a4 	.word	0x200000a4

08001a10 <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	000a      	movs	r2, r1
 8001a1a:	1cfb      	adds	r3, r7, #3
 8001a1c:	701a      	strb	r2, [r3, #0]
  uint8_t resp;
  uint8_t i = 0;
 8001a1e:	230e      	movs	r3, #14
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001a26:	f7ff ff47 	bl	80018b8 <SD_ReadyWait>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	2bff      	cmp	r3, #255	; 0xff
 8001a2e:	d001      	beq.n	8001a34 <SD_TxDataBlock+0x24>
 8001a30:	2300      	movs	r3, #0
 8001a32:	e03c      	b.n	8001aae <SD_TxDataBlock+0x9e>
  /* transmit token */
  SPI_TxByte(token);
 8001a34:	1cfb      	adds	r3, r7, #3
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff fedb 	bl	80017f4 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8001a3e:	1cfb      	adds	r3, r7, #3
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2bfd      	cmp	r3, #253	; 0xfd
 8001a44:	d029      	beq.n	8001a9a <SD_TxDataBlock+0x8a>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	009a      	lsls	r2, r3, #2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	0011      	movs	r1, r2
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f7ff feea 	bl	8001828 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8001a54:	f7ff ff04 	bl	8001860 <SPI_RxByte>
    SPI_RxByte();
 8001a58:	f7ff ff02 	bl	8001860 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8001a5c:	e011      	b.n	8001a82 <SD_TxDataBlock+0x72>
    {
      resp = SPI_RxByte();
 8001a5e:	250f      	movs	r5, #15
 8001a60:	197c      	adds	r4, r7, r5
 8001a62:	f7ff fefd 	bl	8001860 <SPI_RxByte>
 8001a66:	0003      	movs	r3, r0
 8001a68:	7023      	strb	r3, [r4, #0]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001a6a:	197b      	adds	r3, r7, r5
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	221f      	movs	r2, #31
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d00b      	beq.n	8001a8e <SD_TxDataBlock+0x7e>
      i++;
 8001a76:	210e      	movs	r1, #14
 8001a78:	187b      	adds	r3, r7, r1
 8001a7a:	781a      	ldrb	r2, [r3, #0]
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	3201      	adds	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
    while (i <= 64)
 8001a82:	230e      	movs	r3, #14
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b40      	cmp	r3, #64	; 0x40
 8001a8a:	d9e8      	bls.n	8001a5e <SD_TxDataBlock+0x4e>
 8001a8c:	e000      	b.n	8001a90 <SD_TxDataBlock+0x80>
      if ((resp & 0x1F) == 0x05) break;
 8001a8e:	46c0      	nop			; (mov r8, r8)
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	f7ff fee5 	bl	8001860 <SPI_RxByte>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d0fb      	beq.n	8001a92 <SD_TxDataBlock+0x82>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	221f      	movs	r2, #31
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d101      	bne.n	8001aac <SD_TxDataBlock+0x9c>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <SD_TxDataBlock+0x9e>
  return FALSE;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b004      	add	sp, #16
 8001ab4:	bdb0      	pop	{r4, r5, r7, pc}

08001ab6 <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001ab6:	b5b0      	push	{r4, r5, r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	0002      	movs	r2, r0
 8001abe:	6039      	str	r1, [r7, #0]
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	701a      	strb	r2, [r3, #0]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001ac4:	f7ff fef8 	bl	80018b8 <SD_ReadyWait>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	2bff      	cmp	r3, #255	; 0xff
 8001acc:	d001      	beq.n	8001ad2 <SD_SendCmd+0x1c>
 8001ace:	23ff      	movs	r3, #255	; 0xff
 8001ad0:	e059      	b.n	8001b86 <SD_SendCmd+0xd0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f7ff fe8c 	bl	80017f4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	0e1b      	lsrs	r3, r3, #24
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f7ff fe86 	bl	80017f4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	0c1b      	lsrs	r3, r3, #16
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7ff fe80 	bl	80017f4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7ff fe7a 	bl	80017f4 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	0018      	movs	r0, r3
 8001b06:	f7ff fe75 	bl	80017f4 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8001b0a:	1dfb      	adds	r3, r7, #7
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b40      	cmp	r3, #64	; 0x40
 8001b10:	d104      	bne.n	8001b1c <SD_SendCmd+0x66>
 8001b12:	230f      	movs	r3, #15
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	2295      	movs	r2, #149	; 0x95
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	e00c      	b.n	8001b36 <SD_SendCmd+0x80>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8001b1c:	1dfb      	adds	r3, r7, #7
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b48      	cmp	r3, #72	; 0x48
 8001b22:	d104      	bne.n	8001b2e <SD_SendCmd+0x78>
 8001b24:	230f      	movs	r3, #15
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	2287      	movs	r2, #135	; 0x87
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	e003      	b.n	8001b36 <SD_SendCmd+0x80>
  else crc = 1;
 8001b2e:	230f      	movs	r3, #15
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
  /* transmit CRC */
  SPI_TxByte(crc);
 8001b36:	230f      	movs	r3, #15
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7ff fe59 	bl	80017f4 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b4c      	cmp	r3, #76	; 0x4c
 8001b48:	d101      	bne.n	8001b4e <SD_SendCmd+0x98>
 8001b4a:	f7ff fe89 	bl	8001860 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8001b4e:	230e      	movs	r3, #14
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	220a      	movs	r2, #10
 8001b54:	701a      	strb	r2, [r3, #0]
  do {
    res = SPI_RxByte();
 8001b56:	250d      	movs	r5, #13
 8001b58:	197c      	adds	r4, r7, r5
 8001b5a:	f7ff fe81 	bl	8001860 <SPI_RxByte>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	7023      	strb	r3, [r4, #0]
  } while ((res & 0x80) && --n);
 8001b62:	197b      	adds	r3, r7, r5
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b25b      	sxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da09      	bge.n	8001b80 <SD_SendCmd+0xca>
 8001b6c:	210e      	movs	r1, #14
 8001b6e:	187b      	adds	r3, r7, r1
 8001b70:	187a      	adds	r2, r7, r1
 8001b72:	7812      	ldrb	r2, [r2, #0]
 8001b74:	3a01      	subs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1ea      	bne.n	8001b56 <SD_SendCmd+0xa0>
  return res;
 8001b80:	230d      	movs	r3, #13
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	781b      	ldrb	r3, [r3, #0]
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b004      	add	sp, #16
 8001b8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b90 <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001b90:	b5b0      	push	{r4, r5, r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	0002      	movs	r2, r0
 8001b98:	1dfb      	adds	r3, r7, #7
 8001b9a:	701a      	strb	r2, [r3, #0]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8001b9c:	1dfb      	adds	r3, r7, #7
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SD_disk_initialize+0x18>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0f2      	b.n	8001d8e <SD_disk_initialize+0x1fe>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8001ba8:	4b7b      	ldr	r3, [pc, #492]	; (8001d98 <SD_disk_initialize+0x208>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	001a      	movs	r2, r3
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d003      	beq.n	8001bbe <SD_disk_initialize+0x2e>
 8001bb6:	4b78      	ldr	r3, [pc, #480]	; (8001d98 <SD_disk_initialize+0x208>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	e0e7      	b.n	8001d8e <SD_disk_initialize+0x1fe>
  /* power on */
  SD_PowerOn();
 8001bbe:	f7ff fe97 	bl	80018f0 <SD_PowerOn>
  /* slave select */
  SELECT();
 8001bc2:	f7ff fe0d 	bl	80017e0 <SELECT>
  /* check disk type */
  type = 0;
 8001bc6:	230e      	movs	r3, #14
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2040      	movs	r0, #64	; 0x40
 8001bd2:	f7ff ff70 	bl	8001ab6 <SD_SendCmd>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d000      	beq.n	8001bde <SD_disk_initialize+0x4e>
 8001bdc:	e0bc      	b.n	8001d58 <SD_disk_initialize+0x1c8>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8001bde:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <SD_disk_initialize+0x20c>)
 8001be0:	22fa      	movs	r2, #250	; 0xfa
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001be6:	23d5      	movs	r3, #213	; 0xd5
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	0019      	movs	r1, r3
 8001bec:	2048      	movs	r0, #72	; 0x48
 8001bee:	f7ff ff62 	bl	8001ab6 <SD_SendCmd>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d000      	beq.n	8001bfa <SD_disk_initialize+0x6a>
 8001bf8:	e06b      	b.n	8001cd2 <SD_disk_initialize+0x142>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	e00e      	b.n	8001c22 <SD_disk_initialize+0x92>
      {
        ocr[n] = SPI_RxByte();
 8001c04:	250f      	movs	r5, #15
 8001c06:	197b      	adds	r3, r7, r5
 8001c08:	781c      	ldrb	r4, [r3, #0]
 8001c0a:	f7ff fe29 	bl	8001860 <SPI_RxByte>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	001a      	movs	r2, r3
 8001c12:	2308      	movs	r3, #8
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	551a      	strb	r2, [r3, r4]
      for (n = 0; n < 4; n++)
 8001c18:	197b      	adds	r3, r7, r5
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	197b      	adds	r3, r7, r5
 8001c1e:	3201      	adds	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	230f      	movs	r3, #15
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d9eb      	bls.n	8001c04 <SD_disk_initialize+0x74>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	18bb      	adds	r3, r7, r2
 8001c30:	789b      	ldrb	r3, [r3, #2]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d000      	beq.n	8001c38 <SD_disk_initialize+0xa8>
 8001c36:	e08f      	b.n	8001d58 <SD_disk_initialize+0x1c8>
 8001c38:	18bb      	adds	r3, r7, r2
 8001c3a:	78db      	ldrb	r3, [r3, #3]
 8001c3c:	2baa      	cmp	r3, #170	; 0xaa
 8001c3e:	d000      	beq.n	8001c42 <SD_disk_initialize+0xb2>
 8001c40:	e08a      	b.n	8001d58 <SD_disk_initialize+0x1c8>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001c42:	2100      	movs	r1, #0
 8001c44:	2077      	movs	r0, #119	; 0x77
 8001c46:	f7ff ff36 	bl	8001ab6 <SD_SendCmd>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d807      	bhi.n	8001c60 <SD_disk_initialize+0xd0>
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	05db      	lsls	r3, r3, #23
 8001c54:	0019      	movs	r1, r3
 8001c56:	2069      	movs	r0, #105	; 0x69
 8001c58:	f7ff ff2d 	bl	8001ab6 <SD_SendCmd>
 8001c5c:	1e03      	subs	r3, r0, #0
 8001c5e:	d004      	beq.n	8001c6a <SD_disk_initialize+0xda>
        } while (Timer1);
 8001c60:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <SD_disk_initialize+0x20c>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ec      	bne.n	8001c42 <SD_disk_initialize+0xb2>
 8001c68:	e000      	b.n	8001c6c <SD_disk_initialize+0xdc>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001c6a:	46c0      	nop			; (mov r8, r8)
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <SD_disk_initialize+0x20c>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d100      	bne.n	8001c76 <SD_disk_initialize+0xe6>
 8001c74:	e070      	b.n	8001d58 <SD_disk_initialize+0x1c8>
 8001c76:	2100      	movs	r1, #0
 8001c78:	207a      	movs	r0, #122	; 0x7a
 8001c7a:	f7ff ff1c 	bl	8001ab6 <SD_SendCmd>
 8001c7e:	1e03      	subs	r3, r0, #0
 8001c80:	d000      	beq.n	8001c84 <SD_disk_initialize+0xf4>
 8001c82:	e069      	b.n	8001d58 <SD_disk_initialize+0x1c8>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001c84:	230f      	movs	r3, #15
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
 8001c8c:	e00e      	b.n	8001cac <SD_disk_initialize+0x11c>
          {
            ocr[n] = SPI_RxByte();
 8001c8e:	250f      	movs	r5, #15
 8001c90:	197b      	adds	r3, r7, r5
 8001c92:	781c      	ldrb	r4, [r3, #0]
 8001c94:	f7ff fde4 	bl	8001860 <SPI_RxByte>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	001a      	movs	r2, r3
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	551a      	strb	r2, [r3, r4]
          for (n = 0; n < 4; n++)
 8001ca2:	197b      	adds	r3, r7, r5
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	197b      	adds	r3, r7, r5
 8001ca8:	3201      	adds	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	230f      	movs	r3, #15
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d9eb      	bls.n	8001c8e <SD_disk_initialize+0xfe>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	2340      	movs	r3, #64	; 0x40
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d001      	beq.n	8001cc8 <SD_disk_initialize+0x138>
 8001cc4:	220c      	movs	r2, #12
 8001cc6:	e000      	b.n	8001cca <SD_disk_initialize+0x13a>
 8001cc8:	2204      	movs	r2, #4
 8001cca:	230e      	movs	r3, #14
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	e042      	b.n	8001d58 <SD_disk_initialize+0x1c8>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2077      	movs	r0, #119	; 0x77
 8001cd6:	f7ff feee 	bl	8001ab6 <SD_SendCmd>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d808      	bhi.n	8001cf2 <SD_disk_initialize+0x162>
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2069      	movs	r0, #105	; 0x69
 8001ce4:	f7ff fee7 	bl	8001ab6 <SD_SendCmd>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d801      	bhi.n	8001cf2 <SD_disk_initialize+0x162>
 8001cee:	2202      	movs	r2, #2
 8001cf0:	e000      	b.n	8001cf4 <SD_disk_initialize+0x164>
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	230e      	movs	r3, #14
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	701a      	strb	r2, [r3, #0]
      do
      {
        if (type == CT_SD1)
 8001cfa:	230e      	movs	r3, #14
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d10d      	bne.n	8001d20 <SD_disk_initialize+0x190>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001d04:	2100      	movs	r1, #0
 8001d06:	2077      	movs	r0, #119	; 0x77
 8001d08:	f7ff fed5 	bl	8001ab6 <SD_SendCmd>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d80c      	bhi.n	8001d2c <SD_disk_initialize+0x19c>
 8001d12:	2100      	movs	r1, #0
 8001d14:	2069      	movs	r0, #105	; 0x69
 8001d16:	f7ff fece 	bl	8001ab6 <SD_SendCmd>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d106      	bne.n	8001d2c <SD_disk_initialize+0x19c>
 8001d1e:	e00b      	b.n	8001d38 <SD_disk_initialize+0x1a8>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001d20:	2100      	movs	r1, #0
 8001d22:	2041      	movs	r0, #65	; 0x41
 8001d24:	f7ff fec7 	bl	8001ab6 <SD_SendCmd>
 8001d28:	1e03      	subs	r3, r0, #0
 8001d2a:	d004      	beq.n	8001d36 <SD_disk_initialize+0x1a6>
        }
      } while (Timer1);
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <SD_disk_initialize+0x20c>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1e2      	bne.n	8001cfa <SD_disk_initialize+0x16a>
 8001d34:	e000      	b.n	8001d38 <SD_disk_initialize+0x1a8>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001d36:	46c0      	nop			; (mov r8, r8)
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001d38:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <SD_disk_initialize+0x20c>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <SD_disk_initialize+0x1c0>
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	0019      	movs	r1, r3
 8001d46:	2050      	movs	r0, #80	; 0x50
 8001d48:	f7ff feb5 	bl	8001ab6 <SD_SendCmd>
 8001d4c:	1e03      	subs	r3, r0, #0
 8001d4e:	d003      	beq.n	8001d58 <SD_disk_initialize+0x1c8>
 8001d50:	230e      	movs	r3, #14
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
    }
  }
  CardType = type;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <SD_disk_initialize+0x210>)
 8001d5a:	240e      	movs	r4, #14
 8001d5c:	193a      	adds	r2, r7, r4
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	701a      	strb	r2, [r3, #0]
  /* Idle */
  DESELECT();
 8001d62:	f7ff fd42 	bl	80017ea <DESELECT>
  SPI_RxByte();
 8001d66:	f7ff fd7b 	bl	8001860 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8001d6a:	193b      	adds	r3, r7, r4
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d008      	beq.n	8001d84 <SD_disk_initialize+0x1f4>
  {
    Stat &= ~STA_NOINIT;
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <SD_disk_initialize+0x208>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4393      	bics	r3, r2
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <SD_disk_initialize+0x208>)
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e001      	b.n	8001d88 <SD_disk_initialize+0x1f8>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001d84:	f7ff fdfc 	bl	8001980 <SD_PowerOff>
  }
  return Stat;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <SD_disk_initialize+0x208>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b2db      	uxtb	r3, r3
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b004      	add	sp, #16
 8001d94:	bdb0      	pop	{r4, r5, r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	200000a4 	.word	0x200000a4
 8001da0:	200000a8 	.word	0x200000a8

08001da4 <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	0002      	movs	r2, r0
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	701a      	strb	r2, [r3, #0]
  if (drv) return STA_NOINIT;
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <SD_disk_status+0x18>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e002      	b.n	8001dc2 <SD_disk_status+0x1e>
  return Stat;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <SD_disk_status+0x28>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b2db      	uxtb	r3, r3
}
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b002      	add	sp, #8
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	210f      	movs	r1, #15
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	1c02      	adds	r2, r0, #0
 8001de2:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001de4:	187b      	adds	r3, r7, r1
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <SD_disk_read+0x22>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <SD_disk_read+0x26>
 8001df2:	2304      	movs	r3, #4
 8001df4:	e053      	b.n	8001e9e <SD_disk_read+0xce>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001df6:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <SD_disk_read+0xd8>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	2301      	movs	r3, #1
 8001e00:	4013      	ands	r3, r2
 8001e02:	d001      	beq.n	8001e08 <SD_disk_read+0x38>
 8001e04:	2303      	movs	r3, #3
 8001e06:	e04a      	b.n	8001e9e <SD_disk_read+0xce>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001e08:	4b28      	ldr	r3, [pc, #160]	; (8001eac <SD_disk_read+0xdc>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	001a      	movs	r2, r3
 8001e0e:	2304      	movs	r3, #4
 8001e10:	4013      	ands	r3, r2
 8001e12:	d102      	bne.n	8001e1a <SD_disk_read+0x4a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	025b      	lsls	r3, r3, #9
 8001e18:	607b      	str	r3, [r7, #4]
  SELECT();
 8001e1a:	f7ff fce1 	bl	80017e0 <SELECT>
  if (count == 1)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d112      	bne.n	8001e4a <SD_disk_read+0x7a>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	0019      	movs	r1, r3
 8001e28:	2051      	movs	r0, #81	; 0x51
 8001e2a:	f7ff fe44 	bl	8001ab6 <SD_SendCmd>
 8001e2e:	1e03      	subs	r3, r0, #0
 8001e30:	d12d      	bne.n	8001e8e <SD_disk_read+0xbe>
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	009a      	lsls	r2, r3, #2
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	0011      	movs	r1, r2
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f7ff fdb4 	bl	80019a8 <SD_RxDataBlock>
 8001e40:	1e03      	subs	r3, r0, #0
 8001e42:	d024      	beq.n	8001e8e <SD_disk_read+0xbe>
 8001e44:	2300      	movs	r3, #0
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	e021      	b.n	8001e8e <SD_disk_read+0xbe>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	2052      	movs	r0, #82	; 0x52
 8001e50:	f7ff fe31 	bl	8001ab6 <SD_SendCmd>
 8001e54:	1e03      	subs	r3, r0, #0
 8001e56:	d11a      	bne.n	8001e8e <SD_disk_read+0xbe>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	009a      	lsls	r2, r3, #2
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	0011      	movs	r1, r2
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7ff fda1 	bl	80019a8 <SD_RxDataBlock>
 8001e66:	1e03      	subs	r3, r0, #0
 8001e68:	d00c      	beq.n	8001e84 <SD_disk_read+0xb4>
        buff += 512;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	4694      	mov	ip, r2
 8001e72:	4463      	add	r3, ip
 8001e74:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ea      	bne.n	8001e58 <SD_disk_read+0x88>
 8001e82:	e000      	b.n	8001e86 <SD_disk_read+0xb6>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001e84:	46c0      	nop			; (mov r8, r8)
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001e86:	2100      	movs	r1, #0
 8001e88:	204c      	movs	r0, #76	; 0x4c
 8001e8a:	f7ff fe14 	bl	8001ab6 <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 8001e8e:	f7ff fcac 	bl	80017ea <DESELECT>
  SPI_RxByte();
 8001e92:	f7ff fce5 	bl	8001860 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	4193      	sbcs	r3, r2
 8001e9c:	b2db      	uxtb	r3, r3
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b004      	add	sp, #16
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	200000a8 	.word	0x200000a8

08001eb0 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	210f      	movs	r1, #15
 8001ebe:	187b      	adds	r3, r7, r1
 8001ec0:	1c02      	adds	r2, r0, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <SD_disk_write+0x22>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <SD_disk_write+0x26>
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	e06b      	b.n	8001fae <SD_disk_write+0xfe>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <SD_disk_write+0x108>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	001a      	movs	r2, r3
 8001ede:	2301      	movs	r3, #1
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d001      	beq.n	8001ee8 <SD_disk_write+0x38>
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e062      	b.n	8001fae <SD_disk_write+0xfe>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <SD_disk_write+0x108>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	001a      	movs	r2, r3
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d001      	beq.n	8001efa <SD_disk_write+0x4a>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e059      	b.n	8001fae <SD_disk_write+0xfe>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <SD_disk_write+0x10c>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	001a      	movs	r2, r3
 8001f00:	2304      	movs	r3, #4
 8001f02:	4013      	ands	r3, r2
 8001f04:	d102      	bne.n	8001f0c <SD_disk_write+0x5c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	025b      	lsls	r3, r3, #9
 8001f0a:	607b      	str	r3, [r7, #4]
  SELECT();
 8001f0c:	f7ff fc68 	bl	80017e0 <SELECT>
  if (count == 1)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d110      	bne.n	8001f38 <SD_disk_write+0x88>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	0019      	movs	r1, r3
 8001f1a:	2058      	movs	r0, #88	; 0x58
 8001f1c:	f7ff fdcb 	bl	8001ab6 <SD_SendCmd>
 8001f20:	1e03      	subs	r3, r0, #0
 8001f22:	d13c      	bne.n	8001f9e <SD_disk_write+0xee>
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	21fe      	movs	r1, #254	; 0xfe
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff fd71 	bl	8001a10 <SD_TxDataBlock>
 8001f2e:	1e03      	subs	r3, r0, #0
 8001f30:	d035      	beq.n	8001f9e <SD_disk_write+0xee>
      count = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	e032      	b.n	8001f9e <SD_disk_write+0xee>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <SD_disk_write+0x10c>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	2302      	movs	r3, #2
 8001f40:	4013      	ands	r3, r2
 8001f42:	d008      	beq.n	8001f56 <SD_disk_write+0xa6>
    {
      SD_SendCmd(CMD55, 0);
 8001f44:	2100      	movs	r1, #0
 8001f46:	2077      	movs	r0, #119	; 0x77
 8001f48:	f7ff fdb5 	bl	8001ab6 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	0019      	movs	r1, r3
 8001f50:	2057      	movs	r0, #87	; 0x57
 8001f52:	f7ff fdb0 	bl	8001ab6 <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0019      	movs	r1, r3
 8001f5a:	2059      	movs	r0, #89	; 0x59
 8001f5c:	f7ff fdab 	bl	8001ab6 <SD_SendCmd>
 8001f60:	1e03      	subs	r3, r0, #0
 8001f62:	d11c      	bne.n	8001f9e <SD_disk_write+0xee>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	21fc      	movs	r1, #252	; 0xfc
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7ff fd51 	bl	8001a10 <SD_TxDataBlock>
 8001f6e:	1e03      	subs	r3, r0, #0
 8001f70:	d00c      	beq.n	8001f8c <SD_disk_write+0xdc>
        buff += 512;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2280      	movs	r2, #128	; 0x80
 8001f76:	0092      	lsls	r2, r2, #2
 8001f78:	4694      	mov	ip, r2
 8001f7a:	4463      	add	r3, ip
 8001f7c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ec      	bne.n	8001f64 <SD_disk_write+0xb4>
 8001f8a:	e000      	b.n	8001f8e <SD_disk_write+0xde>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001f8c:	46c0      	nop			; (mov r8, r8)
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001f8e:	21fd      	movs	r1, #253	; 0xfd
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff fd3d 	bl	8001a10 <SD_TxDataBlock>
 8001f96:	1e03      	subs	r3, r0, #0
 8001f98:	d101      	bne.n	8001f9e <SD_disk_write+0xee>
      {
        count = 1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 8001f9e:	f7ff fc24 	bl	80017ea <DESELECT>
  SPI_RxByte();
 8001fa2:	f7ff fc5d 	bl	8001860 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	4193      	sbcs	r3, r2
 8001fac:	b2db      	uxtb	r3, r3
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b004      	add	sp, #16
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	200000a8 	.word	0x200000a8

08001fc0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b08b      	sub	sp, #44	; 0x2c
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	603a      	str	r2, [r7, #0]
 8001fc8:	1dfb      	adds	r3, r7, #7
 8001fca:	1c02      	adds	r2, r0, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	1dbb      	adds	r3, r7, #6
 8001fd0:	1c0a      	adds	r2, r1, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001fd8:	1dfb      	adds	r3, r7, #7
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <SD_disk_ioctl+0x24>
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	e11b      	b.n	800221c <SD_disk_ioctl+0x25c>
  res = RES_ERROR;
 8001fe4:	2327      	movs	r3, #39	; 0x27
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
  if (ctrl == CTRL_POWER)
 8001fec:	1dbb      	adds	r3, r7, #6
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d127      	bne.n	8002044 <SD_disk_ioctl+0x84>
  {
    switch (*ptr)
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d013      	beq.n	8002024 <SD_disk_ioctl+0x64>
 8001ffc:	dc1d      	bgt.n	800203a <SD_disk_ioctl+0x7a>
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <SD_disk_ioctl+0x48>
 8002002:	2b01      	cmp	r3, #1
 8002004:	d007      	beq.n	8002016 <SD_disk_ioctl+0x56>
 8002006:	e018      	b.n	800203a <SD_disk_ioctl+0x7a>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8002008:	f7ff fcba 	bl	8001980 <SD_PowerOff>
      res = RES_OK;
 800200c:	2327      	movs	r3, #39	; 0x27
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
      break;
 8002014:	e0ff      	b.n	8002216 <SD_disk_ioctl+0x256>
    case 1:
      SD_PowerOn();   /* Power On */
 8002016:	f7ff fc6b 	bl	80018f0 <SD_PowerOn>
      res = RES_OK;
 800201a:	2327      	movs	r3, #39	; 0x27
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
      break;
 8002022:	e0f8      	b.n	8002216 <SD_disk_ioctl+0x256>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	1c5c      	adds	r4, r3, #1
 8002028:	f7ff fcb4 	bl	8001994 <SD_CheckPower>
 800202c:	0003      	movs	r3, r0
 800202e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8002030:	2327      	movs	r3, #39	; 0x27
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
      break;
 8002038:	e0ed      	b.n	8002216 <SD_disk_ioctl+0x256>
    default:
      res = RES_PARERR;
 800203a:	2327      	movs	r3, #39	; 0x27
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	2204      	movs	r2, #4
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	e0e8      	b.n	8002216 <SD_disk_ioctl+0x256>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002044:	4b77      	ldr	r3, [pc, #476]	; (8002224 <SD_disk_ioctl+0x264>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	001a      	movs	r2, r3
 800204c:	2301      	movs	r3, #1
 800204e:	4013      	ands	r3, r2
 8002050:	d001      	beq.n	8002056 <SD_disk_ioctl+0x96>
 8002052:	2303      	movs	r3, #3
 8002054:	e0e2      	b.n	800221c <SD_disk_ioctl+0x25c>
    SELECT();
 8002056:	f7ff fbc3 	bl	80017e0 <SELECT>
    switch (ctrl)
 800205a:	1dbb      	adds	r3, r7, #6
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b0d      	cmp	r3, #13
 8002060:	d900      	bls.n	8002064 <SD_disk_ioctl+0xa4>
 8002062:	e0c8      	b.n	80021f6 <SD_disk_ioctl+0x236>
 8002064:	009a      	lsls	r2, r3, #2
 8002066:	4b70      	ldr	r3, [pc, #448]	; (8002228 <SD_disk_ioctl+0x268>)
 8002068:	18d3      	adds	r3, r2, r3
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	469f      	mov	pc, r3
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800206e:	2100      	movs	r1, #0
 8002070:	2049      	movs	r0, #73	; 0x49
 8002072:	f7ff fd20 	bl	8001ab6 <SD_SendCmd>
 8002076:	1e03      	subs	r3, r0, #0
 8002078:	d000      	beq.n	800207c <SD_disk_ioctl+0xbc>
 800207a:	e0c1      	b.n	8002200 <SD_disk_ioctl+0x240>
 800207c:	240c      	movs	r4, #12
 800207e:	193b      	adds	r3, r7, r4
 8002080:	2110      	movs	r1, #16
 8002082:	0018      	movs	r0, r3
 8002084:	f7ff fc90 	bl	80019a8 <SD_RxDataBlock>
 8002088:	1e03      	subs	r3, r0, #0
 800208a:	d100      	bne.n	800208e <SD_disk_ioctl+0xce>
 800208c:	e0b8      	b.n	8002200 <SD_disk_ioctl+0x240>
      {
        if ((csd[0] >> 6) == 1)
 800208e:	0022      	movs	r2, r4
 8002090:	18bb      	adds	r3, r7, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d114      	bne.n	80020c6 <SD_disk_ioctl+0x106>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800209c:	0011      	movs	r1, r2
 800209e:	18bb      	adds	r3, r7, r2
 80020a0:	7a5b      	ldrb	r3, [r3, #9]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	7a1b      	ldrb	r3, [r3, #8]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	18d3      	adds	r3, r2, r3
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	211e      	movs	r1, #30
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	3201      	adds	r2, #1
 80020b8:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << 10;
 80020ba:	187b      	adds	r3, r7, r1
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	029a      	lsls	r2, r3, #10
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e03a      	b.n	800213c <SD_disk_ioctl+0x17c>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80020c6:	200c      	movs	r0, #12
 80020c8:	183b      	adds	r3, r7, r0
 80020ca:	795b      	ldrb	r3, [r3, #5]
 80020cc:	220f      	movs	r2, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	183b      	adds	r3, r7, r0
 80020d4:	7a9b      	ldrb	r3, [r3, #10]
 80020d6:	09db      	lsrs	r3, r3, #7
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	18d3      	adds	r3, r2, r3
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	183b      	adds	r3, r7, r0
 80020e0:	7a5b      	ldrb	r3, [r3, #9]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2106      	movs	r1, #6
 80020e8:	400b      	ands	r3, r1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	18d3      	adds	r3, r2, r3
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	2426      	movs	r4, #38	; 0x26
 80020f2:	193b      	adds	r3, r7, r4
 80020f4:	3202      	adds	r2, #2
 80020f6:	701a      	strb	r2, [r3, #0]
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80020f8:	183b      	adds	r3, r7, r0
 80020fa:	7a1b      	ldrb	r3, [r3, #8]
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	b29a      	uxth	r2, r3
 8002102:	183b      	adds	r3, r7, r0
 8002104:	79db      	ldrb	r3, [r3, #7]
 8002106:	b29b      	uxth	r3, r3
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	b29b      	uxth	r3, r3
 800210c:	18d3      	adds	r3, r2, r3
 800210e:	b29a      	uxth	r2, r3
 8002110:	183b      	adds	r3, r7, r0
 8002112:	799b      	ldrb	r3, [r3, #6]
 8002114:	029b      	lsls	r3, r3, #10
 8002116:	b299      	uxth	r1, r3
 8002118:	23c0      	movs	r3, #192	; 0xc0
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	400b      	ands	r3, r1
 800211e:	b29b      	uxth	r3, r3
 8002120:	18d3      	adds	r3, r2, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	211e      	movs	r1, #30
 8002126:	187b      	adds	r3, r7, r1
 8002128:	3201      	adds	r2, #1
 800212a:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800212c:	187b      	adds	r3, r7, r1
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	193b      	adds	r3, r7, r4
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	3b09      	subs	r3, #9
 8002136:	409a      	lsls	r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800213c:	2327      	movs	r3, #39	; 0x27
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002144:	e05c      	b.n	8002200 <SD_disk_ioctl+0x240>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2280      	movs	r2, #128	; 0x80
 800214a:	0092      	lsls	r2, r2, #2
 800214c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800214e:	2327      	movs	r3, #39	; 0x27
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
      break;
 8002156:	e05a      	b.n	800220e <SD_disk_ioctl+0x24e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002158:	f7ff fbae 	bl	80018b8 <SD_ReadyWait>
 800215c:	0003      	movs	r3, r0
 800215e:	2bff      	cmp	r3, #255	; 0xff
 8002160:	d150      	bne.n	8002204 <SD_disk_ioctl+0x244>
 8002162:	2327      	movs	r3, #39	; 0x27
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
      break;
 800216a:	e04b      	b.n	8002204 <SD_disk_ioctl+0x244>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800216c:	2100      	movs	r1, #0
 800216e:	2049      	movs	r0, #73	; 0x49
 8002170:	f7ff fca1 	bl	8001ab6 <SD_SendCmd>
 8002174:	1e03      	subs	r3, r0, #0
 8002176:	d147      	bne.n	8002208 <SD_disk_ioctl+0x248>
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	2110      	movs	r1, #16
 800217c:	0018      	movs	r0, r3
 800217e:	f7ff fc13 	bl	80019a8 <SD_RxDataBlock>
 8002182:	1e03      	subs	r3, r0, #0
 8002184:	d040      	beq.n	8002208 <SD_disk_ioctl+0x248>
 8002186:	2327      	movs	r3, #39	; 0x27
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
      break;
 800218e:	e03b      	b.n	8002208 <SD_disk_ioctl+0x248>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002190:	2100      	movs	r1, #0
 8002192:	204a      	movs	r0, #74	; 0x4a
 8002194:	f7ff fc8f 	bl	8001ab6 <SD_SendCmd>
 8002198:	1e03      	subs	r3, r0, #0
 800219a:	d137      	bne.n	800220c <SD_disk_ioctl+0x24c>
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	2110      	movs	r1, #16
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff fc01 	bl	80019a8 <SD_RxDataBlock>
 80021a6:	1e03      	subs	r3, r0, #0
 80021a8:	d030      	beq.n	800220c <SD_disk_ioctl+0x24c>
 80021aa:	2327      	movs	r3, #39	; 0x27
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
      break;
 80021b2:	e02b      	b.n	800220c <SD_disk_ioctl+0x24c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80021b4:	2100      	movs	r1, #0
 80021b6:	207a      	movs	r0, #122	; 0x7a
 80021b8:	f7ff fc7d 	bl	8001ab6 <SD_SendCmd>
 80021bc:	1e03      	subs	r3, r0, #0
 80021be:	d11a      	bne.n	80021f6 <SD_disk_ioctl+0x236>
      {
        for (n = 0; n < 4; n++)
 80021c0:	2326      	movs	r3, #38	; 0x26
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	e00c      	b.n	80021e4 <SD_disk_ioctl+0x224>
        {
          *ptr++ = SPI_RxByte();
 80021ca:	6a3c      	ldr	r4, [r7, #32]
 80021cc:	1c63      	adds	r3, r4, #1
 80021ce:	623b      	str	r3, [r7, #32]
 80021d0:	f7ff fb46 	bl	8001860 <SPI_RxByte>
 80021d4:	0003      	movs	r3, r0
 80021d6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80021d8:	2126      	movs	r1, #38	; 0x26
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	3201      	adds	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	2326      	movs	r3, #38	; 0x26
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d9ed      	bls.n	80021ca <SD_disk_ioctl+0x20a>
        }
        res = RES_OK;
 80021ee:	2327      	movs	r3, #39	; 0x27
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
      }
    default:
      res = RES_PARERR;
 80021f6:	2327      	movs	r3, #39	; 0x27
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	2204      	movs	r2, #4
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	e006      	b.n	800220e <SD_disk_ioctl+0x24e>
      break;
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	e004      	b.n	800220e <SD_disk_ioctl+0x24e>
      break;
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	e002      	b.n	800220e <SD_disk_ioctl+0x24e>
      break;
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	e000      	b.n	800220e <SD_disk_ioctl+0x24e>
      break;
 800220c:	46c0      	nop			; (mov r8, r8)
    }
    DESELECT();
 800220e:	f7ff faec 	bl	80017ea <DESELECT>
    SPI_RxByte();
 8002212:	f7ff fb25 	bl	8001860 <SPI_RxByte>
  }
  return res;
 8002216:	2327      	movs	r3, #39	; 0x27
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	781b      	ldrb	r3, [r3, #0]
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	b00b      	add	sp, #44	; 0x2c
 8002222:	bd90      	pop	{r4, r7, pc}
 8002224:	20000000 	.word	0x20000000
 8002228:	08008298 	.word	0x08008298

0800222c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002230:	f000 fcb0 	bl	8002b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002234:	f000 f83d 	bl	80022b2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002238:	f000 f9e4 	bl	8002604 <MX_GPIO_Init>
  MX_ADC_Init();
 800223c:	f000 f8a0 	bl	8002380 <MX_ADC_Init>
  MX_SPI1_Init();
 8002240:	f000 f96c 	bl	800251c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002244:	f000 f9a8 	bl	8002598 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8002248:	f003 f962 	bl	8005510 <MX_FATFS_Init>
  MX_I2C2_Init();
 800224c:	f000 f926 	bl	800249c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	0059      	lsls	r1, r3, #1
 8002254:	2390      	movs	r3, #144	; 0x90
 8002256:	05db      	lsls	r3, r3, #23
 8002258:	2200      	movs	r2, #0
 800225a:	0018      	movs	r0, r3
 800225c:	f001 f97c 	bl	8003558 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002260:	20c8      	movs	r0, #200	; 0xc8
 8002262:	f000 fcfb 	bl	8002c5c <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	0059      	lsls	r1, r3, #1
 800226a:	2390      	movs	r3, #144	; 0x90
 800226c:	05db      	lsls	r3, r3, #23
 800226e:	2201      	movs	r2, #1
 8002270:	0018      	movs	r0, r3
 8002272:	f001 f971 	bl	8003558 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002276:	20c8      	movs	r0, #200	; 0xc8
 8002278:	f000 fcf0 	bl	8002c5c <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	0059      	lsls	r1, r3, #1
 8002280:	2390      	movs	r3, #144	; 0x90
 8002282:	05db      	lsls	r3, r3, #23
 8002284:	2200      	movs	r2, #0
 8002286:	0018      	movs	r0, r3
 8002288:	f001 f966 	bl	8003558 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800228c:	20c8      	movs	r0, #200	; 0xc8
 800228e:	f000 fce5 	bl	8002c5c <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	0059      	lsls	r1, r3, #1
 8002296:	2390      	movs	r3, #144	; 0x90
 8002298:	05db      	lsls	r3, r3, #23
 800229a:	2201      	movs	r2, #1
 800229c:	0018      	movs	r0, r3
 800229e:	f001 f95b 	bl	8003558 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80022a2:	20c8      	movs	r0, #200	; 0xc8
 80022a4:	f000 fcda 	bl	8002c5c <HAL_Delay>

	app_init();
 80022a8:	f003 f9ae 	bl	8005608 <app_init>
	app_loop();
 80022ac:	f003 fd2e 	bl	8005d0c <app_loop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <main+0x84>

080022b2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022b2:	b590      	push	{r4, r7, lr}
 80022b4:	b095      	sub	sp, #84	; 0x54
 80022b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b8:	2420      	movs	r4, #32
 80022ba:	193b      	adds	r3, r7, r4
 80022bc:	0018      	movs	r0, r3
 80022be:	2330      	movs	r3, #48	; 0x30
 80022c0:	001a      	movs	r2, r3
 80022c2:	2100      	movs	r1, #0
 80022c4:	f004 ffb5 	bl	8007232 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c8:	2310      	movs	r3, #16
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	0018      	movs	r0, r3
 80022ce:	2310      	movs	r3, #16
 80022d0:	001a      	movs	r2, r3
 80022d2:	2100      	movs	r1, #0
 80022d4:	f004 ffad 	bl	8007232 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022d8:	003b      	movs	r3, r7
 80022da:	0018      	movs	r0, r3
 80022dc:	2310      	movs	r3, #16
 80022de:	001a      	movs	r2, r3
 80022e0:	2100      	movs	r1, #0
 80022e2:	f004 ffa6 	bl	8007232 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80022e6:	0021      	movs	r1, r4
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	2212      	movs	r2, #18
 80022ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ee:	187b      	adds	r3, r7, r1
 80022f0:	2201      	movs	r2, #1
 80022f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	2201      	movs	r2, #1
 80022f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022fa:	187b      	adds	r3, r7, r1
 80022fc:	2210      	movs	r2, #16
 80022fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002300:	187b      	adds	r3, r7, r1
 8002302:	2210      	movs	r2, #16
 8002304:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002306:	187b      	adds	r3, r7, r1
 8002308:	2202      	movs	r2, #2
 800230a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800230c:	187b      	adds	r3, r7, r1
 800230e:	2200      	movs	r2, #0
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002312:	187b      	adds	r3, r7, r1
 8002314:	22a0      	movs	r2, #160	; 0xa0
 8002316:	0392      	lsls	r2, r2, #14
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800231a:	187b      	adds	r3, r7, r1
 800231c:	2200      	movs	r2, #0
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002320:	187b      	adds	r3, r7, r1
 8002322:	0018      	movs	r0, r3
 8002324:	f001 fa64 	bl	80037f0 <HAL_RCC_OscConfig>
 8002328:	1e03      	subs	r3, r0, #0
 800232a:	d001      	beq.n	8002330 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800232c:	f000 fa48 	bl	80027c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002330:	2110      	movs	r1, #16
 8002332:	187b      	adds	r3, r7, r1
 8002334:	2207      	movs	r2, #7
 8002336:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002338:	187b      	adds	r3, r7, r1
 800233a:	2202      	movs	r2, #2
 800233c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800233e:	187b      	adds	r3, r7, r1
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002344:	187b      	adds	r3, r7, r1
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800234a:	187b      	adds	r3, r7, r1
 800234c:	2101      	movs	r1, #1
 800234e:	0018      	movs	r0, r3
 8002350:	f001 fd68 	bl	8003e24 <HAL_RCC_ClockConfig>
 8002354:	1e03      	subs	r3, r0, #0
 8002356:	d001      	beq.n	800235c <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002358:	f000 fa32 	bl	80027c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800235c:	003b      	movs	r3, r7
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002362:	003b      	movs	r3, r7
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002368:	003b      	movs	r3, r7
 800236a:	0018      	movs	r0, r3
 800236c:	f001 feac 	bl	80040c8 <HAL_RCCEx_PeriphCLKConfig>
 8002370:	1e03      	subs	r3, r0, #0
 8002372:	d001      	beq.n	8002378 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002374:	f000 fa24 	bl	80027c0 <Error_Handler>
  }
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b015      	add	sp, #84	; 0x54
 800237e:	bd90      	pop	{r4, r7, pc}

08002380 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	0018      	movs	r0, r3
 800238a:	230c      	movs	r3, #12
 800238c:	001a      	movs	r2, r3
 800238e:	2100      	movs	r1, #0
 8002390:	f004 ff4f 	bl	8007232 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002394:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <MX_ADC_Init+0x114>)
 8002396:	4a40      	ldr	r2, [pc, #256]	; (8002498 <MX_ADC_Init+0x118>)
 8002398:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800239a:	4b3e      	ldr	r3, [pc, #248]	; (8002494 <MX_ADC_Init+0x114>)
 800239c:	2200      	movs	r2, #0
 800239e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80023a0:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <MX_ADC_Init+0x114>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023a6:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <MX_ADC_Init+0x114>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80023ac:	4b39      	ldr	r3, [pc, #228]	; (8002494 <MX_ADC_Init+0x114>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023b2:	4b38      	ldr	r3, [pc, #224]	; (8002494 <MX_ADC_Init+0x114>)
 80023b4:	2204      	movs	r2, #4
 80023b6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80023b8:	4b36      	ldr	r3, [pc, #216]	; (8002494 <MX_ADC_Init+0x114>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80023be:	4b35      	ldr	r3, [pc, #212]	; (8002494 <MX_ADC_Init+0x114>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80023c4:	4b33      	ldr	r3, [pc, #204]	; (8002494 <MX_ADC_Init+0x114>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80023ca:	4b32      	ldr	r3, [pc, #200]	; (8002494 <MX_ADC_Init+0x114>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023d0:	4b30      	ldr	r3, [pc, #192]	; (8002494 <MX_ADC_Init+0x114>)
 80023d2:	22c2      	movs	r2, #194	; 0xc2
 80023d4:	32ff      	adds	r2, #255	; 0xff
 80023d6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023d8:	4b2e      	ldr	r3, [pc, #184]	; (8002494 <MX_ADC_Init+0x114>)
 80023da:	2200      	movs	r2, #0
 80023dc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80023de:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <MX_ADC_Init+0x114>)
 80023e0:	2224      	movs	r2, #36	; 0x24
 80023e2:	2100      	movs	r1, #0
 80023e4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023e6:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <MX_ADC_Init+0x114>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <MX_ADC_Init+0x114>)
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 fc58 	bl	8002ca4 <HAL_ADC_Init>
 80023f4:	1e03      	subs	r3, r0, #0
 80023f6:	d001      	beq.n	80023fc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80023f8:	f000 f9e2 	bl	80027c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2280      	movs	r2, #128	; 0x80
 8002406:	0152      	lsls	r2, r2, #5
 8002408:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2203      	movs	r2, #3
 800240e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002410:	1d3a      	adds	r2, r7, #4
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <MX_ADC_Init+0x114>)
 8002414:	0011      	movs	r1, r2
 8002416:	0018      	movs	r0, r3
 8002418:	f000 fd84 	bl	8002f24 <HAL_ADC_ConfigChannel>
 800241c:	1e03      	subs	r3, r0, #0
 800241e:	d001      	beq.n	8002424 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002420:	f000 f9ce 	bl	80027c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800242a:	1d3a      	adds	r2, r7, #4
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <MX_ADC_Init+0x114>)
 800242e:	0011      	movs	r1, r2
 8002430:	0018      	movs	r0, r3
 8002432:	f000 fd77 	bl	8002f24 <HAL_ADC_ConfigChannel>
 8002436:	1e03      	subs	r3, r0, #0
 8002438:	d001      	beq.n	800243e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800243a:	f000 f9c1 	bl	80027c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	2202      	movs	r2, #2
 8002442:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002444:	1d3a      	adds	r2, r7, #4
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <MX_ADC_Init+0x114>)
 8002448:	0011      	movs	r1, r2
 800244a:	0018      	movs	r0, r3
 800244c:	f000 fd6a 	bl	8002f24 <HAL_ADC_ConfigChannel>
 8002450:	1e03      	subs	r3, r0, #0
 8002452:	d001      	beq.n	8002458 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8002454:	f000 f9b4 	bl	80027c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2203      	movs	r2, #3
 800245c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800245e:	1d3a      	adds	r2, r7, #4
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <MX_ADC_Init+0x114>)
 8002462:	0011      	movs	r1, r2
 8002464:	0018      	movs	r0, r3
 8002466:	f000 fd5d 	bl	8002f24 <HAL_ADC_ConfigChannel>
 800246a:	1e03      	subs	r3, r0, #0
 800246c:	d001      	beq.n	8002472 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800246e:	f000 f9a7 	bl	80027c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	2204      	movs	r2, #4
 8002476:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002478:	1d3a      	adds	r2, r7, #4
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <MX_ADC_Init+0x114>)
 800247c:	0011      	movs	r1, r2
 800247e:	0018      	movs	r0, r3
 8002480:	f000 fd50 	bl	8002f24 <HAL_ADC_ConfigChannel>
 8002484:	1e03      	subs	r3, r0, #0
 8002486:	d001      	beq.n	800248c <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8002488:	f000 f99a 	bl	80027c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800248c:	46c0      	nop			; (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b004      	add	sp, #16
 8002492:	bd80      	pop	{r7, pc}
 8002494:	200000ac 	.word	0x200000ac
 8002498:	40012400 	.word	0x40012400

0800249c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <MX_I2C2_Init+0x74>)
 80024a2:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <MX_I2C2_Init+0x78>)
 80024a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <MX_I2C2_Init+0x74>)
 80024a8:	4a1b      	ldr	r2, [pc, #108]	; (8002518 <MX_I2C2_Init+0x7c>)
 80024aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <MX_I2C2_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <MX_I2C2_Init+0x74>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <MX_I2C2_Init+0x74>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <MX_I2C2_Init+0x74>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <MX_I2C2_Init+0x74>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <MX_I2C2_Init+0x74>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <MX_I2C2_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <MX_I2C2_Init+0x74>)
 80024d8:	0018      	movs	r0, r3
 80024da:	f001 f85b 	bl	8003594 <HAL_I2C_Init>
 80024de:	1e03      	subs	r3, r0, #0
 80024e0:	d001      	beq.n	80024e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80024e2:	f000 f96d 	bl	80027c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <MX_I2C2_Init+0x74>)
 80024e8:	2100      	movs	r1, #0
 80024ea:	0018      	movs	r0, r3
 80024ec:	f001 f8e8 	bl	80036c0 <HAL_I2CEx_ConfigAnalogFilter>
 80024f0:	1e03      	subs	r3, r0, #0
 80024f2:	d001      	beq.n	80024f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80024f4:	f000 f964 	bl	80027c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <MX_I2C2_Init+0x74>)
 80024fa:	2100      	movs	r1, #0
 80024fc:	0018      	movs	r0, r3
 80024fe:	f001 f92b 	bl	8003758 <HAL_I2CEx_ConfigDigitalFilter>
 8002502:	1e03      	subs	r3, r0, #0
 8002504:	d001      	beq.n	800250a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002506:	f000 f95b 	bl	80027c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200000ec 	.word	0x200000ec
 8002514:	40005800 	.word	0x40005800
 8002518:	20303e5d 	.word	0x20303e5d

0800251c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <MX_SPI1_Init+0x74>)
 8002522:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <MX_SPI1_Init+0x78>)
 8002524:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002526:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <MX_SPI1_Init+0x74>)
 8002528:	2282      	movs	r2, #130	; 0x82
 800252a:	0052      	lsls	r2, r2, #1
 800252c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800252e:	4b18      	ldr	r3, [pc, #96]	; (8002590 <MX_SPI1_Init+0x74>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <MX_SPI1_Init+0x74>)
 8002536:	22e0      	movs	r2, #224	; 0xe0
 8002538:	00d2      	lsls	r2, r2, #3
 800253a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800253c:	4b14      	ldr	r3, [pc, #80]	; (8002590 <MX_SPI1_Init+0x74>)
 800253e:	2200      	movs	r2, #0
 8002540:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <MX_SPI1_Init+0x74>)
 8002544:	2200      	movs	r2, #0
 8002546:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <MX_SPI1_Init+0x74>)
 800254a:	2280      	movs	r2, #128	; 0x80
 800254c:	0092      	lsls	r2, r2, #2
 800254e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <MX_SPI1_Init+0x74>)
 8002552:	2208      	movs	r2, #8
 8002554:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <MX_SPI1_Init+0x74>)
 8002558:	2200      	movs	r2, #0
 800255a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <MX_SPI1_Init+0x74>)
 800255e:	2200      	movs	r2, #0
 8002560:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <MX_SPI1_Init+0x74>)
 8002564:	2200      	movs	r2, #0
 8002566:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <MX_SPI1_Init+0x74>)
 800256a:	2207      	movs	r2, #7
 800256c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <MX_SPI1_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <MX_SPI1_Init+0x74>)
 8002576:	2208      	movs	r2, #8
 8002578:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <MX_SPI1_Init+0x74>)
 800257c:	0018      	movs	r0, r3
 800257e:	f001 fe71 	bl	8004264 <HAL_SPI_Init>
 8002582:	1e03      	subs	r3, r0, #0
 8002584:	d001      	beq.n	800258a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002586:	f000 f91b 	bl	80027c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000138 	.word	0x20000138
 8002594:	40013000 	.word	0x40013000

08002598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800259c:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <MX_USART1_UART_Init+0x60>)
 800259e:	4a17      	ldr	r2, [pc, #92]	; (80025fc <MX_USART1_UART_Init+0x64>)
 80025a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <MX_USART1_UART_Init+0x60>)
 80025a4:	4a16      	ldr	r2, [pc, #88]	; (8002600 <MX_USART1_UART_Init+0x68>)
 80025a6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <MX_USART1_UART_Init+0x60>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <MX_USART1_UART_Init+0x60>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <MX_USART1_UART_Init+0x60>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <MX_USART1_UART_Init+0x60>)
 80025bc:	220c      	movs	r2, #12
 80025be:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <MX_USART1_UART_Init+0x60>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <MX_USART1_UART_Init+0x60>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <MX_USART1_UART_Init+0x60>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <MX_USART1_UART_Init+0x60>)
 80025d4:	2210      	movs	r2, #16
 80025d6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <MX_USART1_UART_Init+0x60>)
 80025da:	2280      	movs	r2, #128	; 0x80
 80025dc:	0152      	lsls	r2, r2, #5
 80025de:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <MX_USART1_UART_Init+0x60>)
 80025e2:	0018      	movs	r0, r3
 80025e4:	f002 fb96 	bl	8004d14 <HAL_UART_Init>
 80025e8:	1e03      	subs	r3, r0, #0
 80025ea:	d001      	beq.n	80025f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80025ec:	f000 f8e8 	bl	80027c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	2000019c 	.word	0x2000019c
 80025fc:	40013800 	.word	0x40013800
 8002600:	001e8480 	.word	0x001e8480

08002604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b08b      	sub	sp, #44	; 0x2c
 8002608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260a:	2414      	movs	r4, #20
 800260c:	193b      	adds	r3, r7, r4
 800260e:	0018      	movs	r0, r3
 8002610:	2314      	movs	r3, #20
 8002612:	001a      	movs	r2, r3
 8002614:	2100      	movs	r1, #0
 8002616:	f004 fe0c 	bl	8007232 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <MX_GPIO_Init+0x1a4>)
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	4b62      	ldr	r3, [pc, #392]	; (80027a8 <MX_GPIO_Init+0x1a4>)
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	0309      	lsls	r1, r1, #12
 8002624:	430a      	orrs	r2, r1
 8002626:	615a      	str	r2, [r3, #20]
 8002628:	4b5f      	ldr	r3, [pc, #380]	; (80027a8 <MX_GPIO_Init+0x1a4>)
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	031b      	lsls	r3, r3, #12
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002636:	4b5c      	ldr	r3, [pc, #368]	; (80027a8 <MX_GPIO_Init+0x1a4>)
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <MX_GPIO_Init+0x1a4>)
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	03c9      	lsls	r1, r1, #15
 8002640:	430a      	orrs	r2, r1
 8002642:	615a      	str	r2, [r3, #20]
 8002644:	4b58      	ldr	r3, [pc, #352]	; (80027a8 <MX_GPIO_Init+0x1a4>)
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	03db      	lsls	r3, r3, #15
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	4b55      	ldr	r3, [pc, #340]	; (80027a8 <MX_GPIO_Init+0x1a4>)
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <MX_GPIO_Init+0x1a4>)
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	0289      	lsls	r1, r1, #10
 800265c:	430a      	orrs	r2, r1
 800265e:	615a      	str	r2, [r3, #20]
 8002660:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <MX_GPIO_Init+0x1a4>)
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	029b      	lsls	r3, r3, #10
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	4b4e      	ldr	r3, [pc, #312]	; (80027a8 <MX_GPIO_Init+0x1a4>)
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	4b4d      	ldr	r3, [pc, #308]	; (80027a8 <MX_GPIO_Init+0x1a4>)
 8002674:	2180      	movs	r1, #128	; 0x80
 8002676:	02c9      	lsls	r1, r1, #11
 8002678:	430a      	orrs	r2, r1
 800267a:	615a      	str	r2, [r3, #20]
 800267c:	4b4a      	ldr	r3, [pc, #296]	; (80027a8 <MX_GPIO_Init+0x1a4>)
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	02db      	lsls	r3, r3, #11
 8002684:	4013      	ands	r3, r2
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS_Pin|WR_Pin|RD_Pin, GPIO_PIN_RESET);
 800268a:	23e0      	movs	r3, #224	; 0xe0
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	4847      	ldr	r0, [pc, #284]	; (80027ac <MX_GPIO_Init+0x1a8>)
 8002690:	2200      	movs	r2, #0
 8002692:	0019      	movs	r1, r3
 8002694:	f000 ff60 	bl	8003558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8002698:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <MX_GPIO_Init+0x1ac>)
 800269a:	2200      	movs	r2, #0
 800269c:	2101      	movs	r1, #1
 800269e:	0018      	movs	r0, r3
 80026a0:	f000 ff5a 	bl	8003558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin|D1_Pin|D2_Pin|D10_Pin
 80026a4:	4943      	ldr	r1, [pc, #268]	; (80027b4 <MX_GPIO_Init+0x1b0>)
 80026a6:	4b44      	ldr	r3, [pc, #272]	; (80027b8 <MX_GPIO_Init+0x1b4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 ff54 	bl	8003558 <HAL_GPIO_WritePin>
                          |D11_Pin|D12_Pin|D13_Pin|D14_Pin
                          |D15_Pin|D3_Pin|D4_Pin|D5_Pin
                          |D6_Pin|D7_Pin|D8_Pin|D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	0059      	lsls	r1, r3, #1
 80026b4:	2390      	movs	r3, #144	; 0x90
 80026b6:	05db      	lsls	r3, r3, #23
 80026b8:	2200      	movs	r2, #0
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 ff4c 	bl	8003558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_Pin WR_Pin RD_Pin */
  GPIO_InitStruct.Pin = RS_Pin|WR_Pin|RD_Pin;
 80026c0:	193b      	adds	r3, r7, r4
 80026c2:	22e0      	movs	r2, #224	; 0xe0
 80026c4:	0212      	lsls	r2, r2, #8
 80026c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	2201      	movs	r2, #1
 80026cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ce:	193b      	adds	r3, r7, r4
 80026d0:	2201      	movs	r2, #1
 80026d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	193b      	adds	r3, r7, r4
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026da:	193b      	adds	r3, r7, r4
 80026dc:	4a33      	ldr	r2, [pc, #204]	; (80027ac <MX_GPIO_Init+0x1a8>)
 80026de:	0019      	movs	r1, r3
 80026e0:	0010      	movs	r0, r2
 80026e2:	f000 fdc9 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	2201      	movs	r2, #1
 80026f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f2:	193b      	adds	r3, r7, r4
 80026f4:	2201      	movs	r2, #1
 80026f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f8:	193b      	adds	r3, r7, r4
 80026fa:	2203      	movs	r2, #3
 80026fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80026fe:	193b      	adds	r3, r7, r4
 8002700:	4a2b      	ldr	r2, [pc, #172]	; (80027b0 <MX_GPIO_Init+0x1ac>)
 8002702:	0019      	movs	r1, r3
 8002704:	0010      	movs	r0, r2
 8002706:	f000 fdb7 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMARK_Pin */
  GPIO_InitStruct.Pin = FMARK_Pin;
 800270a:	193b      	adds	r3, r7, r4
 800270c:	2202      	movs	r2, #2
 800270e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002710:	193b      	adds	r3, r7, r4
 8002712:	2200      	movs	r2, #0
 8002714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	193b      	adds	r3, r7, r4
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FMARK_GPIO_Port, &GPIO_InitStruct);
 800271c:	193b      	adds	r3, r7, r4
 800271e:	4a24      	ldr	r2, [pc, #144]	; (80027b0 <MX_GPIO_Init+0x1ac>)
 8002720:	0019      	movs	r1, r3
 8002722:	0010      	movs	r0, r2
 8002724:	f000 fda8 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D11_Pin
                           D12_Pin D13_Pin D14_Pin D15_Pin
                           D3_Pin D4_Pin D5_Pin D6_Pin
                           D7_Pin D8_Pin D9_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D11_Pin
 8002728:	193b      	adds	r3, r7, r4
 800272a:	4a24      	ldr	r2, [pc, #144]	; (80027bc <MX_GPIO_Init+0x1b8>)
 800272c:	601a      	str	r2, [r3, #0]
                          |D12_Pin|D13_Pin|D14_Pin|D15_Pin
                          |D3_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin|D8_Pin|D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272e:	193b      	adds	r3, r7, r4
 8002730:	2201      	movs	r2, #1
 8002732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	193b      	adds	r3, r7, r4
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800273a:	193b      	adds	r3, r7, r4
 800273c:	2203      	movs	r2, #3
 800273e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002740:	193b      	adds	r3, r7, r4
 8002742:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <MX_GPIO_Init+0x1b4>)
 8002744:	0019      	movs	r1, r3
 8002746:	0010      	movs	r0, r2
 8002748:	f000 fd96 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pin : D10_Pin */
  GPIO_InitStruct.Pin = D10_Pin;
 800274c:	0021      	movs	r1, r4
 800274e:	187b      	adds	r3, r7, r1
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	00d2      	lsls	r2, r2, #3
 8002754:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002756:	000c      	movs	r4, r1
 8002758:	193b      	adds	r3, r7, r4
 800275a:	2211      	movs	r2, #17
 800275c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	193b      	adds	r3, r7, r4
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002764:	193b      	adds	r3, r7, r4
 8002766:	2203      	movs	r2, #3
 8002768:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 800276a:	193b      	adds	r3, r7, r4
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <MX_GPIO_Init+0x1b4>)
 800276e:	0019      	movs	r1, r3
 8002770:	0010      	movs	r0, r2
 8002772:	f000 fd81 	bl	8003278 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002776:	0021      	movs	r1, r4
 8002778:	187b      	adds	r3, r7, r1
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	0052      	lsls	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002780:	187b      	adds	r3, r7, r1
 8002782:	2211      	movs	r2, #17
 8002784:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2201      	movs	r2, #1
 800278a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2203      	movs	r2, #3
 8002790:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002792:	187a      	adds	r2, r7, r1
 8002794:	2390      	movs	r3, #144	; 0x90
 8002796:	05db      	lsls	r3, r3, #23
 8002798:	0011      	movs	r1, r2
 800279a:	0018      	movs	r0, r3
 800279c:	f000 fd6c 	bl	8003278 <HAL_GPIO_Init>

}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b00b      	add	sp, #44	; 0x2c
 80027a6:	bd90      	pop	{r4, r7, pc}
 80027a8:	40021000 	.word	0x40021000
 80027ac:	48000800 	.word	0x48000800
 80027b0:	48001400 	.word	0x48001400
 80027b4:	0000ffff 	.word	0x0000ffff
 80027b8:	48000400 	.word	0x48000400
 80027bc:	0000fbff 	.word	0x0000fbff

080027c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027c4:	b672      	cpsid	i
}
 80027c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <Error_Handler+0x8>
	...

080027cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_MspInit+0x44>)
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <HAL_MspInit+0x44>)
 80027d8:	2101      	movs	r1, #1
 80027da:	430a      	orrs	r2, r1
 80027dc:	619a      	str	r2, [r3, #24]
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_MspInit+0x44>)
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2201      	movs	r2, #1
 80027e4:	4013      	ands	r3, r2
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_MspInit+0x44>)
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_MspInit+0x44>)
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	0549      	lsls	r1, r1, #21
 80027f4:	430a      	orrs	r2, r1
 80027f6:	61da      	str	r2, [r3, #28]
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_MspInit+0x44>)
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	055b      	lsls	r3, r3, #21
 8002800:	4013      	ands	r3, r2
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b002      	add	sp, #8
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	40021000 	.word	0x40021000

08002814 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b08b      	sub	sp, #44	; 0x2c
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	2414      	movs	r4, #20
 800281e:	193b      	adds	r3, r7, r4
 8002820:	0018      	movs	r0, r3
 8002822:	2314      	movs	r3, #20
 8002824:	001a      	movs	r2, r3
 8002826:	2100      	movs	r1, #0
 8002828:	f004 fd03 	bl	8007232 <memset>
  if(hadc->Instance==ADC1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a19      	ldr	r2, [pc, #100]	; (8002898 <HAL_ADC_MspInit+0x84>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d12b      	bne.n	800288e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_ADC_MspInit+0x88>)
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_ADC_MspInit+0x88>)
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	0089      	lsls	r1, r1, #2
 8002840:	430a      	orrs	r2, r1
 8002842:	619a      	str	r2, [r3, #24]
 8002844:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_ADC_MspInit+0x88>)
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_ADC_MspInit+0x88>)
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_ADC_MspInit+0x88>)
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	0289      	lsls	r1, r1, #10
 800285c:	430a      	orrs	r2, r1
 800285e:	615a      	str	r2, [r3, #20]
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <HAL_ADC_MspInit+0x88>)
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	029b      	lsls	r3, r3, #10
 8002868:	4013      	ands	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 800286e:	193b      	adds	r3, r7, r4
 8002870:	221f      	movs	r2, #31
 8002872:	601a      	str	r2, [r3, #0]
                          |ADC4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002874:	193b      	adds	r3, r7, r4
 8002876:	2203      	movs	r2, #3
 8002878:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	193b      	adds	r3, r7, r4
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002880:	193a      	adds	r2, r7, r4
 8002882:	2390      	movs	r3, #144	; 0x90
 8002884:	05db      	lsls	r3, r3, #23
 8002886:	0011      	movs	r1, r2
 8002888:	0018      	movs	r0, r3
 800288a:	f000 fcf5 	bl	8003278 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b00b      	add	sp, #44	; 0x2c
 8002894:	bd90      	pop	{r4, r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	40012400 	.word	0x40012400
 800289c:	40021000 	.word	0x40021000

080028a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b08b      	sub	sp, #44	; 0x2c
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	2414      	movs	r4, #20
 80028aa:	193b      	adds	r3, r7, r4
 80028ac:	0018      	movs	r0, r3
 80028ae:	2314      	movs	r3, #20
 80028b0:	001a      	movs	r2, r3
 80028b2:	2100      	movs	r1, #0
 80028b4:	f004 fcbd 	bl	8007232 <memset>
  if(hi2c->Instance==I2C2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <HAL_I2C_MspInit+0x88>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d12e      	bne.n	8002920 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028c2:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_I2C_MspInit+0x8c>)
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_I2C_MspInit+0x8c>)
 80028c8:	2180      	movs	r1, #128	; 0x80
 80028ca:	03c9      	lsls	r1, r1, #15
 80028cc:	430a      	orrs	r2, r1
 80028ce:	615a      	str	r2, [r3, #20]
 80028d0:	4b16      	ldr	r3, [pc, #88]	; (800292c <HAL_I2C_MspInit+0x8c>)
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	03db      	lsls	r3, r3, #15
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF6     ------> I2C2_SCL
    PF7     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028de:	0021      	movs	r1, r4
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	22c0      	movs	r2, #192	; 0xc0
 80028e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e6:	187b      	adds	r3, r7, r1
 80028e8:	2212      	movs	r2, #18
 80028ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	2203      	movs	r2, #3
 80028f6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	4a0d      	ldr	r2, [pc, #52]	; (8002930 <HAL_I2C_MspInit+0x90>)
 80028fc:	0019      	movs	r1, r3
 80028fe:	0010      	movs	r0, r2
 8002900:	f000 fcba 	bl	8003278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <HAL_I2C_MspInit+0x8c>)
 8002906:	69da      	ldr	r2, [r3, #28]
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <HAL_I2C_MspInit+0x8c>)
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	03c9      	lsls	r1, r1, #15
 800290e:	430a      	orrs	r2, r1
 8002910:	61da      	str	r2, [r3, #28]
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_I2C_MspInit+0x8c>)
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	03db      	lsls	r3, r3, #15
 800291a:	4013      	ands	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b00b      	add	sp, #44	; 0x2c
 8002926:	bd90      	pop	{r4, r7, pc}
 8002928:	40005800 	.word	0x40005800
 800292c:	40021000 	.word	0x40021000
 8002930:	48001400 	.word	0x48001400

08002934 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b08b      	sub	sp, #44	; 0x2c
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	2414      	movs	r4, #20
 800293e:	193b      	adds	r3, r7, r4
 8002940:	0018      	movs	r0, r3
 8002942:	2314      	movs	r3, #20
 8002944:	001a      	movs	r2, r3
 8002946:	2100      	movs	r1, #0
 8002948:	f004 fc73 	bl	8007232 <memset>
  if(hspi->Instance==SPI1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <HAL_SPI_MspInit+0x90>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d132      	bne.n	80029bc <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <HAL_SPI_MspInit+0x94>)
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_SPI_MspInit+0x94>)
 800295c:	2180      	movs	r1, #128	; 0x80
 800295e:	0149      	lsls	r1, r1, #5
 8002960:	430a      	orrs	r2, r1
 8002962:	619a      	str	r2, [r3, #24]
 8002964:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <HAL_SPI_MspInit+0x94>)
 8002966:	699a      	ldr	r2, [r3, #24]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	015b      	lsls	r3, r3, #5
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_SPI_MspInit+0x94>)
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_SPI_MspInit+0x94>)
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	0289      	lsls	r1, r1, #10
 800297c:	430a      	orrs	r2, r1
 800297e:	615a      	str	r2, [r3, #20]
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_SPI_MspInit+0x94>)
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800298e:	0021      	movs	r1, r4
 8002990:	187b      	adds	r3, r7, r1
 8002992:	22e0      	movs	r2, #224	; 0xe0
 8002994:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	187b      	adds	r3, r7, r1
 8002998:	2202      	movs	r2, #2
 800299a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	187b      	adds	r3, r7, r1
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029a2:	187b      	adds	r3, r7, r1
 80029a4:	2203      	movs	r2, #3
 80029a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ae:	187a      	adds	r2, r7, r1
 80029b0:	2390      	movs	r3, #144	; 0x90
 80029b2:	05db      	lsls	r3, r3, #23
 80029b4:	0011      	movs	r1, r2
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 fc5e 	bl	8003278 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029bc:	46c0      	nop			; (mov r8, r8)
 80029be:	46bd      	mov	sp, r7
 80029c0:	b00b      	add	sp, #44	; 0x2c
 80029c2:	bd90      	pop	{r4, r7, pc}
 80029c4:	40013000 	.word	0x40013000
 80029c8:	40021000 	.word	0x40021000

080029cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b08b      	sub	sp, #44	; 0x2c
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	2414      	movs	r4, #20
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	0018      	movs	r0, r3
 80029da:	2314      	movs	r3, #20
 80029dc:	001a      	movs	r2, r3
 80029de:	2100      	movs	r1, #0
 80029e0:	f004 fc27 	bl	8007232 <memset>
  if(huart->Instance==USART1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <HAL_UART_MspInit+0x94>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d133      	bne.n	8002a56 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029ee:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <HAL_UART_MspInit+0x98>)
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <HAL_UART_MspInit+0x98>)
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	01c9      	lsls	r1, r1, #7
 80029f8:	430a      	orrs	r2, r1
 80029fa:	619a      	str	r2, [r3, #24]
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_UART_MspInit+0x98>)
 80029fe:	699a      	ldr	r2, [r3, #24]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	01db      	lsls	r3, r3, #7
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <HAL_UART_MspInit+0x98>)
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <HAL_UART_MspInit+0x98>)
 8002a10:	2180      	movs	r1, #128	; 0x80
 8002a12:	0289      	lsls	r1, r1, #10
 8002a14:	430a      	orrs	r2, r1
 8002a16:	615a      	str	r2, [r3, #20]
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <HAL_UART_MspInit+0x98>)
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	029b      	lsls	r3, r3, #10
 8002a20:	4013      	ands	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	22c0      	movs	r2, #192	; 0xc0
 8002a2a:	00d2      	lsls	r2, r2, #3
 8002a2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	0021      	movs	r1, r4
 8002a30:	187b      	adds	r3, r7, r1
 8002a32:	2202      	movs	r2, #2
 8002a34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	187b      	adds	r3, r7, r1
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002a42:	187b      	adds	r3, r7, r1
 8002a44:	2201      	movs	r2, #1
 8002a46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a48:	187a      	adds	r2, r7, r1
 8002a4a:	2390      	movs	r3, #144	; 0x90
 8002a4c:	05db      	lsls	r3, r3, #23
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 fc11 	bl	8003278 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b00b      	add	sp, #44	; 0x2c
 8002a5c:	bd90      	pop	{r4, r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	40013800 	.word	0x40013800
 8002a64:	40021000 	.word	0x40021000

08002a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a6c:	e7fe      	b.n	8002a6c <NMI_Handler+0x4>

08002a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a72:	e7fe      	b.n	8002a72 <HardFault_Handler+0x4>

08002a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if(Timer1 > 0)
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <SysTick_Handler+0x38>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <SysTick_Handler+0x18>
	  Timer1--;
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <SysTick_Handler+0x38>)
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <SysTick_Handler+0x38>)
 8002a9e:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <SysTick_Handler+0x3c>)
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <SysTick_Handler+0x2c>
	  Timer2--;
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <SysTick_Handler+0x3c>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <SysTick_Handler+0x3c>)
 8002ab2:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab4:	f000 f8b6 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	200000a4 	.word	0x200000a4
 8002ac4:	200000a6 	.word	0x200000a6

08002ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ad0:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <_sbrk+0x5c>)
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <_sbrk+0x60>)
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <_sbrk+0x64>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <_sbrk+0x64>)
 8002ae6:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <_sbrk+0x68>)
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <_sbrk+0x64>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	18d3      	adds	r3, r2, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d207      	bcs.n	8002b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002af8:	f004 fb68 	bl	80071cc <__errno>
 8002afc:	0003      	movs	r3, r0
 8002afe:	220c      	movs	r2, #12
 8002b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	425b      	negs	r3, r3
 8002b06:	e009      	b.n	8002b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b08:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <_sbrk+0x64>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <_sbrk+0x64>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	18d2      	adds	r2, r2, r3
 8002b16:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <_sbrk+0x64>)
 8002b18:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b006      	add	sp, #24
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20002000 	.word	0x20002000
 8002b28:	00000400 	.word	0x00000400
 8002b2c:	20000220 	.word	0x20000220
 8002b30:	200006b0 	.word	0x200006b0

08002b34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b40:	480d      	ldr	r0, [pc, #52]	; (8002b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b44:	480d      	ldr	r0, [pc, #52]	; (8002b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b46:	490e      	ldr	r1, [pc, #56]	; (8002b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b48:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <LoopForever+0xe>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b4c:	e002      	b.n	8002b54 <LoopCopyDataInit>

08002b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b52:	3304      	adds	r3, #4

08002b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b58:	d3f9      	bcc.n	8002b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5a:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b5c:	4c0b      	ldr	r4, [pc, #44]	; (8002b8c <LoopForever+0x16>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b60:	e001      	b.n	8002b66 <LoopFillZerobss>

08002b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b64:	3204      	adds	r2, #4

08002b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b68:	d3fb      	bcc.n	8002b62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002b6a:	f7ff ffe3 	bl	8002b34 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002b6e:	f004 fb33 	bl	80071d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b72:	f7ff fb5b 	bl	800222c <main>

08002b76 <LoopForever>:

LoopForever:
    b LoopForever
 8002b76:	e7fe      	b.n	8002b76 <LoopForever>
  ldr   r0, =_estack
 8002b78:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b80:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002b84:	08008324 	.word	0x08008324
  ldr r2, =_sbss
 8002b88:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002b8c:	200006ac 	.word	0x200006ac

08002b90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b90:	e7fe      	b.n	8002b90 <ADC1_IRQHandler>
	...

08002b94 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b98:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_Init+0x24>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_Init+0x24>)
 8002b9e:	2110      	movs	r1, #16
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f000 f809 	bl	8002bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002baa:	f7ff fe0f 	bl	80027cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	40022000 	.word	0x40022000

08002bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_InitTick+0x5c>)
 8002bc6:	681c      	ldr	r4, [r3, #0]
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <HAL_InitTick+0x60>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	0019      	movs	r1, r3
 8002bce:	23fa      	movs	r3, #250	; 0xfa
 8002bd0:	0098      	lsls	r0, r3, #2
 8002bd2:	f7fd faa3 	bl	800011c <__udivsi3>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	0019      	movs	r1, r3
 8002bda:	0020      	movs	r0, r4
 8002bdc:	f7fd fa9e 	bl	800011c <__udivsi3>
 8002be0:	0003      	movs	r3, r0
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 fb3b 	bl	800325e <HAL_SYSTICK_Config>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e00f      	b.n	8002c10 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d80b      	bhi.n	8002c0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	425b      	negs	r3, r3
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f000 fb18 	bl	8003234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_InitTick+0x64>)
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b003      	add	sp, #12
 8002c16:	bd90      	pop	{r4, r7, pc}
 8002c18:	20000004 	.word	0x20000004
 8002c1c:	2000000c 	.word	0x2000000c
 8002c20:	20000008 	.word	0x20000008

08002c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_IncTick+0x1c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_IncTick+0x20>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	18d2      	adds	r2, r2, r3
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_IncTick+0x20>)
 8002c36:	601a      	str	r2, [r3, #0]
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	2000000c 	.word	0x2000000c
 8002c44:	20000224 	.word	0x20000224

08002c48 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b02      	ldr	r3, [pc, #8]	; (8002c58 <HAL_GetTick+0x10>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	20000224 	.word	0x20000224

08002c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c64:	f7ff fff0 	bl	8002c48 <HAL_GetTick>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3301      	adds	r3, #1
 8002c74:	d005      	beq.n	8002c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_Delay+0x44>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	001a      	movs	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	189b      	adds	r3, r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	f7ff ffe0 	bl	8002c48 <HAL_GetTick>
 8002c88:	0002      	movs	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d8f7      	bhi.n	8002c84 <HAL_Delay+0x28>
  {
  }
}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b004      	add	sp, #16
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	2000000c 	.word	0x2000000c

08002ca4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cac:	230f      	movs	r3, #15
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e125      	b.n	8002f0e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2234      	movs	r2, #52	; 0x34
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7ff fd9a 	bl	8002814 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d000      	beq.n	8002cec <HAL_ADC_Init+0x48>
 8002cea:	e103      	b.n	8002ef4 <HAL_ADC_Init+0x250>
 8002cec:	230f      	movs	r3, #15
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d000      	beq.n	8002cf8 <HAL_ADC_Init+0x54>
 8002cf6:	e0fd      	b.n	8002ef4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2204      	movs	r2, #4
 8002d00:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002d02:	d000      	beq.n	8002d06 <HAL_ADC_Init+0x62>
 8002d04:	e0f6      	b.n	8002ef4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	4a83      	ldr	r2, [pc, #524]	; (8002f18 <HAL_ADC_Init+0x274>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2202      	movs	r2, #2
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2203      	movs	r2, #3
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d112      	bne.n	8002d4a <HAL_ADC_Init+0xa6>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d009      	beq.n	8002d46 <HAL_ADC_Init+0xa2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_Init+0xa6>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_ADC_Init+0xa8>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d116      	bne.n	8002d7e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2218      	movs	r2, #24
 8002d58:	4393      	bics	r3, r2
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	0899      	lsrs	r1, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4964      	ldr	r1, [pc, #400]	; (8002f1c <HAL_ADC_Init+0x278>)
 8002d8a:	400a      	ands	r2, r1
 8002d8c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7e1b      	ldrb	r3, [r3, #24]
 8002d92:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7e5b      	ldrb	r3, [r3, #25]
 8002d98:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d9a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7e9b      	ldrb	r3, [r3, #26]
 8002da0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002da2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d002      	beq.n	8002db2 <HAL_ADC_Init+0x10e>
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	015b      	lsls	r3, r3, #5
 8002db0:	e000      	b.n	8002db4 <HAL_ADC_Init+0x110>
 8002db2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002db4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002dba:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_Init+0x124>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	e000      	b.n	8002dca <HAL_ADC_Init+0x126>
 8002dc8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002dca:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2124      	movs	r1, #36	; 0x24
 8002dd0:	5c5b      	ldrb	r3, [r3, r1]
 8002dd2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002dd4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7edb      	ldrb	r3, [r3, #27]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d115      	bne.n	8002e10 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7e9b      	ldrb	r3, [r3, #26]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	0252      	lsls	r2, r2, #9
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	e00b      	b.n	8002e10 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e08:	2201      	movs	r2, #1
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	23c2      	movs	r3, #194	; 0xc2
 8002e16:	33ff      	adds	r3, #255	; 0xff
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d007      	beq.n	8002e2c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e24:	4313      	orrs	r3, r2
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68d9      	ldr	r1, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	055b      	lsls	r3, r3, #21
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d01b      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d017      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d013      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d00f      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d00b      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d007      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	2b06      	cmp	r3, #6
 8002e76:	d003      	beq.n	8002e80 <HAL_ADC_Init+0x1dc>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	2b07      	cmp	r3, #7
 8002e7e:	d112      	bne.n	8002ea6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2107      	movs	r1, #7
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6959      	ldr	r1, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	2207      	movs	r2, #7
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <HAL_ADC_Init+0x27c>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d10b      	bne.n	8002ece <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ecc:	e01c      	b.n	8002f08 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	2212      	movs	r2, #18
 8002ed4:	4393      	bics	r3, r2
 8002ed6:	2210      	movs	r2, #16
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002eea:	230f      	movs	r3, #15
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ef2:	e009      	b.n	8002f08 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	2210      	movs	r2, #16
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002f00:	230f      	movs	r3, #15
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f08:	230f      	movs	r3, #15
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	781b      	ldrb	r3, [r3, #0]
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b004      	add	sp, #16
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	fffffefd 	.word	0xfffffefd
 8002f1c:	fffe0219 	.word	0xfffe0219
 8002f20:	833fffe7 	.word	0x833fffe7

08002f24 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f2e:	230f      	movs	r3, #15
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	055b      	lsls	r3, r3, #21
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d011      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x46>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d00d      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x46>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d009      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x46>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d005      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x46>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d001      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x46>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2234      	movs	r2, #52	; 0x34
 8002f6e:	5c9b      	ldrb	r3, [r3, r2]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x54>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e0bb      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x1cc>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2234      	movs	r2, #52	; 0x34
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2204      	movs	r2, #4
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d000      	beq.n	8002f8e <HAL_ADC_ConfigChannel+0x6a>
 8002f8c:	e09f      	b.n	80030ce <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4a59      	ldr	r2, [pc, #356]	; (80030f8 <HAL_ADC_ConfigChannel+0x1d4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d100      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x76>
 8002f98:	e077      	b.n	800308a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	055b      	lsls	r3, r3, #21
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d037      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d033      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d02f      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d02b      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d027      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d023      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	2b06      	cmp	r3, #6
 8002fea:	d01f      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	2b07      	cmp	r3, #7
 8002ff2:	d01b      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	2107      	movs	r1, #7
 8003000:	400b      	ands	r3, r1
 8003002:	429a      	cmp	r2, r3
 8003004:	d012      	beq.n	800302c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2107      	movs	r1, #7
 8003012:	438a      	bics	r2, r1
 8003014:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6959      	ldr	r1, [r3, #20]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2207      	movs	r2, #7
 8003022:	401a      	ands	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b10      	cmp	r3, #16
 8003032:	d003      	beq.n	800303c <HAL_ADC_ConfigChannel+0x118>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b11      	cmp	r3, #17
 800303a:	d152      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800303c:	4b2f      	ldr	r3, [pc, #188]	; (80030fc <HAL_ADC_ConfigChannel+0x1d8>)
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b10      	cmp	r3, #16
 8003046:	d102      	bne.n	800304e <HAL_ADC_ConfigChannel+0x12a>
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	041b      	lsls	r3, r3, #16
 800304c:	e001      	b.n	8003052 <HAL_ADC_ConfigChannel+0x12e>
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	03db      	lsls	r3, r3, #15
 8003052:	4a2a      	ldr	r2, [pc, #168]	; (80030fc <HAL_ADC_ConfigChannel+0x1d8>)
 8003054:	430b      	orrs	r3, r1
 8003056:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b10      	cmp	r3, #16
 800305e:	d140      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003060:	4b27      	ldr	r3, [pc, #156]	; (8003100 <HAL_ADC_ConfigChannel+0x1dc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4927      	ldr	r1, [pc, #156]	; (8003104 <HAL_ADC_ConfigChannel+0x1e0>)
 8003066:	0018      	movs	r0, r3
 8003068:	f7fd f858 	bl	800011c <__udivsi3>
 800306c:	0003      	movs	r3, r0
 800306e:	001a      	movs	r2, r3
 8003070:	0013      	movs	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	189b      	adds	r3, r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800307a:	e002      	b.n	8003082 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	3b01      	subs	r3, #1
 8003080:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f9      	bne.n	800307c <HAL_ADC_ConfigChannel+0x158>
 8003088:	e02b      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2101      	movs	r1, #1
 8003096:	4099      	lsls	r1, r3
 8003098:	000b      	movs	r3, r1
 800309a:	43d9      	mvns	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	400a      	ands	r2, r1
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d003      	beq.n	80030b4 <HAL_ADC_ConfigChannel+0x190>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b11      	cmp	r3, #17
 80030b2:	d116      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_ADC_ConfigChannel+0x1d8>)
 80030b6:	6819      	ldr	r1, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b10      	cmp	r3, #16
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x1a0>
 80030c0:	4a11      	ldr	r2, [pc, #68]	; (8003108 <HAL_ADC_ConfigChannel+0x1e4>)
 80030c2:	e000      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x1a2>
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <HAL_ADC_ConfigChannel+0x1e8>)
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <HAL_ADC_ConfigChannel+0x1d8>)
 80030c8:	400a      	ands	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	e009      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	2220      	movs	r2, #32
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80030da:	230f      	movs	r3, #15
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2234      	movs	r2, #52	; 0x34
 80030e6:	2100      	movs	r1, #0
 80030e8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80030ea:	230f      	movs	r3, #15
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	781b      	ldrb	r3, [r3, #0]
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b004      	add	sp, #16
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	00001001 	.word	0x00001001
 80030fc:	40012708 	.word	0x40012708
 8003100:	20000004 	.word	0x20000004
 8003104:	000f4240 	.word	0x000f4240
 8003108:	ff7fffff 	.word	0xff7fffff
 800310c:	ffbfffff 	.word	0xffbfffff

08003110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	0002      	movs	r2, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	1dfb      	adds	r3, r7, #7
 800311c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800311e:	1dfb      	adds	r3, r7, #7
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b7f      	cmp	r3, #127	; 0x7f
 8003124:	d828      	bhi.n	8003178 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003126:	4a2f      	ldr	r2, [pc, #188]	; (80031e4 <__NVIC_SetPriority+0xd4>)
 8003128:	1dfb      	adds	r3, r7, #7
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	b25b      	sxtb	r3, r3
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	33c0      	adds	r3, #192	; 0xc0
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	589b      	ldr	r3, [r3, r2]
 8003136:	1dfa      	adds	r2, r7, #7
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	0011      	movs	r1, r2
 800313c:	2203      	movs	r2, #3
 800313e:	400a      	ands	r2, r1
 8003140:	00d2      	lsls	r2, r2, #3
 8003142:	21ff      	movs	r1, #255	; 0xff
 8003144:	4091      	lsls	r1, r2
 8003146:	000a      	movs	r2, r1
 8003148:	43d2      	mvns	r2, r2
 800314a:	401a      	ands	r2, r3
 800314c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	019b      	lsls	r3, r3, #6
 8003152:	22ff      	movs	r2, #255	; 0xff
 8003154:	401a      	ands	r2, r3
 8003156:	1dfb      	adds	r3, r7, #7
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	0018      	movs	r0, r3
 800315c:	2303      	movs	r3, #3
 800315e:	4003      	ands	r3, r0
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003164:	481f      	ldr	r0, [pc, #124]	; (80031e4 <__NVIC_SetPriority+0xd4>)
 8003166:	1dfb      	adds	r3, r7, #7
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	b25b      	sxtb	r3, r3
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	430a      	orrs	r2, r1
 8003170:	33c0      	adds	r3, #192	; 0xc0
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003176:	e031      	b.n	80031dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003178:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <__NVIC_SetPriority+0xd8>)
 800317a:	1dfb      	adds	r3, r7, #7
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	0019      	movs	r1, r3
 8003180:	230f      	movs	r3, #15
 8003182:	400b      	ands	r3, r1
 8003184:	3b08      	subs	r3, #8
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3306      	adds	r3, #6
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	18d3      	adds	r3, r2, r3
 800318e:	3304      	adds	r3, #4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	1dfa      	adds	r2, r7, #7
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	0011      	movs	r1, r2
 8003198:	2203      	movs	r2, #3
 800319a:	400a      	ands	r2, r1
 800319c:	00d2      	lsls	r2, r2, #3
 800319e:	21ff      	movs	r1, #255	; 0xff
 80031a0:	4091      	lsls	r1, r2
 80031a2:	000a      	movs	r2, r1
 80031a4:	43d2      	mvns	r2, r2
 80031a6:	401a      	ands	r2, r3
 80031a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	019b      	lsls	r3, r3, #6
 80031ae:	22ff      	movs	r2, #255	; 0xff
 80031b0:	401a      	ands	r2, r3
 80031b2:	1dfb      	adds	r3, r7, #7
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	0018      	movs	r0, r3
 80031b8:	2303      	movs	r3, #3
 80031ba:	4003      	ands	r3, r0
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031c0:	4809      	ldr	r0, [pc, #36]	; (80031e8 <__NVIC_SetPriority+0xd8>)
 80031c2:	1dfb      	adds	r3, r7, #7
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	001c      	movs	r4, r3
 80031c8:	230f      	movs	r3, #15
 80031ca:	4023      	ands	r3, r4
 80031cc:	3b08      	subs	r3, #8
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	430a      	orrs	r2, r1
 80031d2:	3306      	adds	r3, #6
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	18c3      	adds	r3, r0, r3
 80031d8:	3304      	adds	r3, #4
 80031da:	601a      	str	r2, [r3, #0]
}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b003      	add	sp, #12
 80031e2:	bd90      	pop	{r4, r7, pc}
 80031e4:	e000e100 	.word	0xe000e100
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1e5a      	subs	r2, r3, #1
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	045b      	lsls	r3, r3, #17
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d301      	bcc.n	8003204 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003200:	2301      	movs	r3, #1
 8003202:	e010      	b.n	8003226 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003204:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <SysTick_Config+0x44>)
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	3a01      	subs	r2, #1
 800320a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800320c:	2301      	movs	r3, #1
 800320e:	425b      	negs	r3, r3
 8003210:	2103      	movs	r1, #3
 8003212:	0018      	movs	r0, r3
 8003214:	f7ff ff7c 	bl	8003110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <SysTick_Config+0x44>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <SysTick_Config+0x44>)
 8003220:	2207      	movs	r2, #7
 8003222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003224:	2300      	movs	r3, #0
}
 8003226:	0018      	movs	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	b002      	add	sp, #8
 800322c:	bd80      	pop	{r7, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	e000e010 	.word	0xe000e010

08003234 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	210f      	movs	r1, #15
 8003240:	187b      	adds	r3, r7, r1
 8003242:	1c02      	adds	r2, r0, #0
 8003244:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	187b      	adds	r3, r7, r1
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	b25b      	sxtb	r3, r3
 800324e:	0011      	movs	r1, r2
 8003250:	0018      	movs	r0, r3
 8003252:	f7ff ff5d 	bl	8003110 <__NVIC_SetPriority>
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b004      	add	sp, #16
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff ffbf 	bl	80031ec <SysTick_Config>
 800326e:	0003      	movs	r3, r0
}
 8003270:	0018      	movs	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	b002      	add	sp, #8
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003286:	e14f      	b.n	8003528 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2101      	movs	r1, #1
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4091      	lsls	r1, r2
 8003292:	000a      	movs	r2, r1
 8003294:	4013      	ands	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d100      	bne.n	80032a0 <HAL_GPIO_Init+0x28>
 800329e:	e140      	b.n	8003522 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2203      	movs	r2, #3
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d005      	beq.n	80032b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2203      	movs	r2, #3
 80032b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d130      	bne.n	800331a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2203      	movs	r2, #3
 80032c4:	409a      	lsls	r2, r3
 80032c6:	0013      	movs	r3, r2
 80032c8:	43da      	mvns	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	409a      	lsls	r2, r3
 80032da:	0013      	movs	r3, r2
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ee:	2201      	movs	r2, #1
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	409a      	lsls	r2, r3
 80032f4:	0013      	movs	r3, r2
 80032f6:	43da      	mvns	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	2201      	movs	r2, #1
 8003306:	401a      	ands	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	409a      	lsls	r2, r3
 800330c:	0013      	movs	r3, r2
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2203      	movs	r2, #3
 8003320:	4013      	ands	r3, r2
 8003322:	2b03      	cmp	r3, #3
 8003324:	d017      	beq.n	8003356 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	2203      	movs	r2, #3
 8003332:	409a      	lsls	r2, r3
 8003334:	0013      	movs	r3, r2
 8003336:	43da      	mvns	r2, r3
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4013      	ands	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	409a      	lsls	r2, r3
 8003348:	0013      	movs	r3, r2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2203      	movs	r2, #3
 800335c:	4013      	ands	r3, r2
 800335e:	2b02      	cmp	r3, #2
 8003360:	d123      	bne.n	80033aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	08da      	lsrs	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3208      	adds	r2, #8
 800336a:	0092      	lsls	r2, r2, #2
 800336c:	58d3      	ldr	r3, [r2, r3]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2207      	movs	r2, #7
 8003374:	4013      	ands	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	220f      	movs	r2, #15
 800337a:	409a      	lsls	r2, r3
 800337c:	0013      	movs	r3, r2
 800337e:	43da      	mvns	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	691a      	ldr	r2, [r3, #16]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2107      	movs	r1, #7
 800338e:	400b      	ands	r3, r1
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	409a      	lsls	r2, r3
 8003394:	0013      	movs	r3, r2
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	08da      	lsrs	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3208      	adds	r2, #8
 80033a4:	0092      	lsls	r2, r2, #2
 80033a6:	6939      	ldr	r1, [r7, #16]
 80033a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	2203      	movs	r2, #3
 80033b6:	409a      	lsls	r2, r3
 80033b8:	0013      	movs	r3, r2
 80033ba:	43da      	mvns	r2, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2203      	movs	r2, #3
 80033c8:	401a      	ands	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	409a      	lsls	r2, r3
 80033d0:	0013      	movs	r3, r2
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	23c0      	movs	r3, #192	; 0xc0
 80033e4:	029b      	lsls	r3, r3, #10
 80033e6:	4013      	ands	r3, r2
 80033e8:	d100      	bne.n	80033ec <HAL_GPIO_Init+0x174>
 80033ea:	e09a      	b.n	8003522 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ec:	4b54      	ldr	r3, [pc, #336]	; (8003540 <HAL_GPIO_Init+0x2c8>)
 80033ee:	699a      	ldr	r2, [r3, #24]
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_GPIO_Init+0x2c8>)
 80033f2:	2101      	movs	r1, #1
 80033f4:	430a      	orrs	r2, r1
 80033f6:	619a      	str	r2, [r3, #24]
 80033f8:	4b51      	ldr	r3, [pc, #324]	; (8003540 <HAL_GPIO_Init+0x2c8>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2201      	movs	r2, #1
 80033fe:	4013      	ands	r3, r2
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003404:	4a4f      	ldr	r2, [pc, #316]	; (8003544 <HAL_GPIO_Init+0x2cc>)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	3302      	adds	r3, #2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	589b      	ldr	r3, [r3, r2]
 8003410:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2203      	movs	r2, #3
 8003416:	4013      	ands	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	220f      	movs	r2, #15
 800341c:	409a      	lsls	r2, r3
 800341e:	0013      	movs	r3, r2
 8003420:	43da      	mvns	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	2390      	movs	r3, #144	; 0x90
 800342c:	05db      	lsls	r3, r3, #23
 800342e:	429a      	cmp	r2, r3
 8003430:	d013      	beq.n	800345a <HAL_GPIO_Init+0x1e2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a44      	ldr	r2, [pc, #272]	; (8003548 <HAL_GPIO_Init+0x2d0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00d      	beq.n	8003456 <HAL_GPIO_Init+0x1de>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a43      	ldr	r2, [pc, #268]	; (800354c <HAL_GPIO_Init+0x2d4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d007      	beq.n	8003452 <HAL_GPIO_Init+0x1da>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a42      	ldr	r2, [pc, #264]	; (8003550 <HAL_GPIO_Init+0x2d8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d101      	bne.n	800344e <HAL_GPIO_Init+0x1d6>
 800344a:	2303      	movs	r3, #3
 800344c:	e006      	b.n	800345c <HAL_GPIO_Init+0x1e4>
 800344e:	2305      	movs	r3, #5
 8003450:	e004      	b.n	800345c <HAL_GPIO_Init+0x1e4>
 8003452:	2302      	movs	r3, #2
 8003454:	e002      	b.n	800345c <HAL_GPIO_Init+0x1e4>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_GPIO_Init+0x1e4>
 800345a:	2300      	movs	r3, #0
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	2103      	movs	r1, #3
 8003460:	400a      	ands	r2, r1
 8003462:	0092      	lsls	r2, r2, #2
 8003464:	4093      	lsls	r3, r2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800346c:	4935      	ldr	r1, [pc, #212]	; (8003544 <HAL_GPIO_Init+0x2cc>)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	089b      	lsrs	r3, r3, #2
 8003472:	3302      	adds	r3, #2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800347a:	4b36      	ldr	r3, [pc, #216]	; (8003554 <HAL_GPIO_Init+0x2dc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	43da      	mvns	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	025b      	lsls	r3, r3, #9
 8003492:	4013      	ands	r3, r2
 8003494:	d003      	beq.n	800349e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800349e:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_GPIO_Init+0x2dc>)
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80034a4:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <HAL_GPIO_Init+0x2dc>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	43da      	mvns	r2, r3
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	029b      	lsls	r3, r3, #10
 80034bc:	4013      	ands	r3, r2
 80034be:	d003      	beq.n	80034c8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034c8:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_GPIO_Init+0x2dc>)
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ce:	4b21      	ldr	r3, [pc, #132]	; (8003554 <HAL_GPIO_Init+0x2dc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	43da      	mvns	r2, r3
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	2380      	movs	r3, #128	; 0x80
 80034e4:	035b      	lsls	r3, r3, #13
 80034e6:	4013      	ands	r3, r2
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034f2:	4b18      	ldr	r3, [pc, #96]	; (8003554 <HAL_GPIO_Init+0x2dc>)
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80034f8:	4b16      	ldr	r3, [pc, #88]	; (8003554 <HAL_GPIO_Init+0x2dc>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	43da      	mvns	r2, r3
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4013      	ands	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	039b      	lsls	r3, r3, #14
 8003510:	4013      	ands	r3, r2
 8003512:	d003      	beq.n	800351c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800351c:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <HAL_GPIO_Init+0x2dc>)
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	3301      	adds	r3, #1
 8003526:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	40da      	lsrs	r2, r3
 8003530:	1e13      	subs	r3, r2, #0
 8003532:	d000      	beq.n	8003536 <HAL_GPIO_Init+0x2be>
 8003534:	e6a8      	b.n	8003288 <HAL_GPIO_Init+0x10>
  } 
}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	b006      	add	sp, #24
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	40010000 	.word	0x40010000
 8003548:	48000400 	.word	0x48000400
 800354c:	48000800 	.word	0x48000800
 8003550:	48000c00 	.word	0x48000c00
 8003554:	40010400 	.word	0x40010400

08003558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	0008      	movs	r0, r1
 8003562:	0011      	movs	r1, r2
 8003564:	1cbb      	adds	r3, r7, #2
 8003566:	1c02      	adds	r2, r0, #0
 8003568:	801a      	strh	r2, [r3, #0]
 800356a:	1c7b      	adds	r3, r7, #1
 800356c:	1c0a      	adds	r2, r1, #0
 800356e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003570:	1c7b      	adds	r3, r7, #1
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003578:	1cbb      	adds	r3, r7, #2
 800357a:	881a      	ldrh	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003580:	e003      	b.n	800358a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003582:	1cbb      	adds	r3, r7, #2
 8003584:	881a      	ldrh	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	629a      	str	r2, [r3, #40]	; 0x28
}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b002      	add	sp, #8
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e082      	b.n	80036ac <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2241      	movs	r2, #65	; 0x41
 80035aa:	5c9b      	ldrb	r3, [r3, r2]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2240      	movs	r2, #64	; 0x40
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0018      	movs	r0, r3
 80035be:	f7ff f96f 	bl	80028a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2241      	movs	r2, #65	; 0x41
 80035c6:	2124      	movs	r1, #36	; 0x24
 80035c8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2101      	movs	r1, #1
 80035d6:	438a      	bics	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4934      	ldr	r1, [pc, #208]	; (80036b4 <HAL_I2C_Init+0x120>)
 80035e4:	400a      	ands	r2, r1
 80035e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4931      	ldr	r1, [pc, #196]	; (80036b8 <HAL_I2C_Init+0x124>)
 80035f4:	400a      	ands	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d108      	bne.n	8003612 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2180      	movs	r1, #128	; 0x80
 800360a:	0209      	lsls	r1, r1, #8
 800360c:	430a      	orrs	r2, r1
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	e007      	b.n	8003622 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2184      	movs	r1, #132	; 0x84
 800361c:	0209      	lsls	r1, r1, #8
 800361e:	430a      	orrs	r2, r1
 8003620:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d104      	bne.n	8003634 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	491f      	ldr	r1, [pc, #124]	; (80036bc <HAL_I2C_Init+0x128>)
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	491a      	ldr	r1, [pc, #104]	; (80036b8 <HAL_I2C_Init+0x124>)
 8003650:	400a      	ands	r2, r1
 8003652:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	431a      	orrs	r2, r3
 800365e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69d9      	ldr	r1, [r3, #28]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1a      	ldr	r2, [r3, #32]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2101      	movs	r1, #1
 800368a:	430a      	orrs	r2, r1
 800368c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2241      	movs	r2, #65	; 0x41
 8003698:	2120      	movs	r1, #32
 800369a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2242      	movs	r2, #66	; 0x42
 80036a6:	2100      	movs	r1, #0
 80036a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	0018      	movs	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b002      	add	sp, #8
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	f0ffffff 	.word	0xf0ffffff
 80036b8:	ffff7fff 	.word	0xffff7fff
 80036bc:	02008000 	.word	0x02008000

080036c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2241      	movs	r2, #65	; 0x41
 80036ce:	5c9b      	ldrb	r3, [r3, r2]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d138      	bne.n	8003748 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2240      	movs	r2, #64	; 0x40
 80036da:	5c9b      	ldrb	r3, [r3, r2]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e032      	b.n	800374a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2240      	movs	r2, #64	; 0x40
 80036e8:	2101      	movs	r1, #1
 80036ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2241      	movs	r2, #65	; 0x41
 80036f0:	2124      	movs	r1, #36	; 0x24
 80036f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2101      	movs	r1, #1
 8003700:	438a      	bics	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4911      	ldr	r1, [pc, #68]	; (8003754 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003710:	400a      	ands	r2, r1
 8003712:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2101      	movs	r1, #1
 8003730:	430a      	orrs	r2, r1
 8003732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2241      	movs	r2, #65	; 0x41
 8003738:	2120      	movs	r1, #32
 800373a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2240      	movs	r2, #64	; 0x40
 8003740:	2100      	movs	r1, #0
 8003742:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b002      	add	sp, #8
 8003750:	bd80      	pop	{r7, pc}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	ffffefff 	.word	0xffffefff

08003758 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2241      	movs	r2, #65	; 0x41
 8003766:	5c9b      	ldrb	r3, [r3, r2]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b20      	cmp	r3, #32
 800376c:	d139      	bne.n	80037e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2240      	movs	r2, #64	; 0x40
 8003772:	5c9b      	ldrb	r3, [r3, r2]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003778:	2302      	movs	r3, #2
 800377a:	e033      	b.n	80037e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2240      	movs	r2, #64	; 0x40
 8003780:	2101      	movs	r1, #1
 8003782:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2241      	movs	r2, #65	; 0x41
 8003788:	2124      	movs	r1, #36	; 0x24
 800378a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2101      	movs	r1, #1
 8003798:	438a      	bics	r2, r1
 800379a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a11      	ldr	r2, [pc, #68]	; (80037ec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2101      	movs	r1, #1
 80037ca:	430a      	orrs	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2241      	movs	r2, #65	; 0x41
 80037d2:	2120      	movs	r1, #32
 80037d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2240      	movs	r2, #64	; 0x40
 80037da:	2100      	movs	r1, #0
 80037dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037e2:	2302      	movs	r3, #2
  }
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	fffff0ff 	.word	0xfffff0ff

080037f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e301      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2201      	movs	r2, #1
 8003808:	4013      	ands	r3, r2
 800380a:	d100      	bne.n	800380e <HAL_RCC_OscConfig+0x1e>
 800380c:	e08d      	b.n	800392a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800380e:	4bc3      	ldr	r3, [pc, #780]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	220c      	movs	r2, #12
 8003814:	4013      	ands	r3, r2
 8003816:	2b04      	cmp	r3, #4
 8003818:	d00e      	beq.n	8003838 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800381a:	4bc0      	ldr	r3, [pc, #768]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	220c      	movs	r2, #12
 8003820:	4013      	ands	r3, r2
 8003822:	2b08      	cmp	r3, #8
 8003824:	d116      	bne.n	8003854 <HAL_RCC_OscConfig+0x64>
 8003826:	4bbd      	ldr	r3, [pc, #756]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	025b      	lsls	r3, r3, #9
 800382e:	401a      	ands	r2, r3
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	025b      	lsls	r3, r3, #9
 8003834:	429a      	cmp	r2, r3
 8003836:	d10d      	bne.n	8003854 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003838:	4bb8      	ldr	r3, [pc, #736]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	029b      	lsls	r3, r3, #10
 8003840:	4013      	ands	r3, r2
 8003842:	d100      	bne.n	8003846 <HAL_RCC_OscConfig+0x56>
 8003844:	e070      	b.n	8003928 <HAL_RCC_OscConfig+0x138>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d000      	beq.n	8003850 <HAL_RCC_OscConfig+0x60>
 800384e:	e06b      	b.n	8003928 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e2d8      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d107      	bne.n	800386c <HAL_RCC_OscConfig+0x7c>
 800385c:	4baf      	ldr	r3, [pc, #700]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4bae      	ldr	r3, [pc, #696]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	0249      	lsls	r1, r1, #9
 8003866:	430a      	orrs	r2, r1
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e02f      	b.n	80038cc <HAL_RCC_OscConfig+0xdc>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10c      	bne.n	800388e <HAL_RCC_OscConfig+0x9e>
 8003874:	4ba9      	ldr	r3, [pc, #676]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4ba8      	ldr	r3, [pc, #672]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800387a:	49a9      	ldr	r1, [pc, #676]	; (8003b20 <HAL_RCC_OscConfig+0x330>)
 800387c:	400a      	ands	r2, r1
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	4ba6      	ldr	r3, [pc, #664]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4ba5      	ldr	r3, [pc, #660]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003886:	49a7      	ldr	r1, [pc, #668]	; (8003b24 <HAL_RCC_OscConfig+0x334>)
 8003888:	400a      	ands	r2, r1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e01e      	b.n	80038cc <HAL_RCC_OscConfig+0xdc>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b05      	cmp	r3, #5
 8003894:	d10e      	bne.n	80038b4 <HAL_RCC_OscConfig+0xc4>
 8003896:	4ba1      	ldr	r3, [pc, #644]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	4ba0      	ldr	r3, [pc, #640]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800389c:	2180      	movs	r1, #128	; 0x80
 800389e:	02c9      	lsls	r1, r1, #11
 80038a0:	430a      	orrs	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	4b9d      	ldr	r3, [pc, #628]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b9c      	ldr	r3, [pc, #624]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80038aa:	2180      	movs	r1, #128	; 0x80
 80038ac:	0249      	lsls	r1, r1, #9
 80038ae:	430a      	orrs	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	e00b      	b.n	80038cc <HAL_RCC_OscConfig+0xdc>
 80038b4:	4b99      	ldr	r3, [pc, #612]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b98      	ldr	r3, [pc, #608]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80038ba:	4999      	ldr	r1, [pc, #612]	; (8003b20 <HAL_RCC_OscConfig+0x330>)
 80038bc:	400a      	ands	r2, r1
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	4b96      	ldr	r3, [pc, #600]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b95      	ldr	r3, [pc, #596]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80038c6:	4997      	ldr	r1, [pc, #604]	; (8003b24 <HAL_RCC_OscConfig+0x334>)
 80038c8:	400a      	ands	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d014      	beq.n	80038fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7ff f9b8 	bl	8002c48 <HAL_GetTick>
 80038d8:	0003      	movs	r3, r0
 80038da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038de:	f7ff f9b3 	bl	8002c48 <HAL_GetTick>
 80038e2:	0002      	movs	r2, r0
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b64      	cmp	r3, #100	; 0x64
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e28a      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f0:	4b8a      	ldr	r3, [pc, #552]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	029b      	lsls	r3, r3, #10
 80038f8:	4013      	ands	r3, r2
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0xee>
 80038fc:	e015      	b.n	800392a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7ff f9a3 	bl	8002c48 <HAL_GetTick>
 8003902:	0003      	movs	r3, r0
 8003904:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003908:	f7ff f99e 	bl	8002c48 <HAL_GetTick>
 800390c:	0002      	movs	r2, r0
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e275      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	4b80      	ldr	r3, [pc, #512]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	029b      	lsls	r3, r3, #10
 8003922:	4013      	ands	r3, r2
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x118>
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2202      	movs	r2, #2
 8003930:	4013      	ands	r3, r2
 8003932:	d100      	bne.n	8003936 <HAL_RCC_OscConfig+0x146>
 8003934:	e069      	b.n	8003a0a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003936:	4b79      	ldr	r3, [pc, #484]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	220c      	movs	r2, #12
 800393c:	4013      	ands	r3, r2
 800393e:	d00b      	beq.n	8003958 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003940:	4b76      	ldr	r3, [pc, #472]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	220c      	movs	r2, #12
 8003946:	4013      	ands	r3, r2
 8003948:	2b08      	cmp	r3, #8
 800394a:	d11c      	bne.n	8003986 <HAL_RCC_OscConfig+0x196>
 800394c:	4b73      	ldr	r3, [pc, #460]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	025b      	lsls	r3, r3, #9
 8003954:	4013      	ands	r3, r2
 8003956:	d116      	bne.n	8003986 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003958:	4b70      	ldr	r3, [pc, #448]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2202      	movs	r2, #2
 800395e:	4013      	ands	r3, r2
 8003960:	d005      	beq.n	800396e <HAL_RCC_OscConfig+0x17e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d001      	beq.n	800396e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e24b      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396e:	4b6b      	ldr	r3, [pc, #428]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	22f8      	movs	r2, #248	; 0xf8
 8003974:	4393      	bics	r3, r2
 8003976:	0019      	movs	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	00da      	lsls	r2, r3, #3
 800397e:	4b67      	ldr	r3, [pc, #412]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003980:	430a      	orrs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003984:	e041      	b.n	8003a0a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d024      	beq.n	80039d8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800398e:	4b63      	ldr	r3, [pc, #396]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4b62      	ldr	r3, [pc, #392]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003994:	2101      	movs	r1, #1
 8003996:	430a      	orrs	r2, r1
 8003998:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399a:	f7ff f955 	bl	8002c48 <HAL_GetTick>
 800399e:	0003      	movs	r3, r0
 80039a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a4:	f7ff f950 	bl	8002c48 <HAL_GetTick>
 80039a8:	0002      	movs	r2, r0
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e227      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b6:	4b59      	ldr	r3, [pc, #356]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2202      	movs	r2, #2
 80039bc:	4013      	ands	r3, r2
 80039be:	d0f1      	beq.n	80039a4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c0:	4b56      	ldr	r3, [pc, #344]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	22f8      	movs	r2, #248	; 0xf8
 80039c6:	4393      	bics	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	00da      	lsls	r2, r3, #3
 80039d0:	4b52      	ldr	r3, [pc, #328]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80039d2:	430a      	orrs	r2, r1
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e018      	b.n	8003a0a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d8:	4b50      	ldr	r3, [pc, #320]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b4f      	ldr	r3, [pc, #316]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80039de:	2101      	movs	r1, #1
 80039e0:	438a      	bics	r2, r1
 80039e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7ff f930 	bl	8002c48 <HAL_GetTick>
 80039e8:	0003      	movs	r3, r0
 80039ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ee:	f7ff f92b 	bl	8002c48 <HAL_GetTick>
 80039f2:	0002      	movs	r2, r0
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e202      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a00:	4b46      	ldr	r3, [pc, #280]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2202      	movs	r2, #2
 8003a06:	4013      	ands	r3, r2
 8003a08:	d1f1      	bne.n	80039ee <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2208      	movs	r2, #8
 8003a10:	4013      	ands	r3, r2
 8003a12:	d036      	beq.n	8003a82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d019      	beq.n	8003a50 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1c:	4b3f      	ldr	r3, [pc, #252]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a20:	4b3e      	ldr	r3, [pc, #248]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a22:	2101      	movs	r1, #1
 8003a24:	430a      	orrs	r2, r1
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a28:	f7ff f90e 	bl	8002c48 <HAL_GetTick>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a32:	f7ff f909 	bl	8002c48 <HAL_GetTick>
 8003a36:	0002      	movs	r2, r0
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1e0      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a44:	4b35      	ldr	r3, [pc, #212]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	2202      	movs	r2, #2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d0f1      	beq.n	8003a32 <HAL_RCC_OscConfig+0x242>
 8003a4e:	e018      	b.n	8003a82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a50:	4b32      	ldr	r3, [pc, #200]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a54:	4b31      	ldr	r3, [pc, #196]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a56:	2101      	movs	r1, #1
 8003a58:	438a      	bics	r2, r1
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7ff f8f4 	bl	8002c48 <HAL_GetTick>
 8003a60:	0003      	movs	r3, r0
 8003a62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a66:	f7ff f8ef 	bl	8002c48 <HAL_GetTick>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e1c6      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a78:	4b28      	ldr	r3, [pc, #160]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d1f1      	bne.n	8003a66 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2204      	movs	r2, #4
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d100      	bne.n	8003a8e <HAL_RCC_OscConfig+0x29e>
 8003a8c:	e0b4      	b.n	8003bf8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8e:	201f      	movs	r0, #31
 8003a90:	183b      	adds	r3, r7, r0
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a96:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	055b      	lsls	r3, r3, #21
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d110      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003aa8:	2180      	movs	r1, #128	; 0x80
 8003aaa:	0549      	lsls	r1, r1, #21
 8003aac:	430a      	orrs	r2, r1
 8003aae:	61da      	str	r2, [r3, #28]
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	2380      	movs	r3, #128	; 0x80
 8003ab6:	055b      	lsls	r3, r3, #21
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003abe:	183b      	adds	r3, r7, r0
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	4b18      	ldr	r3, [pc, #96]	; (8003b28 <HAL_RCC_OscConfig+0x338>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4013      	ands	r3, r2
 8003ace:	d11a      	bne.n	8003b06 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad0:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <HAL_RCC_OscConfig+0x338>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <HAL_RCC_OscConfig+0x338>)
 8003ad6:	2180      	movs	r1, #128	; 0x80
 8003ad8:	0049      	lsls	r1, r1, #1
 8003ada:	430a      	orrs	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ade:	f7ff f8b3 	bl	8002c48 <HAL_GetTick>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae8:	f7ff f8ae 	bl	8002c48 <HAL_GetTick>
 8003aec:	0002      	movs	r2, r0
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	; 0x64
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e185      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afa:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCC_OscConfig+0x338>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4013      	ands	r3, r2
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d10e      	bne.n	8003b2c <HAL_RCC_OscConfig+0x33c>
 8003b0e:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003b10:	6a1a      	ldr	r2, [r3, #32]
 8003b12:	4b02      	ldr	r3, [pc, #8]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003b14:	2101      	movs	r1, #1
 8003b16:	430a      	orrs	r2, r1
 8003b18:	621a      	str	r2, [r3, #32]
 8003b1a:	e035      	b.n	8003b88 <HAL_RCC_OscConfig+0x398>
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	fffeffff 	.word	0xfffeffff
 8003b24:	fffbffff 	.word	0xfffbffff
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10c      	bne.n	8003b4e <HAL_RCC_OscConfig+0x35e>
 8003b34:	4bb6      	ldr	r3, [pc, #728]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003b36:	6a1a      	ldr	r2, [r3, #32]
 8003b38:	4bb5      	ldr	r3, [pc, #724]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	438a      	bics	r2, r1
 8003b3e:	621a      	str	r2, [r3, #32]
 8003b40:	4bb3      	ldr	r3, [pc, #716]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003b42:	6a1a      	ldr	r2, [r3, #32]
 8003b44:	4bb2      	ldr	r3, [pc, #712]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003b46:	2104      	movs	r1, #4
 8003b48:	438a      	bics	r2, r1
 8003b4a:	621a      	str	r2, [r3, #32]
 8003b4c:	e01c      	b.n	8003b88 <HAL_RCC_OscConfig+0x398>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b05      	cmp	r3, #5
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x380>
 8003b56:	4bae      	ldr	r3, [pc, #696]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003b58:	6a1a      	ldr	r2, [r3, #32]
 8003b5a:	4bad      	ldr	r3, [pc, #692]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003b5c:	2104      	movs	r1, #4
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	621a      	str	r2, [r3, #32]
 8003b62:	4bab      	ldr	r3, [pc, #684]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003b64:	6a1a      	ldr	r2, [r3, #32]
 8003b66:	4baa      	ldr	r3, [pc, #680]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003b68:	2101      	movs	r1, #1
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	621a      	str	r2, [r3, #32]
 8003b6e:	e00b      	b.n	8003b88 <HAL_RCC_OscConfig+0x398>
 8003b70:	4ba7      	ldr	r3, [pc, #668]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	4ba6      	ldr	r3, [pc, #664]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003b76:	2101      	movs	r1, #1
 8003b78:	438a      	bics	r2, r1
 8003b7a:	621a      	str	r2, [r3, #32]
 8003b7c:	4ba4      	ldr	r3, [pc, #656]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003b7e:	6a1a      	ldr	r2, [r3, #32]
 8003b80:	4ba3      	ldr	r3, [pc, #652]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003b82:	2104      	movs	r1, #4
 8003b84:	438a      	bics	r2, r1
 8003b86:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d014      	beq.n	8003bba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b90:	f7ff f85a 	bl	8002c48 <HAL_GetTick>
 8003b94:	0003      	movs	r3, r0
 8003b96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	e009      	b.n	8003bae <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b9a:	f7ff f855 	bl	8002c48 <HAL_GetTick>
 8003b9e:	0002      	movs	r2, r0
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	4a9b      	ldr	r2, [pc, #620]	; (8003e14 <HAL_RCC_OscConfig+0x624>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e12b      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bae:	4b98      	ldr	r3, [pc, #608]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCC_OscConfig+0x3aa>
 8003bb8:	e013      	b.n	8003be2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bba:	f7ff f845 	bl	8002c48 <HAL_GetTick>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc2:	e009      	b.n	8003bd8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc4:	f7ff f840 	bl	8002c48 <HAL_GetTick>
 8003bc8:	0002      	movs	r2, r0
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	4a91      	ldr	r2, [pc, #580]	; (8003e14 <HAL_RCC_OscConfig+0x624>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e116      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd8:	4b8d      	ldr	r3, [pc, #564]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	4013      	ands	r3, r2
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003be2:	231f      	movs	r3, #31
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d105      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bec:	4b88      	ldr	r3, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	4b87      	ldr	r3, [pc, #540]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003bf2:	4989      	ldr	r1, [pc, #548]	; (8003e18 <HAL_RCC_OscConfig+0x628>)
 8003bf4:	400a      	ands	r2, r1
 8003bf6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d063      	beq.n	8003cca <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d12a      	bne.n	8003c60 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c0a:	4b81      	ldr	r3, [pc, #516]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c0e:	4b80      	ldr	r3, [pc, #512]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c10:	2104      	movs	r1, #4
 8003c12:	430a      	orrs	r2, r1
 8003c14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003c16:	4b7e      	ldr	r3, [pc, #504]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1a:	4b7d      	ldr	r3, [pc, #500]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c22:	f7ff f811 	bl	8002c48 <HAL_GetTick>
 8003c26:	0003      	movs	r3, r0
 8003c28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003c2c:	f7ff f80c 	bl	8002c48 <HAL_GetTick>
 8003c30:	0002      	movs	r2, r0
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0e3      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c3e:	4b74      	ldr	r3, [pc, #464]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	2202      	movs	r2, #2
 8003c44:	4013      	ands	r3, r2
 8003c46:	d0f1      	beq.n	8003c2c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c48:	4b71      	ldr	r3, [pc, #452]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4c:	22f8      	movs	r2, #248	; 0xf8
 8003c4e:	4393      	bics	r3, r2
 8003c50:	0019      	movs	r1, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	00da      	lsls	r2, r3, #3
 8003c58:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	635a      	str	r2, [r3, #52]	; 0x34
 8003c5e:	e034      	b.n	8003cca <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	3305      	adds	r3, #5
 8003c66:	d111      	bne.n	8003c8c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003c68:	4b69      	ldr	r3, [pc, #420]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c6c:	4b68      	ldr	r3, [pc, #416]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c6e:	2104      	movs	r1, #4
 8003c70:	438a      	bics	r2, r1
 8003c72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003c74:	4b66      	ldr	r3, [pc, #408]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c78:	22f8      	movs	r2, #248	; 0xf8
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	00da      	lsls	r2, r3, #3
 8003c84:	4b62      	ldr	r3, [pc, #392]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c86:	430a      	orrs	r2, r1
 8003c88:	635a      	str	r2, [r3, #52]	; 0x34
 8003c8a:	e01e      	b.n	8003cca <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c8c:	4b60      	ldr	r3, [pc, #384]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c90:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c92:	2104      	movs	r1, #4
 8003c94:	430a      	orrs	r2, r1
 8003c96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003c98:	4b5d      	ldr	r3, [pc, #372]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c9c:	4b5c      	ldr	r3, [pc, #368]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	438a      	bics	r2, r1
 8003ca2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca4:	f7fe ffd0 	bl	8002c48 <HAL_GetTick>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003cae:	f7fe ffcb 	bl	8002c48 <HAL_GetTick>
 8003cb2:	0002      	movs	r2, r0
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e0a2      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003cc0:	4b53      	ldr	r3, [pc, #332]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d1f1      	bne.n	8003cae <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d100      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x4e4>
 8003cd2:	e097      	b.n	8003e04 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cd4:	4b4e      	ldr	r3, [pc, #312]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	220c      	movs	r2, #12
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d100      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x4f2>
 8003ce0:	e06b      	b.n	8003dba <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d14c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cea:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4b48      	ldr	r3, [pc, #288]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003cf0:	494a      	ldr	r1, [pc, #296]	; (8003e1c <HAL_RCC_OscConfig+0x62c>)
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf6:	f7fe ffa7 	bl	8002c48 <HAL_GetTick>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fe ffa2 	bl	8002c48 <HAL_GetTick>
 8003d04:	0002      	movs	r2, r0
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e079      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d12:	4b3f      	ldr	r3, [pc, #252]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	2380      	movs	r3, #128	; 0x80
 8003d18:	049b      	lsls	r3, r3, #18
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d1e:	4b3c      	ldr	r3, [pc, #240]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	220f      	movs	r2, #15
 8003d24:	4393      	bics	r3, r2
 8003d26:	0019      	movs	r1, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	4b38      	ldr	r3, [pc, #224]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d32:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4a3a      	ldr	r2, [pc, #232]	; (8003e20 <HAL_RCC_OscConfig+0x630>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	431a      	orrs	r2, r3
 8003d46:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d4c:	4b30      	ldr	r3, [pc, #192]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b2f      	ldr	r3, [pc, #188]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003d52:	2180      	movs	r1, #128	; 0x80
 8003d54:	0449      	lsls	r1, r1, #17
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5a:	f7fe ff75 	bl	8002c48 <HAL_GetTick>
 8003d5e:	0003      	movs	r3, r0
 8003d60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fe ff70 	bl	8002c48 <HAL_GetTick>
 8003d68:	0002      	movs	r2, r0
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e047      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d76:	4b26      	ldr	r3, [pc, #152]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	049b      	lsls	r3, r3, #18
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x574>
 8003d82:	e03f      	b.n	8003e04 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d84:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003d8a:	4924      	ldr	r1, [pc, #144]	; (8003e1c <HAL_RCC_OscConfig+0x62c>)
 8003d8c:	400a      	ands	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fe ff5a 	bl	8002c48 <HAL_GetTick>
 8003d94:	0003      	movs	r3, r0
 8003d96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9a:	f7fe ff55 	bl	8002c48 <HAL_GetTick>
 8003d9e:	0002      	movs	r2, r0
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e02c      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dac:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	049b      	lsls	r3, r3, #18
 8003db4:	4013      	ands	r3, r2
 8003db6:	d1f0      	bne.n	8003d9a <HAL_RCC_OscConfig+0x5aa>
 8003db8:	e024      	b.n	8003e04 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e01f      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003dc6:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003dcc:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	025b      	lsls	r3, r3, #9
 8003dd8:	401a      	ands	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d10e      	bne.n	8003e00 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	220f      	movs	r2, #15
 8003de6:	401a      	ands	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d107      	bne.n	8003e00 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	23f0      	movs	r3, #240	; 0xf0
 8003df4:	039b      	lsls	r3, r3, #14
 8003df6:	401a      	ands	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b008      	add	sp, #32
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	40021000 	.word	0x40021000
 8003e14:	00001388 	.word	0x00001388
 8003e18:	efffffff 	.word	0xefffffff
 8003e1c:	feffffff 	.word	0xfeffffff
 8003e20:	ffc2ffff 	.word	0xffc2ffff

08003e24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0b3      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e38:	4b5b      	ldr	r3, [pc, #364]	; (8003fa8 <HAL_RCC_ClockConfig+0x184>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4013      	ands	r3, r2
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d911      	bls.n	8003e6a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b58      	ldr	r3, [pc, #352]	; (8003fa8 <HAL_RCC_ClockConfig+0x184>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4393      	bics	r3, r2
 8003e4e:	0019      	movs	r1, r3
 8003e50:	4b55      	ldr	r3, [pc, #340]	; (8003fa8 <HAL_RCC_ClockConfig+0x184>)
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e58:	4b53      	ldr	r3, [pc, #332]	; (8003fa8 <HAL_RCC_ClockConfig+0x184>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	4013      	ands	r3, r2
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e09a      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	4013      	ands	r3, r2
 8003e72:	d015      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2204      	movs	r2, #4
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d006      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e7e:	4b4b      	ldr	r3, [pc, #300]	; (8003fac <HAL_RCC_ClockConfig+0x188>)
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	4b4a      	ldr	r3, [pc, #296]	; (8003fac <HAL_RCC_ClockConfig+0x188>)
 8003e84:	21e0      	movs	r1, #224	; 0xe0
 8003e86:	00c9      	lsls	r1, r1, #3
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e8c:	4b47      	ldr	r3, [pc, #284]	; (8003fac <HAL_RCC_ClockConfig+0x188>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	22f0      	movs	r2, #240	; 0xf0
 8003e92:	4393      	bics	r3, r2
 8003e94:	0019      	movs	r1, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	4b44      	ldr	r3, [pc, #272]	; (8003fac <HAL_RCC_ClockConfig+0x188>)
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d040      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	4b3e      	ldr	r3, [pc, #248]	; (8003fac <HAL_RCC_ClockConfig+0x188>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	029b      	lsls	r3, r3, #10
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d114      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e06e      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eca:	4b38      	ldr	r3, [pc, #224]	; (8003fac <HAL_RCC_ClockConfig+0x188>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	049b      	lsls	r3, r3, #18
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d108      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e062      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eda:	4b34      	ldr	r3, [pc, #208]	; (8003fac <HAL_RCC_ClockConfig+0x188>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e05b      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ee8:	4b30      	ldr	r3, [pc, #192]	; (8003fac <HAL_RCC_ClockConfig+0x188>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2203      	movs	r2, #3
 8003eee:	4393      	bics	r3, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <HAL_RCC_ClockConfig+0x188>)
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003efc:	f7fe fea4 	bl	8002c48 <HAL_GetTick>
 8003f00:	0003      	movs	r3, r0
 8003f02:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f04:	e009      	b.n	8003f1a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f06:	f7fe fe9f 	bl	8002c48 <HAL_GetTick>
 8003f0a:	0002      	movs	r2, r0
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	4a27      	ldr	r2, [pc, #156]	; (8003fb0 <HAL_RCC_ClockConfig+0x18c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e042      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	4b24      	ldr	r3, [pc, #144]	; (8003fac <HAL_RCC_ClockConfig+0x188>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	220c      	movs	r2, #12
 8003f20:	401a      	ands	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d1ec      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b1e      	ldr	r3, [pc, #120]	; (8003fa8 <HAL_RCC_ClockConfig+0x184>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2201      	movs	r2, #1
 8003f32:	4013      	ands	r3, r2
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d211      	bcs.n	8003f5e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <HAL_RCC_ClockConfig+0x184>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	4393      	bics	r3, r2
 8003f42:	0019      	movs	r1, r3
 8003f44:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <HAL_RCC_ClockConfig+0x184>)
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4c:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <HAL_RCC_ClockConfig+0x184>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2201      	movs	r2, #1
 8003f52:	4013      	ands	r3, r2
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d001      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e020      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2204      	movs	r2, #4
 8003f64:	4013      	ands	r3, r2
 8003f66:	d009      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f68:	4b10      	ldr	r3, [pc, #64]	; (8003fac <HAL_RCC_ClockConfig+0x188>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	4a11      	ldr	r2, [pc, #68]	; (8003fb4 <HAL_RCC_ClockConfig+0x190>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <HAL_RCC_ClockConfig+0x188>)
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f7c:	f000 f820 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 8003f80:	0001      	movs	r1, r0
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <HAL_RCC_ClockConfig+0x188>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	220f      	movs	r2, #15
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	4a0a      	ldr	r2, [pc, #40]	; (8003fb8 <HAL_RCC_ClockConfig+0x194>)
 8003f8e:	5cd3      	ldrb	r3, [r2, r3]
 8003f90:	000a      	movs	r2, r1
 8003f92:	40da      	lsrs	r2, r3
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_RCC_ClockConfig+0x198>)
 8003f96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f7fe fe0f 	bl	8002bbc <HAL_InitTick>
  
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b004      	add	sp, #16
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40022000 	.word	0x40022000
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	00001388 	.word	0x00001388
 8003fb4:	fffff8ff 	.word	0xfffff8ff
 8003fb8:	080082d0 	.word	0x080082d0
 8003fbc:	20000004 	.word	0x20000004

08003fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b08f      	sub	sp, #60	; 0x3c
 8003fc4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003fc6:	2314      	movs	r3, #20
 8003fc8:	18fb      	adds	r3, r7, r3
 8003fca:	4a2b      	ldr	r2, [pc, #172]	; (8004078 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fcc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003fce:	c313      	stmia	r3!, {r0, r1, r4}
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003fd4:	1d3b      	adds	r3, r7, #4
 8003fd6:	4a29      	ldr	r2, [pc, #164]	; (800407c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fd8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003fda:	c313      	stmia	r3!, {r0, r1, r4}
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe8:	2300      	movs	r3, #0
 8003fea:	637b      	str	r3, [r7, #52]	; 0x34
 8003fec:	2300      	movs	r3, #0
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003ff4:	4b22      	ldr	r3, [pc, #136]	; (8004080 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	220c      	movs	r2, #12
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b04      	cmp	r3, #4
 8004002:	d002      	beq.n	800400a <HAL_RCC_GetSysClockFreq+0x4a>
 8004004:	2b08      	cmp	r3, #8
 8004006:	d003      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x50>
 8004008:	e02d      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800400a:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800400c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800400e:	e02d      	b.n	800406c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	0c9b      	lsrs	r3, r3, #18
 8004014:	220f      	movs	r2, #15
 8004016:	4013      	ands	r3, r2
 8004018:	2214      	movs	r2, #20
 800401a:	18ba      	adds	r2, r7, r2
 800401c:	5cd3      	ldrb	r3, [r2, r3]
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004020:	4b17      	ldr	r3, [pc, #92]	; (8004080 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	220f      	movs	r2, #15
 8004026:	4013      	ands	r3, r2
 8004028:	1d3a      	adds	r2, r7, #4
 800402a:	5cd3      	ldrb	r3, [r2, r3]
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800402e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	025b      	lsls	r3, r3, #9
 8004034:	4013      	ands	r3, r2
 8004036:	d009      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800403a:	4812      	ldr	r0, [pc, #72]	; (8004084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800403c:	f7fc f86e 	bl	800011c <__udivsi3>
 8004040:	0003      	movs	r3, r0
 8004042:	001a      	movs	r2, r3
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	4353      	muls	r3, r2
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
 800404a:	e009      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800404c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800404e:	000a      	movs	r2, r1
 8004050:	0152      	lsls	r2, r2, #5
 8004052:	1a52      	subs	r2, r2, r1
 8004054:	0193      	lsls	r3, r2, #6
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	185b      	adds	r3, r3, r1
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004062:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004064:	e002      	b.n	800406c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004068:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800406a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800406e:	0018      	movs	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	b00f      	add	sp, #60	; 0x3c
 8004074:	bd90      	pop	{r4, r7, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	08007b1c 	.word	0x08007b1c
 800407c:	08007b2c 	.word	0x08007b2c
 8004080:	40021000 	.word	0x40021000
 8004084:	007a1200 	.word	0x007a1200

08004088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800408c:	4b02      	ldr	r3, [pc, #8]	; (8004098 <HAL_RCC_GetHCLKFreq+0x10>)
 800408e:	681b      	ldr	r3, [r3, #0]
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	20000004 	.word	0x20000004

0800409c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80040a0:	f7ff fff2 	bl	8004088 <HAL_RCC_GetHCLKFreq>
 80040a4:	0001      	movs	r1, r0
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	2207      	movs	r2, #7
 80040ae:	4013      	ands	r3, r2
 80040b0:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040b2:	5cd3      	ldrb	r3, [r2, r3]
 80040b4:	40d9      	lsrs	r1, r3
 80040b6:	000b      	movs	r3, r1
}    
 80040b8:	0018      	movs	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	40021000 	.word	0x40021000
 80040c4:	080082e0 	.word	0x080082e0

080040c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	025b      	lsls	r3, r3, #9
 80040e0:	4013      	ands	r3, r2
 80040e2:	d100      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80040e4:	e08e      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80040e6:	2017      	movs	r0, #23
 80040e8:	183b      	adds	r3, r7, r0
 80040ea:	2200      	movs	r2, #0
 80040ec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ee:	4b57      	ldr	r3, [pc, #348]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	055b      	lsls	r3, r3, #21
 80040f6:	4013      	ands	r3, r2
 80040f8:	d110      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040fa:	4b54      	ldr	r3, [pc, #336]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	4b53      	ldr	r3, [pc, #332]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	0549      	lsls	r1, r1, #21
 8004104:	430a      	orrs	r2, r1
 8004106:	61da      	str	r2, [r3, #28]
 8004108:	4b50      	ldr	r3, [pc, #320]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800410a:	69da      	ldr	r2, [r3, #28]
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	055b      	lsls	r3, r3, #21
 8004110:	4013      	ands	r3, r2
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004116:	183b      	adds	r3, r7, r0
 8004118:	2201      	movs	r2, #1
 800411a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411c:	4b4c      	ldr	r3, [pc, #304]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4013      	ands	r3, r2
 8004126:	d11a      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004128:	4b49      	ldr	r3, [pc, #292]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	4b48      	ldr	r3, [pc, #288]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800412e:	2180      	movs	r1, #128	; 0x80
 8004130:	0049      	lsls	r1, r1, #1
 8004132:	430a      	orrs	r2, r1
 8004134:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fe fd87 	bl	8002c48 <HAL_GetTick>
 800413a:	0003      	movs	r3, r0
 800413c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413e:	e008      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004140:	f7fe fd82 	bl	8002c48 <HAL_GetTick>
 8004144:	0002      	movs	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e077      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004152:	4b3f      	ldr	r3, [pc, #252]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	4013      	ands	r3, r2
 800415c:	d0f0      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800415e:	4b3b      	ldr	r3, [pc, #236]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004160:	6a1a      	ldr	r2, [r3, #32]
 8004162:	23c0      	movs	r3, #192	; 0xc0
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4013      	ands	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d034      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	23c0      	movs	r3, #192	; 0xc0
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4013      	ands	r3, r2
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	429a      	cmp	r2, r3
 800417e:	d02c      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004180:	4b32      	ldr	r3, [pc, #200]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	4a33      	ldr	r2, [pc, #204]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004186:	4013      	ands	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800418a:	4b30      	ldr	r3, [pc, #192]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800418c:	6a1a      	ldr	r2, [r3, #32]
 800418e:	4b2f      	ldr	r3, [pc, #188]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	0249      	lsls	r1, r1, #9
 8004194:	430a      	orrs	r2, r1
 8004196:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004198:	4b2c      	ldr	r3, [pc, #176]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800419e:	492e      	ldr	r1, [pc, #184]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041a4:	4b29      	ldr	r3, [pc, #164]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	4013      	ands	r3, r2
 80041b0:	d013      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fe fd49 	bl	8002c48 <HAL_GetTick>
 80041b6:	0003      	movs	r3, r0
 80041b8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ba:	e009      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041bc:	f7fe fd44 	bl	8002c48 <HAL_GetTick>
 80041c0:	0002      	movs	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	4a25      	ldr	r2, [pc, #148]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e038      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	2202      	movs	r2, #2
 80041d6:	4013      	ands	r3, r2
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041da:	4b1c      	ldr	r3, [pc, #112]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	0019      	movs	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	4b18      	ldr	r3, [pc, #96]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041ea:	430a      	orrs	r2, r1
 80041ec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041ee:	2317      	movs	r3, #23
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d105      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f8:	4b14      	ldr	r3, [pc, #80]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	4b13      	ldr	r3, [pc, #76]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041fe:	4918      	ldr	r1, [pc, #96]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004200:	400a      	ands	r2, r1
 8004202:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2201      	movs	r2, #1
 800420a:	4013      	ands	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	2203      	movs	r2, #3
 8004214:	4393      	bics	r3, r2
 8004216:	0019      	movs	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800421e:	430a      	orrs	r2, r1
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2220      	movs	r2, #32
 8004228:	4013      	ands	r3, r2
 800422a:	d009      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800422c:	4b07      	ldr	r3, [pc, #28]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	2210      	movs	r2, #16
 8004232:	4393      	bics	r3, r2
 8004234:	0019      	movs	r1, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	4b04      	ldr	r3, [pc, #16]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800423c:	430a      	orrs	r2, r1
 800423e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	0018      	movs	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	b006      	add	sp, #24
 8004248:	bd80      	pop	{r7, pc}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	40021000 	.word	0x40021000
 8004250:	40007000 	.word	0x40007000
 8004254:	fffffcff 	.word	0xfffffcff
 8004258:	fffeffff 	.word	0xfffeffff
 800425c:	00001388 	.word	0x00001388
 8004260:	efffffff 	.word	0xefffffff

08004264 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e0a8      	b.n	80043c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	2382      	movs	r3, #130	; 0x82
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	429a      	cmp	r2, r3
 8004288:	d009      	beq.n	800429e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	61da      	str	r2, [r3, #28]
 8004290:	e005      	b.n	800429e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	225d      	movs	r2, #93	; 0x5d
 80042a8:	5c9b      	ldrb	r3, [r3, r2]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d107      	bne.n	80042c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	225c      	movs	r2, #92	; 0x5c
 80042b4:	2100      	movs	r1, #0
 80042b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	0018      	movs	r0, r3
 80042bc:	f7fe fb3a 	bl	8002934 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	225d      	movs	r2, #93	; 0x5d
 80042c4:	2102      	movs	r1, #2
 80042c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2140      	movs	r1, #64	; 0x40
 80042d4:	438a      	bics	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	23e0      	movs	r3, #224	; 0xe0
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d902      	bls.n	80042ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	e002      	b.n	80042f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	015b      	lsls	r3, r3, #5
 80042ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	23f0      	movs	r3, #240	; 0xf0
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d008      	beq.n	800430e <HAL_SPI_Init+0xaa>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	23e0      	movs	r3, #224	; 0xe0
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	429a      	cmp	r2, r3
 8004306:	d002      	beq.n	800430e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	2382      	movs	r3, #130	; 0x82
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	401a      	ands	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6899      	ldr	r1, [r3, #8]
 800431c:	2384      	movs	r3, #132	; 0x84
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	400b      	ands	r3, r1
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2102      	movs	r1, #2
 800432a:	400b      	ands	r3, r1
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	2101      	movs	r1, #1
 8004334:	400b      	ands	r3, r1
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6999      	ldr	r1, [r3, #24]
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	400b      	ands	r3, r1
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	2138      	movs	r1, #56	; 0x38
 800434a:	400b      	ands	r3, r1
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	2180      	movs	r1, #128	; 0x80
 8004354:	400b      	ands	r3, r1
 8004356:	431a      	orrs	r2, r3
 8004358:	0011      	movs	r1, r2
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	019b      	lsls	r3, r3, #6
 8004362:	401a      	ands	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	0c1b      	lsrs	r3, r3, #16
 8004372:	2204      	movs	r2, #4
 8004374:	401a      	ands	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	2110      	movs	r1, #16
 800437c:	400b      	ands	r3, r1
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004384:	2108      	movs	r1, #8
 8004386:	400b      	ands	r3, r1
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68d9      	ldr	r1, [r3, #12]
 800438e:	23f0      	movs	r3, #240	; 0xf0
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	400b      	ands	r3, r1
 8004394:	431a      	orrs	r2, r3
 8004396:	0011      	movs	r1, r2
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	015b      	lsls	r3, r3, #5
 800439e:	401a      	ands	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69da      	ldr	r2, [r3, #28]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4907      	ldr	r1, [pc, #28]	; (80043d0 <HAL_SPI_Init+0x16c>)
 80043b4:	400a      	ands	r2, r1
 80043b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	225d      	movs	r2, #93	; 0x5d
 80043c2:	2101      	movs	r1, #1
 80043c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b004      	add	sp, #16
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	fffff7ff 	.word	0xfffff7ff

080043d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	1dbb      	adds	r3, r7, #6
 80043e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043e4:	231f      	movs	r3, #31
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	225c      	movs	r2, #92	; 0x5c
 80043f0:	5c9b      	ldrb	r3, [r3, r2]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_SPI_Transmit+0x26>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e140      	b.n	800467c <HAL_SPI_Transmit+0x2a8>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	225c      	movs	r2, #92	; 0x5c
 80043fe:	2101      	movs	r1, #1
 8004400:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004402:	f7fe fc21 	bl	8002c48 <HAL_GetTick>
 8004406:	0003      	movs	r3, r0
 8004408:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800440a:	2316      	movs	r3, #22
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	1dba      	adds	r2, r7, #6
 8004410:	8812      	ldrh	r2, [r2, #0]
 8004412:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	225d      	movs	r2, #93	; 0x5d
 8004418:	5c9b      	ldrb	r3, [r3, r2]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	d004      	beq.n	800442a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004420:	231f      	movs	r3, #31
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	2202      	movs	r2, #2
 8004426:	701a      	strb	r2, [r3, #0]
    goto error;
 8004428:	e11d      	b.n	8004666 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_SPI_Transmit+0x64>
 8004430:	1dbb      	adds	r3, r7, #6
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d104      	bne.n	8004442 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004438:	231f      	movs	r3, #31
 800443a:	18fb      	adds	r3, r7, r3
 800443c:	2201      	movs	r2, #1
 800443e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004440:	e111      	b.n	8004666 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	225d      	movs	r2, #93	; 0x5d
 8004446:	2103      	movs	r1, #3
 8004448:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1dba      	adds	r2, r7, #6
 800445a:	8812      	ldrh	r2, [r2, #0]
 800445c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1dba      	adds	r2, r7, #6
 8004462:	8812      	ldrh	r2, [r2, #0]
 8004464:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2244      	movs	r2, #68	; 0x44
 8004470:	2100      	movs	r1, #0
 8004472:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2246      	movs	r2, #70	; 0x46
 8004478:	2100      	movs	r1, #0
 800447a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	021b      	lsls	r3, r3, #8
 8004490:	429a      	cmp	r2, r3
 8004492:	d110      	bne.n	80044b6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2140      	movs	r1, #64	; 0x40
 80044a0:	438a      	bics	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2180      	movs	r1, #128	; 0x80
 80044b0:	01c9      	lsls	r1, r1, #7
 80044b2:	430a      	orrs	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2240      	movs	r2, #64	; 0x40
 80044be:	4013      	ands	r3, r2
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d007      	beq.n	80044d4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2140      	movs	r1, #64	; 0x40
 80044d0:	430a      	orrs	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	23e0      	movs	r3, #224	; 0xe0
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	429a      	cmp	r2, r3
 80044de:	d94e      	bls.n	800457e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <HAL_SPI_Transmit+0x11e>
 80044e8:	2316      	movs	r3, #22
 80044ea:	18fb      	adds	r3, r7, r3
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d13f      	bne.n	8004572 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	881a      	ldrh	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	1c9a      	adds	r2, r3, #2
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004516:	e02c      	b.n	8004572 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2202      	movs	r2, #2
 8004520:	4013      	ands	r3, r2
 8004522:	2b02      	cmp	r3, #2
 8004524:	d112      	bne.n	800454c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	881a      	ldrh	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	1c9a      	adds	r2, r3, #2
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	87da      	strh	r2, [r3, #62]	; 0x3e
 800454a:	e012      	b.n	8004572 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800454c:	f7fe fb7c 	bl	8002c48 <HAL_GetTick>
 8004550:	0002      	movs	r2, r0
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d802      	bhi.n	8004562 <HAL_SPI_Transmit+0x18e>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	3301      	adds	r3, #1
 8004560:	d102      	bne.n	8004568 <HAL_SPI_Transmit+0x194>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d104      	bne.n	8004572 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8004568:	231f      	movs	r3, #31
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	2203      	movs	r2, #3
 800456e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004570:	e079      	b.n	8004666 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1cd      	bne.n	8004518 <HAL_SPI_Transmit+0x144>
 800457c:	e04f      	b.n	800461e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <HAL_SPI_Transmit+0x1bc>
 8004586:	2316      	movs	r3, #22
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d141      	bne.n	8004614 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	7812      	ldrb	r2, [r2, #0]
 800459c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80045b6:	e02d      	b.n	8004614 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2202      	movs	r2, #2
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d113      	bne.n	80045ee <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	7812      	ldrb	r2, [r2, #0]
 80045d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045ec:	e012      	b.n	8004614 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ee:	f7fe fb2b 	bl	8002c48 <HAL_GetTick>
 80045f2:	0002      	movs	r2, r0
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d802      	bhi.n	8004604 <HAL_SPI_Transmit+0x230>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	3301      	adds	r3, #1
 8004602:	d102      	bne.n	800460a <HAL_SPI_Transmit+0x236>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d104      	bne.n	8004614 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800460a:	231f      	movs	r3, #31
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	2203      	movs	r2, #3
 8004610:	701a      	strb	r2, [r3, #0]
          goto error;
 8004612:	e028      	b.n	8004666 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1cc      	bne.n	80045b8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	6839      	ldr	r1, [r7, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	0018      	movs	r0, r3
 8004626:	f000 fb2f 	bl	8004c88 <SPI_EndRxTxTransaction>
 800462a:	1e03      	subs	r3, r0, #0
 800462c:	d002      	beq.n	8004634 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10a      	bne.n	8004652 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800465a:	231f      	movs	r3, #31
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	2201      	movs	r2, #1
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	e000      	b.n	8004666 <HAL_SPI_Transmit+0x292>
  }

error:
 8004664:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	225d      	movs	r2, #93	; 0x5d
 800466a:	2101      	movs	r1, #1
 800466c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	225c      	movs	r2, #92	; 0x5c
 8004672:	2100      	movs	r1, #0
 8004674:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004676:	231f      	movs	r3, #31
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	781b      	ldrb	r3, [r3, #0]
}
 800467c:	0018      	movs	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	b008      	add	sp, #32
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	001a      	movs	r2, r3
 8004692:	1cbb      	adds	r3, r7, #2
 8004694:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004696:	2301      	movs	r3, #1
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800469a:	2323      	movs	r3, #35	; 0x23
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	225c      	movs	r2, #92	; 0x5c
 80046a6:	5c9b      	ldrb	r3, [r3, r2]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_SPI_TransmitReceive+0x2c>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e1b5      	b.n	8004a1c <HAL_SPI_TransmitReceive+0x398>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	225c      	movs	r2, #92	; 0x5c
 80046b4:	2101      	movs	r1, #1
 80046b6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046b8:	f7fe fac6 	bl	8002c48 <HAL_GetTick>
 80046bc:	0003      	movs	r3, r0
 80046be:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046c0:	201b      	movs	r0, #27
 80046c2:	183b      	adds	r3, r7, r0
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	215d      	movs	r1, #93	; 0x5d
 80046c8:	5c52      	ldrb	r2, [r2, r1]
 80046ca:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80046d2:	2312      	movs	r3, #18
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	1cba      	adds	r2, r7, #2
 80046d8:	8812      	ldrh	r2, [r2, #0]
 80046da:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046dc:	183b      	adds	r3, r7, r0
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d011      	beq.n	8004708 <HAL_SPI_TransmitReceive+0x84>
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	2382      	movs	r3, #130	; 0x82
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d107      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d103      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x7a>
 80046f6:	183b      	adds	r3, r7, r0
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d004      	beq.n	8004708 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80046fe:	2323      	movs	r3, #35	; 0x23
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	2202      	movs	r2, #2
 8004704:	701a      	strb	r2, [r3, #0]
    goto error;
 8004706:	e17e      	b.n	8004a06 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d006      	beq.n	800471c <HAL_SPI_TransmitReceive+0x98>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_SPI_TransmitReceive+0x98>
 8004714:	1cbb      	adds	r3, r7, #2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800471c:	2323      	movs	r3, #35	; 0x23
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	2201      	movs	r2, #1
 8004722:	701a      	strb	r2, [r3, #0]
    goto error;
 8004724:	e16f      	b.n	8004a06 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	225d      	movs	r2, #93	; 0x5d
 800472a:	5c9b      	ldrb	r3, [r3, r2]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b04      	cmp	r3, #4
 8004730:	d003      	beq.n	800473a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	225d      	movs	r2, #93	; 0x5d
 8004736:	2105      	movs	r1, #5
 8004738:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1cba      	adds	r2, r7, #2
 800474a:	2146      	movs	r1, #70	; 0x46
 800474c:	8812      	ldrh	r2, [r2, #0]
 800474e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	1cba      	adds	r2, r7, #2
 8004754:	2144      	movs	r1, #68	; 0x44
 8004756:	8812      	ldrh	r2, [r2, #0]
 8004758:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	1cba      	adds	r2, r7, #2
 8004764:	8812      	ldrh	r2, [r2, #0]
 8004766:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1cba      	adds	r2, r7, #2
 800476c:	8812      	ldrh	r2, [r2, #0]
 800476e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	23e0      	movs	r3, #224	; 0xe0
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	429a      	cmp	r2, r3
 8004786:	d908      	bls.n	800479a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	49a4      	ldr	r1, [pc, #656]	; (8004a24 <HAL_SPI_TransmitReceive+0x3a0>)
 8004794:	400a      	ands	r2, r1
 8004796:	605a      	str	r2, [r3, #4]
 8004798:	e008      	b.n	80047ac <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2180      	movs	r1, #128	; 0x80
 80047a6:	0149      	lsls	r1, r1, #5
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2240      	movs	r2, #64	; 0x40
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b40      	cmp	r3, #64	; 0x40
 80047b8:	d007      	beq.n	80047ca <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2140      	movs	r1, #64	; 0x40
 80047c6:	430a      	orrs	r2, r1
 80047c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	23e0      	movs	r3, #224	; 0xe0
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d800      	bhi.n	80047d8 <HAL_SPI_TransmitReceive+0x154>
 80047d6:	e07f      	b.n	80048d8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x168>
 80047e0:	2312      	movs	r3, #18
 80047e2:	18fb      	adds	r3, r7, r3
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d000      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x168>
 80047ea:	e069      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	881a      	ldrh	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	1c9a      	adds	r2, r3, #2
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004810:	e056      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2202      	movs	r2, #2
 800481a:	4013      	ands	r3, r2
 800481c:	2b02      	cmp	r3, #2
 800481e:	d11b      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x1d4>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d016      	beq.n	8004858 <HAL_SPI_TransmitReceive+0x1d4>
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	2b01      	cmp	r3, #1
 800482e:	d113      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	881a      	ldrh	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	1c9a      	adds	r2, r3, #2
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2201      	movs	r2, #1
 8004860:	4013      	ands	r3, r2
 8004862:	2b01      	cmp	r3, #1
 8004864:	d11c      	bne.n	80048a0 <HAL_SPI_TransmitReceive+0x21c>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2246      	movs	r2, #70	; 0x46
 800486a:	5a9b      	ldrh	r3, [r3, r2]
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d016      	beq.n	80048a0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	b292      	uxth	r2, r2
 800487e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	1c9a      	adds	r2, r3, #2
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2246      	movs	r2, #70	; 0x46
 800488e:	5a9b      	ldrh	r3, [r3, r2]
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b299      	uxth	r1, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2246      	movs	r2, #70	; 0x46
 800489a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800489c:	2301      	movs	r3, #1
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048a0:	f7fe f9d2 	bl	8002c48 <HAL_GetTick>
 80048a4:	0002      	movs	r2, r0
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d807      	bhi.n	80048c0 <HAL_SPI_TransmitReceive+0x23c>
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	3301      	adds	r3, #1
 80048b4:	d004      	beq.n	80048c0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80048b6:	2323      	movs	r3, #35	; 0x23
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	2203      	movs	r2, #3
 80048bc:	701a      	strb	r2, [r3, #0]
        goto error;
 80048be:	e0a2      	b.n	8004a06 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1a3      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x18e>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2246      	movs	r2, #70	; 0x46
 80048ce:	5a9b      	ldrh	r3, [r3, r2]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d19d      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x18e>
 80048d6:	e085      	b.n	80049e4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_SPI_TransmitReceive+0x268>
 80048e0:	2312      	movs	r3, #18
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d000      	beq.n	80048ec <HAL_SPI_TransmitReceive+0x268>
 80048ea:	e070      	b.n	80049ce <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	7812      	ldrb	r2, [r2, #0]
 80048f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004912:	e05c      	b.n	80049ce <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2202      	movs	r2, #2
 800491c:	4013      	ands	r3, r2
 800491e:	2b02      	cmp	r3, #2
 8004920:	d11c      	bne.n	800495c <HAL_SPI_TransmitReceive+0x2d8>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d017      	beq.n	800495c <HAL_SPI_TransmitReceive+0x2d8>
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	2b01      	cmp	r3, #1
 8004930:	d114      	bne.n	800495c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	7812      	ldrb	r2, [r2, #0]
 800493e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2201      	movs	r2, #1
 8004964:	4013      	ands	r3, r2
 8004966:	2b01      	cmp	r3, #1
 8004968:	d11e      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x324>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2246      	movs	r2, #70	; 0x46
 800496e:	5a9b      	ldrh	r3, [r3, r2]
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d018      	beq.n	80049a8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	001a      	movs	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	7812      	ldrb	r2, [r2, #0]
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2246      	movs	r2, #70	; 0x46
 8004996:	5a9b      	ldrh	r3, [r3, r2]
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b299      	uxth	r1, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2246      	movs	r2, #70	; 0x46
 80049a2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049a4:	2301      	movs	r3, #1
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049a8:	f7fe f94e 	bl	8002c48 <HAL_GetTick>
 80049ac:	0002      	movs	r2, r0
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d802      	bhi.n	80049be <HAL_SPI_TransmitReceive+0x33a>
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	3301      	adds	r3, #1
 80049bc:	d102      	bne.n	80049c4 <HAL_SPI_TransmitReceive+0x340>
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d104      	bne.n	80049ce <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80049c4:	2323      	movs	r3, #35	; 0x23
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	2203      	movs	r2, #3
 80049ca:	701a      	strb	r2, [r3, #0]
        goto error;
 80049cc:	e01b      	b.n	8004a06 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d19d      	bne.n	8004914 <HAL_SPI_TransmitReceive+0x290>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2246      	movs	r2, #70	; 0x46
 80049dc:	5a9b      	ldrh	r3, [r3, r2]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d197      	bne.n	8004914 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	0018      	movs	r0, r3
 80049ec:	f000 f94c 	bl	8004c88 <SPI_EndRxTxTransaction>
 80049f0:	1e03      	subs	r3, r0, #0
 80049f2:	d007      	beq.n	8004a04 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80049f4:	2323      	movs	r3, #35	; 0x23
 80049f6:	18fb      	adds	r3, r7, r3
 80049f8:	2201      	movs	r2, #1
 80049fa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	661a      	str	r2, [r3, #96]	; 0x60
 8004a02:	e000      	b.n	8004a06 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004a04:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	225d      	movs	r2, #93	; 0x5d
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	225c      	movs	r2, #92	; 0x5c
 8004a12:	2100      	movs	r1, #0
 8004a14:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004a16:	2323      	movs	r3, #35	; 0x23
 8004a18:	18fb      	adds	r3, r7, r3
 8004a1a:	781b      	ldrb	r3, [r3, #0]
}
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b00a      	add	sp, #40	; 0x28
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	ffffefff 	.word	0xffffefff

08004a28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	1dfb      	adds	r3, r7, #7
 8004a36:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a38:	f7fe f906 	bl	8002c48 <HAL_GetTick>
 8004a3c:	0002      	movs	r2, r0
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	1a9b      	subs	r3, r3, r2
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	18d3      	adds	r3, r2, r3
 8004a46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a48:	f7fe f8fe 	bl	8002c48 <HAL_GetTick>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a50:	4b3a      	ldr	r3, [pc, #232]	; (8004b3c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	015b      	lsls	r3, r3, #5
 8004a56:	0d1b      	lsrs	r3, r3, #20
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	4353      	muls	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a5e:	e058      	b.n	8004b12 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	3301      	adds	r3, #1
 8004a64:	d055      	beq.n	8004b12 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a66:	f7fe f8ef 	bl	8002c48 <HAL_GetTick>
 8004a6a:	0002      	movs	r2, r0
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d902      	bls.n	8004a7c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d142      	bne.n	8004b02 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	21e0      	movs	r1, #224	; 0xe0
 8004a88:	438a      	bics	r2, r1
 8004a8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	2382      	movs	r3, #130	; 0x82
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d113      	bne.n	8004ac0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d005      	beq.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d107      	bne.n	8004ac0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2140      	movs	r1, #64	; 0x40
 8004abc:	438a      	bics	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ac4:	2380      	movs	r3, #128	; 0x80
 8004ac6:	019b      	lsls	r3, r3, #6
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d110      	bne.n	8004aee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	491a      	ldr	r1, [pc, #104]	; (8004b40 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004ad8:	400a      	ands	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2180      	movs	r1, #128	; 0x80
 8004ae8:	0189      	lsls	r1, r1, #6
 8004aea:	430a      	orrs	r2, r1
 8004aec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	225d      	movs	r2, #93	; 0x5d
 8004af2:	2101      	movs	r1, #1
 8004af4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	225c      	movs	r2, #92	; 0x5c
 8004afa:	2100      	movs	r1, #0
 8004afc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e017      	b.n	8004b32 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	425a      	negs	r2, r3
 8004b22:	4153      	adcs	r3, r2
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	001a      	movs	r2, r3
 8004b28:	1dfb      	adds	r3, r7, #7
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d197      	bne.n	8004a60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	0018      	movs	r0, r3
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b008      	add	sp, #32
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	20000004 	.word	0x20000004
 8004b40:	ffffdfff 	.word	0xffffdfff

08004b44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	; 0x28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b52:	2317      	movs	r3, #23
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b5a:	f7fe f875 	bl	8002c48 <HAL_GetTick>
 8004b5e:	0002      	movs	r2, r0
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	18d3      	adds	r3, r2, r3
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b6a:	f7fe f86d 	bl	8002c48 <HAL_GetTick>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	330c      	adds	r3, #12
 8004b78:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b7a:	4b41      	ldr	r3, [pc, #260]	; (8004c80 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	0013      	movs	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	189b      	adds	r3, r3, r2
 8004b84:	00da      	lsls	r2, r3, #3
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	0d1b      	lsrs	r3, r3, #20
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8c:	4353      	muls	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b90:	e068      	b.n	8004c64 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	23c0      	movs	r3, #192	; 0xc0
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d10a      	bne.n	8004bb2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d107      	bne.n	8004bb2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	2117      	movs	r1, #23
 8004baa:	187b      	adds	r3, r7, r1
 8004bac:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004bae:	187b      	adds	r3, r7, r1
 8004bb0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	d055      	beq.n	8004c64 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bb8:	f7fe f846 	bl	8002c48 <HAL_GetTick>
 8004bbc:	0002      	movs	r2, r0
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d902      	bls.n	8004bce <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d142      	bne.n	8004c54 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	21e0      	movs	r1, #224	; 0xe0
 8004bda:	438a      	bics	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	2382      	movs	r3, #130	; 0x82
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d113      	bne.n	8004c12 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	2380      	movs	r3, #128	; 0x80
 8004bf0:	021b      	lsls	r3, r3, #8
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d005      	beq.n	8004c02 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d107      	bne.n	8004c12 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2140      	movs	r1, #64	; 0x40
 8004c0e:	438a      	bics	r2, r1
 8004c10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c16:	2380      	movs	r3, #128	; 0x80
 8004c18:	019b      	lsls	r3, r3, #6
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d110      	bne.n	8004c40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4916      	ldr	r1, [pc, #88]	; (8004c84 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004c2a:	400a      	ands	r2, r1
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2180      	movs	r1, #128	; 0x80
 8004c3a:	0189      	lsls	r1, r1, #6
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	225d      	movs	r2, #93	; 0x5d
 8004c44:	2101      	movs	r1, #1
 8004c46:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	225c      	movs	r2, #92	; 0x5c
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e010      	b.n	8004c76 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d18e      	bne.n	8004b92 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	0018      	movs	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b00a      	add	sp, #40	; 0x28
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	20000004 	.word	0x20000004
 8004c84:	ffffdfff 	.word	0xffffdfff

08004c88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	23c0      	movs	r3, #192	; 0xc0
 8004c98:	0159      	lsls	r1, r3, #5
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	0013      	movs	r3, r2
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f7ff ff4e 	bl	8004b44 <SPI_WaitFifoStateUntilTimeout>
 8004ca8:	1e03      	subs	r3, r0, #0
 8004caa:	d007      	beq.n	8004cbc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e027      	b.n	8004d0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	0013      	movs	r3, r2
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2180      	movs	r1, #128	; 0x80
 8004cca:	f7ff fead 	bl	8004a28 <SPI_WaitFlagStateUntilTimeout>
 8004cce:	1e03      	subs	r3, r0, #0
 8004cd0:	d007      	beq.n	8004ce2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e014      	b.n	8004d0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	23c0      	movs	r3, #192	; 0xc0
 8004ce6:	00d9      	lsls	r1, r3, #3
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	0013      	movs	r3, r2
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f7ff ff27 	bl	8004b44 <SPI_WaitFifoStateUntilTimeout>
 8004cf6:	1e03      	subs	r3, r0, #0
 8004cf8:	d007      	beq.n	8004d0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfe:	2220      	movs	r2, #32
 8004d00:	431a      	orrs	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e000      	b.n	8004d0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b004      	add	sp, #16
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e044      	b.n	8004db0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d107      	bne.n	8004d3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2274      	movs	r2, #116	; 0x74
 8004d32:	2100      	movs	r1, #0
 8004d34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f7fd fe47 	bl	80029cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2224      	movs	r2, #36	; 0x24
 8004d42:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2101      	movs	r1, #1
 8004d50:	438a      	bics	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	0018      	movs	r0, r3
 8004d58:	f000 f8da 	bl	8004f10 <UART_SetConfig>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e024      	b.n	8004db0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	0018      	movs	r0, r3
 8004d72:	f000 fa0d 	bl	8005190 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	490d      	ldr	r1, [pc, #52]	; (8004db8 <HAL_UART_Init+0xa4>)
 8004d82:	400a      	ands	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2108      	movs	r1, #8
 8004d92:	438a      	bics	r2, r1
 8004d94:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2101      	movs	r1, #1
 8004da2:	430a      	orrs	r2, r1
 8004da4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	0018      	movs	r0, r3
 8004daa:	f000 faa5 	bl	80052f8 <UART_CheckIdleState>
 8004dae:	0003      	movs	r3, r0
}
 8004db0:	0018      	movs	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b002      	add	sp, #8
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	fffff7ff 	.word	0xfffff7ff

08004dbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	1dbb      	adds	r3, r7, #6
 8004dca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d000      	beq.n	8004dd6 <HAL_UART_Transmit+0x1a>
 8004dd4:	e096      	b.n	8004f04 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_UART_Transmit+0x28>
 8004ddc:	1dbb      	adds	r3, r7, #6
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e08e      	b.n	8004f06 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	015b      	lsls	r3, r3, #5
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d109      	bne.n	8004e08 <HAL_UART_Transmit+0x4c>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d105      	bne.n	8004e08 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	4013      	ands	r3, r2
 8004e02:	d001      	beq.n	8004e08 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e07e      	b.n	8004f06 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2274      	movs	r2, #116	; 0x74
 8004e0c:	5c9b      	ldrb	r3, [r3, r2]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Transmit+0x5a>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e077      	b.n	8004f06 <HAL_UART_Transmit+0x14a>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2274      	movs	r2, #116	; 0x74
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2280      	movs	r2, #128	; 0x80
 8004e22:	2100      	movs	r1, #0
 8004e24:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2221      	movs	r2, #33	; 0x21
 8004e2a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e2c:	f7fd ff0c 	bl	8002c48 <HAL_GetTick>
 8004e30:	0003      	movs	r3, r0
 8004e32:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	1dba      	adds	r2, r7, #6
 8004e38:	2150      	movs	r1, #80	; 0x50
 8004e3a:	8812      	ldrh	r2, [r2, #0]
 8004e3c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1dba      	adds	r2, r7, #6
 8004e42:	2152      	movs	r1, #82	; 0x52
 8004e44:	8812      	ldrh	r2, [r2, #0]
 8004e46:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	015b      	lsls	r3, r3, #5
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d108      	bne.n	8004e66 <HAL_UART_Transmit+0xaa>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	61bb      	str	r3, [r7, #24]
 8004e64:	e003      	b.n	8004e6e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2274      	movs	r2, #116	; 0x74
 8004e72:	2100      	movs	r1, #0
 8004e74:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004e76:	e02d      	b.n	8004ed4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	0013      	movs	r3, r2
 8004e82:	2200      	movs	r2, #0
 8004e84:	2180      	movs	r1, #128	; 0x80
 8004e86:	f000 fa7f 	bl	8005388 <UART_WaitOnFlagUntilTimeout>
 8004e8a:	1e03      	subs	r3, r0, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e039      	b.n	8004f06 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10b      	bne.n	8004eb0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	881a      	ldrh	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	05d2      	lsls	r2, r2, #23
 8004ea2:	0dd2      	lsrs	r2, r2, #23
 8004ea4:	b292      	uxth	r2, r2
 8004ea6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	3302      	adds	r3, #2
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	e008      	b.n	8004ec2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	781a      	ldrb	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	b292      	uxth	r2, r2
 8004eba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2252      	movs	r2, #82	; 0x52
 8004ec6:	5a9b      	ldrh	r3, [r3, r2]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b299      	uxth	r1, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2252      	movs	r2, #82	; 0x52
 8004ed2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2252      	movs	r2, #82	; 0x52
 8004ed8:	5a9b      	ldrh	r3, [r3, r2]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1cb      	bne.n	8004e78 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	0013      	movs	r3, r2
 8004eea:	2200      	movs	r2, #0
 8004eec:	2140      	movs	r1, #64	; 0x40
 8004eee:	f000 fa4b 	bl	8005388 <UART_WaitOnFlagUntilTimeout>
 8004ef2:	1e03      	subs	r3, r0, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e005      	b.n	8004f06 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
  }
}
 8004f06:	0018      	movs	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b008      	add	sp, #32
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f18:	231e      	movs	r3, #30
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a8d      	ldr	r2, [pc, #564]	; (8005174 <UART_SetConfig+0x264>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	0019      	movs	r1, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a88      	ldr	r2, [pc, #544]	; (8005178 <UART_SetConfig+0x268>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	0019      	movs	r1, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4a7f      	ldr	r2, [pc, #508]	; (800517c <UART_SetConfig+0x26c>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	0019      	movs	r1, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a7b      	ldr	r2, [pc, #492]	; (8005180 <UART_SetConfig+0x270>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d127      	bne.n	8004fe6 <UART_SetConfig+0xd6>
 8004f96:	4b7b      	ldr	r3, [pc, #492]	; (8005184 <UART_SetConfig+0x274>)
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d00d      	beq.n	8004fbe <UART_SetConfig+0xae>
 8004fa2:	d81b      	bhi.n	8004fdc <UART_SetConfig+0xcc>
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d014      	beq.n	8004fd2 <UART_SetConfig+0xc2>
 8004fa8:	d818      	bhi.n	8004fdc <UART_SetConfig+0xcc>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <UART_SetConfig+0xa4>
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d00a      	beq.n	8004fc8 <UART_SetConfig+0xb8>
 8004fb2:	e013      	b.n	8004fdc <UART_SetConfig+0xcc>
 8004fb4:	231f      	movs	r3, #31
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	e021      	b.n	8005002 <UART_SetConfig+0xf2>
 8004fbe:	231f      	movs	r3, #31
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	e01c      	b.n	8005002 <UART_SetConfig+0xf2>
 8004fc8:	231f      	movs	r3, #31
 8004fca:	18fb      	adds	r3, r7, r3
 8004fcc:	2204      	movs	r2, #4
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	e017      	b.n	8005002 <UART_SetConfig+0xf2>
 8004fd2:	231f      	movs	r3, #31
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	e012      	b.n	8005002 <UART_SetConfig+0xf2>
 8004fdc:	231f      	movs	r3, #31
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	2210      	movs	r2, #16
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	e00d      	b.n	8005002 <UART_SetConfig+0xf2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a67      	ldr	r2, [pc, #412]	; (8005188 <UART_SetConfig+0x278>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d104      	bne.n	8004ffa <UART_SetConfig+0xea>
 8004ff0:	231f      	movs	r3, #31
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	e003      	b.n	8005002 <UART_SetConfig+0xf2>
 8004ffa:	231f      	movs	r3, #31
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	2210      	movs	r2, #16
 8005000:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69da      	ldr	r2, [r3, #28]
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	429a      	cmp	r2, r3
 800500c:	d15d      	bne.n	80050ca <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800500e:	231f      	movs	r3, #31
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d015      	beq.n	8005044 <UART_SetConfig+0x134>
 8005018:	dc18      	bgt.n	800504c <UART_SetConfig+0x13c>
 800501a:	2b04      	cmp	r3, #4
 800501c:	d00d      	beq.n	800503a <UART_SetConfig+0x12a>
 800501e:	dc15      	bgt.n	800504c <UART_SetConfig+0x13c>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <UART_SetConfig+0x11a>
 8005024:	2b02      	cmp	r3, #2
 8005026:	d005      	beq.n	8005034 <UART_SetConfig+0x124>
 8005028:	e010      	b.n	800504c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800502a:	f7ff f837 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 800502e:	0003      	movs	r3, r0
 8005030:	61bb      	str	r3, [r7, #24]
        break;
 8005032:	e012      	b.n	800505a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005034:	4b55      	ldr	r3, [pc, #340]	; (800518c <UART_SetConfig+0x27c>)
 8005036:	61bb      	str	r3, [r7, #24]
        break;
 8005038:	e00f      	b.n	800505a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503a:	f7fe ffc1 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 800503e:	0003      	movs	r3, r0
 8005040:	61bb      	str	r3, [r7, #24]
        break;
 8005042:	e00a      	b.n	800505a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005044:	2380      	movs	r3, #128	; 0x80
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	61bb      	str	r3, [r7, #24]
        break;
 800504a:	e006      	b.n	800505a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005050:	231e      	movs	r3, #30
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
        break;
 8005058:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d100      	bne.n	8005062 <UART_SetConfig+0x152>
 8005060:	e07b      	b.n	800515a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	005a      	lsls	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	18d2      	adds	r2, r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	0019      	movs	r1, r3
 8005074:	0010      	movs	r0, r2
 8005076:	f7fb f851 	bl	800011c <__udivsi3>
 800507a:	0003      	movs	r3, r0
 800507c:	b29b      	uxth	r3, r3
 800507e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b0f      	cmp	r3, #15
 8005084:	d91c      	bls.n	80050c0 <UART_SetConfig+0x1b0>
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	025b      	lsls	r3, r3, #9
 800508c:	429a      	cmp	r2, r3
 800508e:	d217      	bcs.n	80050c0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	b29a      	uxth	r2, r3
 8005094:	200e      	movs	r0, #14
 8005096:	183b      	adds	r3, r7, r0
 8005098:	210f      	movs	r1, #15
 800509a:	438a      	bics	r2, r1
 800509c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2207      	movs	r2, #7
 80050a6:	4013      	ands	r3, r2
 80050a8:	b299      	uxth	r1, r3
 80050aa:	183b      	adds	r3, r7, r0
 80050ac:	183a      	adds	r2, r7, r0
 80050ae:	8812      	ldrh	r2, [r2, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	183a      	adds	r2, r7, r0
 80050ba:	8812      	ldrh	r2, [r2, #0]
 80050bc:	60da      	str	r2, [r3, #12]
 80050be:	e04c      	b.n	800515a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80050c0:	231e      	movs	r3, #30
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	2201      	movs	r2, #1
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e047      	b.n	800515a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050ca:	231f      	movs	r3, #31
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d015      	beq.n	8005100 <UART_SetConfig+0x1f0>
 80050d4:	dc18      	bgt.n	8005108 <UART_SetConfig+0x1f8>
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d00d      	beq.n	80050f6 <UART_SetConfig+0x1e6>
 80050da:	dc15      	bgt.n	8005108 <UART_SetConfig+0x1f8>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <UART_SetConfig+0x1d6>
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d005      	beq.n	80050f0 <UART_SetConfig+0x1e0>
 80050e4:	e010      	b.n	8005108 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e6:	f7fe ffd9 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 80050ea:	0003      	movs	r3, r0
 80050ec:	61bb      	str	r3, [r7, #24]
        break;
 80050ee:	e012      	b.n	8005116 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f0:	4b26      	ldr	r3, [pc, #152]	; (800518c <UART_SetConfig+0x27c>)
 80050f2:	61bb      	str	r3, [r7, #24]
        break;
 80050f4:	e00f      	b.n	8005116 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f6:	f7fe ff63 	bl	8003fc0 <HAL_RCC_GetSysClockFreq>
 80050fa:	0003      	movs	r3, r0
 80050fc:	61bb      	str	r3, [r7, #24]
        break;
 80050fe:	e00a      	b.n	8005116 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	61bb      	str	r3, [r7, #24]
        break;
 8005106:	e006      	b.n	8005116 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800510c:	231e      	movs	r3, #30
 800510e:	18fb      	adds	r3, r7, r3
 8005110:	2201      	movs	r2, #1
 8005112:	701a      	strb	r2, [r3, #0]
        break;
 8005114:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01e      	beq.n	800515a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	085a      	lsrs	r2, r3, #1
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	18d2      	adds	r2, r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	0019      	movs	r1, r3
 800512c:	0010      	movs	r0, r2
 800512e:	f7fa fff5 	bl	800011c <__udivsi3>
 8005132:	0003      	movs	r3, r0
 8005134:	b29b      	uxth	r3, r3
 8005136:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b0f      	cmp	r3, #15
 800513c:	d909      	bls.n	8005152 <UART_SetConfig+0x242>
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	025b      	lsls	r3, r3, #9
 8005144:	429a      	cmp	r2, r3
 8005146:	d204      	bcs.n	8005152 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	60da      	str	r2, [r3, #12]
 8005150:	e003      	b.n	800515a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005152:	231e      	movs	r3, #30
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	2201      	movs	r2, #1
 8005158:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005166:	231e      	movs	r3, #30
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	781b      	ldrb	r3, [r3, #0]
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	b008      	add	sp, #32
 8005172:	bd80      	pop	{r7, pc}
 8005174:	ffff69f3 	.word	0xffff69f3
 8005178:	ffffcfff 	.word	0xffffcfff
 800517c:	fffff4ff 	.word	0xfffff4ff
 8005180:	40013800 	.word	0x40013800
 8005184:	40021000 	.word	0x40021000
 8005188:	40004400 	.word	0x40004400
 800518c:	007a1200 	.word	0x007a1200

08005190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	2201      	movs	r2, #1
 800519e:	4013      	ands	r3, r2
 80051a0:	d00b      	beq.n	80051ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	4a4a      	ldr	r2, [pc, #296]	; (80052d4 <UART_AdvFeatureConfig+0x144>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	0019      	movs	r1, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	2202      	movs	r2, #2
 80051c0:	4013      	ands	r3, r2
 80051c2:	d00b      	beq.n	80051dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	4a43      	ldr	r2, [pc, #268]	; (80052d8 <UART_AdvFeatureConfig+0x148>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	0019      	movs	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	2204      	movs	r2, #4
 80051e2:	4013      	ands	r3, r2
 80051e4:	d00b      	beq.n	80051fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	4a3b      	ldr	r2, [pc, #236]	; (80052dc <UART_AdvFeatureConfig+0x14c>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	0019      	movs	r1, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2208      	movs	r2, #8
 8005204:	4013      	ands	r3, r2
 8005206:	d00b      	beq.n	8005220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	4a34      	ldr	r2, [pc, #208]	; (80052e0 <UART_AdvFeatureConfig+0x150>)
 8005210:	4013      	ands	r3, r2
 8005212:	0019      	movs	r1, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	2210      	movs	r2, #16
 8005226:	4013      	ands	r3, r2
 8005228:	d00b      	beq.n	8005242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	4a2c      	ldr	r2, [pc, #176]	; (80052e4 <UART_AdvFeatureConfig+0x154>)
 8005232:	4013      	ands	r3, r2
 8005234:	0019      	movs	r1, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	2220      	movs	r2, #32
 8005248:	4013      	ands	r3, r2
 800524a:	d00b      	beq.n	8005264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	4a25      	ldr	r2, [pc, #148]	; (80052e8 <UART_AdvFeatureConfig+0x158>)
 8005254:	4013      	ands	r3, r2
 8005256:	0019      	movs	r1, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	2240      	movs	r2, #64	; 0x40
 800526a:	4013      	ands	r3, r2
 800526c:	d01d      	beq.n	80052aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4a1d      	ldr	r2, [pc, #116]	; (80052ec <UART_AdvFeatureConfig+0x15c>)
 8005276:	4013      	ands	r3, r2
 8005278:	0019      	movs	r1, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	035b      	lsls	r3, r3, #13
 800528e:	429a      	cmp	r2, r3
 8005290:	d10b      	bne.n	80052aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <UART_AdvFeatureConfig+0x160>)
 800529a:	4013      	ands	r3, r2
 800529c:	0019      	movs	r1, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	2280      	movs	r2, #128	; 0x80
 80052b0:	4013      	ands	r3, r2
 80052b2:	d00b      	beq.n	80052cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4a0e      	ldr	r2, [pc, #56]	; (80052f4 <UART_AdvFeatureConfig+0x164>)
 80052bc:	4013      	ands	r3, r2
 80052be:	0019      	movs	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]
  }
}
 80052cc:	46c0      	nop			; (mov r8, r8)
 80052ce:	46bd      	mov	sp, r7
 80052d0:	b002      	add	sp, #8
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	fffdffff 	.word	0xfffdffff
 80052d8:	fffeffff 	.word	0xfffeffff
 80052dc:	fffbffff 	.word	0xfffbffff
 80052e0:	ffff7fff 	.word	0xffff7fff
 80052e4:	ffffefff 	.word	0xffffefff
 80052e8:	ffffdfff 	.word	0xffffdfff
 80052ec:	ffefffff 	.word	0xffefffff
 80052f0:	ff9fffff 	.word	0xff9fffff
 80052f4:	fff7ffff 	.word	0xfff7ffff

080052f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2280      	movs	r2, #128	; 0x80
 8005304:	2100      	movs	r1, #0
 8005306:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005308:	f7fd fc9e 	bl	8002c48 <HAL_GetTick>
 800530c:	0003      	movs	r3, r0
 800530e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2208      	movs	r2, #8
 8005318:	4013      	ands	r3, r2
 800531a:	2b08      	cmp	r3, #8
 800531c:	d10c      	bne.n	8005338 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2280      	movs	r2, #128	; 0x80
 8005322:	0391      	lsls	r1, r2, #14
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4a17      	ldr	r2, [pc, #92]	; (8005384 <UART_CheckIdleState+0x8c>)
 8005328:	9200      	str	r2, [sp, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	f000 f82c 	bl	8005388 <UART_WaitOnFlagUntilTimeout>
 8005330:	1e03      	subs	r3, r0, #0
 8005332:	d001      	beq.n	8005338 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e021      	b.n	800537c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2204      	movs	r2, #4
 8005340:	4013      	ands	r3, r2
 8005342:	2b04      	cmp	r3, #4
 8005344:	d10c      	bne.n	8005360 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2280      	movs	r2, #128	; 0x80
 800534a:	03d1      	lsls	r1, r2, #15
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	4a0d      	ldr	r2, [pc, #52]	; (8005384 <UART_CheckIdleState+0x8c>)
 8005350:	9200      	str	r2, [sp, #0]
 8005352:	2200      	movs	r2, #0
 8005354:	f000 f818 	bl	8005388 <UART_WaitOnFlagUntilTimeout>
 8005358:	1e03      	subs	r3, r0, #0
 800535a:	d001      	beq.n	8005360 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e00d      	b.n	800537c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2274      	movs	r2, #116	; 0x74
 8005376:	2100      	movs	r1, #0
 8005378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	0018      	movs	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	b004      	add	sp, #16
 8005382:	bd80      	pop	{r7, pc}
 8005384:	01ffffff 	.word	0x01ffffff

08005388 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b094      	sub	sp, #80	; 0x50
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	1dfb      	adds	r3, r7, #7
 8005396:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005398:	e0a3      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800539a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800539c:	3301      	adds	r3, #1
 800539e:	d100      	bne.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80053a0:	e09f      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a2:	f7fd fc51 	bl	8002c48 <HAL_GetTick>
 80053a6:	0002      	movs	r2, r0
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d302      	bcc.n	80053b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80053b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d13d      	bne.n	8005434 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b8:	f3ef 8310 	mrs	r3, PRIMASK
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053c0:	647b      	str	r3, [r7, #68]	; 0x44
 80053c2:	2301      	movs	r3, #1
 80053c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	f383 8810 	msr	PRIMASK, r3
}
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	494c      	ldr	r1, [pc, #304]	; (800550c <UART_WaitOnFlagUntilTimeout+0x184>)
 80053da:	400a      	ands	r2, r1
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	f383 8810 	msr	PRIMASK, r3
}
 80053e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ea:	f3ef 8310 	mrs	r3, PRIMASK
 80053ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80053f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f2:	643b      	str	r3, [r7, #64]	; 0x40
 80053f4:	2301      	movs	r3, #1
 80053f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	f383 8810 	msr	PRIMASK, r3
}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2101      	movs	r1, #1
 800540c:	438a      	bics	r2, r1
 800540e:	609a      	str	r2, [r3, #8]
 8005410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005416:	f383 8810 	msr	PRIMASK, r3
}
 800541a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2274      	movs	r2, #116	; 0x74
 800542c:	2100      	movs	r1, #0
 800542e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e067      	b.n	8005504 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2204      	movs	r2, #4
 800543c:	4013      	ands	r3, r2
 800543e:	d050      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	2380      	movs	r3, #128	; 0x80
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	401a      	ands	r2, r3
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	429a      	cmp	r2, r3
 8005452:	d146      	bne.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2280      	movs	r2, #128	; 0x80
 800545a:	0112      	lsls	r2, r2, #4
 800545c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800545e:	f3ef 8310 	mrs	r3, PRIMASK
 8005462:	613b      	str	r3, [r7, #16]
  return(result);
 8005464:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f383 8810 	msr	PRIMASK, r3
}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4923      	ldr	r1, [pc, #140]	; (800550c <UART_WaitOnFlagUntilTimeout+0x184>)
 8005480:	400a      	ands	r2, r1
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005486:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f383 8810 	msr	PRIMASK, r3
}
 800548e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005490:	f3ef 8310 	mrs	r3, PRIMASK
 8005494:	61fb      	str	r3, [r7, #28]
  return(result);
 8005496:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005498:	64bb      	str	r3, [r7, #72]	; 0x48
 800549a:	2301      	movs	r3, #1
 800549c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	f383 8810 	msr	PRIMASK, r3
}
 80054a4:	46c0      	nop			; (mov r8, r8)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2101      	movs	r1, #1
 80054b2:	438a      	bics	r2, r1
 80054b4:	609a      	str	r2, [r3, #8]
 80054b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	f383 8810 	msr	PRIMASK, r3
}
 80054c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2280      	movs	r2, #128	; 0x80
 80054d2:	2120      	movs	r1, #32
 80054d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2274      	movs	r2, #116	; 0x74
 80054da:	2100      	movs	r1, #0
 80054dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e010      	b.n	8005504 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	4013      	ands	r3, r2
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	425a      	negs	r2, r3
 80054f2:	4153      	adcs	r3, r2
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	001a      	movs	r2, r3
 80054f8:	1dfb      	adds	r3, r7, #7
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d100      	bne.n	8005502 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005500:	e74b      	b.n	800539a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	0018      	movs	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	b014      	add	sp, #80	; 0x50
 800550a:	bd80      	pop	{r7, pc}
 800550c:	fffffe5f 	.word	0xfffffe5f

08005510 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005514:	4a06      	ldr	r2, [pc, #24]	; (8005530 <MX_FATFS_Init+0x20>)
 8005516:	4b07      	ldr	r3, [pc, #28]	; (8005534 <MX_FATFS_Init+0x24>)
 8005518:	0011      	movs	r1, r2
 800551a:	0018      	movs	r0, r3
 800551c:	f001 fe46 	bl	80071ac <FATFS_LinkDriver>
 8005520:	0003      	movs	r3, r0
 8005522:	001a      	movs	r2, r3
 8005524:	4b04      	ldr	r3, [pc, #16]	; (8005538 <MX_FATFS_Init+0x28>)
 8005526:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005528:	46c0      	nop			; (mov r8, r8)
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	2000022c 	.word	0x2000022c
 8005534:	20000010 	.word	0x20000010
 8005538:	20000228 	.word	0x20000228

0800553c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	0002      	movs	r2, r0
 8005544:	1dfb      	adds	r3, r7, #7
 8005546:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005548:	1dfb      	adds	r3, r7, #7
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	0018      	movs	r0, r3
 800554e:	f7fc fb1f 	bl	8001b90 <SD_disk_initialize>
 8005552:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8005554:	0018      	movs	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	b002      	add	sp, #8
 800555a:	bd80      	pop	{r7, pc}

0800555c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	0002      	movs	r2, r0
 8005564:	1dfb      	adds	r3, r7, #7
 8005566:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);;
 8005568:	1dfb      	adds	r3, r7, #7
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	0018      	movs	r0, r3
 800556e:	f7fc fc19 	bl	8001da4 <SD_disk_status>
 8005572:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8005574:	0018      	movs	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	b002      	add	sp, #8
 800557a:	bd80      	pop	{r7, pc}

0800557c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800557c:	b5b0      	push	{r4, r5, r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	250f      	movs	r5, #15
 800558a:	197b      	adds	r3, r7, r5
 800558c:	1c02      	adds	r2, r0, #0
 800558e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8005590:	683c      	ldr	r4, [r7, #0]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	197b      	adds	r3, r7, r5
 8005598:	7818      	ldrb	r0, [r3, #0]
 800559a:	0023      	movs	r3, r4
 800559c:	f7fc fc18 	bl	8001dd0 <SD_disk_read>
 80055a0:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 80055a2:	0018      	movs	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	b004      	add	sp, #16
 80055a8:	bdb0      	pop	{r4, r5, r7, pc}

080055aa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80055aa:	b5b0      	push	{r4, r5, r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
 80055b6:	250f      	movs	r5, #15
 80055b8:	197b      	adds	r3, r7, r5
 80055ba:	1c02      	adds	r2, r0, #0
 80055bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80055be:	683c      	ldr	r4, [r7, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	197b      	adds	r3, r7, r5
 80055c6:	7818      	ldrb	r0, [r3, #0]
 80055c8:	0023      	movs	r3, r4
 80055ca:	f7fc fc71 	bl	8001eb0 <SD_disk_write>
 80055ce:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 80055d0:	0018      	movs	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b004      	add	sp, #16
 80055d6:	bdb0      	pop	{r4, r5, r7, pc}

080055d8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	603a      	str	r2, [r7, #0]
 80055e0:	1dfb      	adds	r3, r7, #7
 80055e2:	1c02      	adds	r2, r0, #0
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	1dbb      	adds	r3, r7, #6
 80055e8:	1c0a      	adds	r2, r1, #0
 80055ea:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	1dbb      	adds	r3, r7, #6
 80055f0:	7819      	ldrb	r1, [r3, #0]
 80055f2:	1dfb      	adds	r3, r7, #7
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	0018      	movs	r0, r3
 80055f8:	f7fc fce2 	bl	8001fc0 <SD_disk_ioctl>
 80055fc:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 80055fe:	0018      	movs	r0, r3
 8005600:	46bd      	mov	sp, r7
 8005602:	b002      	add	sp, #8
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <app_init>:
//file	fs;
//ili9488 driver;


void app_init(void)
{
 8005608:	b5b0      	push	{r4, r5, r7, lr}
 800560a:	b0f6      	sub	sp, #472	; 0x1d8
 800560c:	af00      	add	r7, sp, #0
	uart1_init();
 800560e:	f000 fd5b 	bl	80060c8 <uart1_init>
	file_init();
 8005612:	f000 fb7f 	bl	8005d14 <file_init>
	ili9488_init();
 8005616:	f000 fc15 	bl	8005e44 <ili9488_init>



	u16 char_A[32] = { 0x0000,	// Row 0
 800561a:	23c0      	movs	r3, #192	; 0xc0
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	18fa      	adds	r2, r7, r3
 8005620:	4bbb      	ldr	r3, [pc, #748]	; (8005910 <app_init+0x308>)
 8005622:	0010      	movs	r0, r2
 8005624:	0019      	movs	r1, r3
 8005626:	2340      	movs	r3, #64	; 0x40
 8005628:	001a      	movs	r2, r3
 800562a:	f001 fdf9 	bl	8007220 <memcpy>
					   0x0000,	// Row 29
					   0x0000,	// Row 30
					   0x0000};	// Row 31


	u16 char_B[32] = { 0x0000,	// Row 0
 800562e:	23a0      	movs	r3, #160	; 0xa0
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	18fa      	adds	r2, r7, r3
 8005634:	4bb7      	ldr	r3, [pc, #732]	; (8005914 <app_init+0x30c>)
 8005636:	0010      	movs	r0, r2
 8005638:	0019      	movs	r1, r3
 800563a:	2340      	movs	r3, #64	; 0x40
 800563c:	001a      	movs	r2, r3
 800563e:	f001 fdef 	bl	8007220 <memcpy>
					   0x0000,	// Row 28
					   0x0000,	// Row 29
					   0x0000,	// Row 30
					   0x0000};	// Row 31

	u16 char_C[32] = { 0x0000,	// Row 0
 8005642:	1c7a      	adds	r2, r7, #1
 8005644:	32ff      	adds	r2, #255	; 0xff
 8005646:	4bb4      	ldr	r3, [pc, #720]	; (8005918 <app_init+0x310>)
 8005648:	0010      	movs	r0, r2
 800564a:	0019      	movs	r1, r3
 800564c:	2340      	movs	r3, #64	; 0x40
 800564e:	001a      	movs	r2, r3
 8005650:	f001 fde6 	bl	8007220 <memcpy>
					   0x0000,	// Row 28
					   0x0000,	// Row 29
					   0x0000,	// Row 30
					   0x0000};	// Row 31

	u16 char_D[32] = { 0x0000,	// Row 0
 8005654:	4bb1      	ldr	r3, [pc, #708]	; (800591c <app_init+0x314>)
 8005656:	24ec      	movs	r4, #236	; 0xec
 8005658:	0064      	lsls	r4, r4, #1
 800565a:	191b      	adds	r3, r3, r4
 800565c:	19da      	adds	r2, r3, r7
 800565e:	4bb0      	ldr	r3, [pc, #704]	; (8005920 <app_init+0x318>)
 8005660:	0010      	movs	r0, r2
 8005662:	0019      	movs	r1, r3
 8005664:	2340      	movs	r3, #64	; 0x40
 8005666:	001a      	movs	r2, r3
 8005668:	f001 fdda 	bl	8007220 <memcpy>
					   0x0000,	// Row 28
					   0x0000,	// Row 29
					   0x0000,	// Row 30
					   0x0000};	// Row 31

	u16 char_E[32] = { 0x0000,	// Row 0
 800566c:	4bad      	ldr	r3, [pc, #692]	; (8005924 <app_init+0x31c>)
 800566e:	191b      	adds	r3, r3, r4
 8005670:	19da      	adds	r2, r3, r7
 8005672:	4bad      	ldr	r3, [pc, #692]	; (8005928 <app_init+0x320>)
 8005674:	0010      	movs	r0, r2
 8005676:	0019      	movs	r1, r3
 8005678:	2340      	movs	r3, #64	; 0x40
 800567a:	001a      	movs	r2, r3
 800567c:	f001 fdd0 	bl	8007220 <memcpy>
					   0x0000,	// Row 28
					   0x0000,	// Row 29
					   0x0000,	// Row 30
					   0x0000};	// Row 31

	u16 char_F[32] = { 0x0000,	// Row 0
 8005680:	4baa      	ldr	r3, [pc, #680]	; (800592c <app_init+0x324>)
 8005682:	191b      	adds	r3, r3, r4
 8005684:	19da      	adds	r2, r3, r7
 8005686:	4baa      	ldr	r3, [pc, #680]	; (8005930 <app_init+0x328>)
 8005688:	0010      	movs	r0, r2
 800568a:	0019      	movs	r1, r3
 800568c:	2340      	movs	r3, #64	; 0x40
 800568e:	001a      	movs	r2, r3
 8005690:	f001 fdc6 	bl	8007220 <memcpy>
					   0x3800,	// Row 27
					   0x0000,	// Row 28
					   0x0000,	// Row 29
					   0x0000,	// Row 30
					   0x0000};	// Row 31
	u16 char_G[32] = { 0x0000,	// Row 0
 8005694:	4ba7      	ldr	r3, [pc, #668]	; (8005934 <app_init+0x32c>)
 8005696:	191b      	adds	r3, r3, r4
 8005698:	19da      	adds	r2, r3, r7
 800569a:	4ba7      	ldr	r3, [pc, #668]	; (8005938 <app_init+0x330>)
 800569c:	0010      	movs	r0, r2
 800569e:	0019      	movs	r1, r3
 80056a0:	2340      	movs	r3, #64	; 0x40
 80056a2:	001a      	movs	r2, r3
 80056a4:	f001 fdbc 	bl	8007220 <memcpy>
					   0x0000};	// Row 31




	u16 font_color    = 0x001F;
 80056a8:	23e4      	movs	r3, #228	; 0xe4
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	18fb      	adds	r3, r7, r3
 80056ae:	221f      	movs	r2, #31
 80056b0:	801a      	strh	r2, [r3, #0]
	u16 background    = 0x0000;
 80056b2:	23e3      	movs	r3, #227	; 0xe3
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	18fb      	adds	r3, r7, r3
 80056b8:	2200      	movs	r2, #0
 80056ba:	801a      	strh	r2, [r3, #0]

	u16 x_pos = 319;
 80056bc:	24e2      	movs	r4, #226	; 0xe2
 80056be:	0064      	lsls	r4, r4, #1
 80056c0:	193b      	adds	r3, r7, r4
 80056c2:	2240      	movs	r2, #64	; 0x40
 80056c4:	32ff      	adds	r2, #255	; 0xff
 80056c6:	801a      	strh	r2, [r3, #0]
    u16 y_pos = 0;
 80056c8:	25e1      	movs	r5, #225	; 0xe1
 80056ca:	006d      	lsls	r5, r5, #1
 80056cc:	197b      	adds	r3, r7, r5
 80056ce:	2200      	movs	r2, #0
 80056d0:	801a      	strh	r2, [r3, #0]

	_Column(x_pos-15,x_pos);
 80056d2:	193b      	adds	r3, r7, r4
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	3b0f      	subs	r3, #15
 80056d8:	001a      	movs	r2, r3
 80056da:	193b      	adds	r3, r7, r4
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	0019      	movs	r1, r3
 80056e0:	0010      	movs	r0, r2
 80056e2:	f000 fc98 	bl	8006016 <_Column>
	_Page(y_pos,y_pos+31);
 80056e6:	197b      	adds	r3, r7, r5
 80056e8:	881a      	ldrh	r2, [r3, #0]
 80056ea:	197b      	adds	r3, r7, r5
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	331f      	adds	r3, #31
 80056f0:	0019      	movs	r1, r3
 80056f2:	0010      	movs	r0, r2
 80056f4:	f000 fcb7 	bl	8006066 <_Page>
	x_pos = x_pos -16;
 80056f8:	193b      	adds	r3, r7, r4
 80056fa:	193a      	adds	r2, r7, r4
 80056fc:	8812      	ldrh	r2, [r2, #0]
 80056fe:	3a10      	subs	r2, #16
 8005700:	801a      	strh	r2, [r3, #0]
	y_pos = y_pos + 0;
 8005702:	197b      	adds	r3, r7, r5
 8005704:	197a      	adds	r2, r7, r5
 8005706:	8812      	ldrh	r2, [r2, #0]
 8005708:	801a      	strh	r2, [r3, #0]
	WriteCommand(0x2C);
 800570a:	202c      	movs	r0, #44	; 0x2c
 800570c:	f000 fc24 	bl	8005f58 <WriteCommand>
    for(u8 i=0;i<32;i++)for(u8 j=0;j<16;j++){if(char_A[i] & (1<<j)) WriteData(font_color);else WriteData(background);}
 8005710:	23d8      	movs	r3, #216	; 0xd8
 8005712:	33ff      	adds	r3, #255	; 0xff
 8005714:	18fb      	adds	r3, r7, r3
 8005716:	2200      	movs	r2, #0
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	e03b      	b.n	8005794 <app_init+0x18c>
 800571c:	23eb      	movs	r3, #235	; 0xeb
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e028      	b.n	800577a <app_init+0x172>
 8005728:	23d8      	movs	r3, #216	; 0xd8
 800572a:	33ff      	adds	r3, #255	; 0xff
 800572c:	18fb      	adds	r3, r7, r3
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	23c0      	movs	r3, #192	; 0xc0
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	0052      	lsls	r2, r2, #1
 8005738:	5ad3      	ldrh	r3, [r2, r3]
 800573a:	001a      	movs	r2, r3
 800573c:	23eb      	movs	r3, #235	; 0xeb
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	411a      	asrs	r2, r3
 8005746:	0013      	movs	r3, r2
 8005748:	2201      	movs	r2, #1
 800574a:	4013      	ands	r3, r2
 800574c:	d007      	beq.n	800575e <app_init+0x156>
 800574e:	23e4      	movs	r3, #228	; 0xe4
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	18fb      	adds	r3, r7, r3
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	0018      	movs	r0, r3
 8005758:	f000 fc18 	bl	8005f8c <WriteData>
 800575c:	e006      	b.n	800576c <app_init+0x164>
 800575e:	23e3      	movs	r3, #227	; 0xe3
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	18fb      	adds	r3, r7, r3
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	0018      	movs	r0, r3
 8005768:	f000 fc10 	bl	8005f8c <WriteData>
 800576c:	21eb      	movs	r1, #235	; 0xeb
 800576e:	0049      	lsls	r1, r1, #1
 8005770:	187b      	adds	r3, r7, r1
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	187b      	adds	r3, r7, r1
 8005776:	3201      	adds	r2, #1
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	23eb      	movs	r3, #235	; 0xeb
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	18fb      	adds	r3, r7, r3
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b0f      	cmp	r3, #15
 8005784:	d9d0      	bls.n	8005728 <app_init+0x120>
 8005786:	21d8      	movs	r1, #216	; 0xd8
 8005788:	31ff      	adds	r1, #255	; 0xff
 800578a:	187b      	adds	r3, r7, r1
 800578c:	781a      	ldrb	r2, [r3, #0]
 800578e:	187b      	adds	r3, r7, r1
 8005790:	3201      	adds	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
 8005794:	23d8      	movs	r3, #216	; 0xd8
 8005796:	33ff      	adds	r3, #255	; 0xff
 8005798:	18fb      	adds	r3, r7, r3
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b1f      	cmp	r3, #31
 800579e:	d9bd      	bls.n	800571c <app_init+0x114>
	_NOP();
 80057a0:	f000 fc0e 	bl	8005fc0 <_NOP>

	_Column(x_pos-15,x_pos);
 80057a4:	24e2      	movs	r4, #226	; 0xe2
 80057a6:	0064      	lsls	r4, r4, #1
 80057a8:	193b      	adds	r3, r7, r4
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	3b0f      	subs	r3, #15
 80057ae:	001a      	movs	r2, r3
 80057b0:	193b      	adds	r3, r7, r4
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	0019      	movs	r1, r3
 80057b6:	0010      	movs	r0, r2
 80057b8:	f000 fc2d 	bl	8006016 <_Column>
	_Page(y_pos,y_pos+31);
 80057bc:	25e1      	movs	r5, #225	; 0xe1
 80057be:	006d      	lsls	r5, r5, #1
 80057c0:	197b      	adds	r3, r7, r5
 80057c2:	881a      	ldrh	r2, [r3, #0]
 80057c4:	197b      	adds	r3, r7, r5
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	331f      	adds	r3, #31
 80057ca:	0019      	movs	r1, r3
 80057cc:	0010      	movs	r0, r2
 80057ce:	f000 fc4a 	bl	8006066 <_Page>
	x_pos = x_pos -16;
 80057d2:	193b      	adds	r3, r7, r4
 80057d4:	193a      	adds	r2, r7, r4
 80057d6:	8812      	ldrh	r2, [r2, #0]
 80057d8:	3a10      	subs	r2, #16
 80057da:	801a      	strh	r2, [r3, #0]
	y_pos = y_pos + 0;
 80057dc:	197b      	adds	r3, r7, r5
 80057de:	197a      	adds	r2, r7, r5
 80057e0:	8812      	ldrh	r2, [r2, #0]
 80057e2:	801a      	strh	r2, [r3, #0]
	WriteCommand(0x2C);
 80057e4:	202c      	movs	r0, #44	; 0x2c
 80057e6:	f000 fbb7 	bl	8005f58 <WriteCommand>
	for(u8 i=0;i<32;i++)for(u8 j=0;j<16;j++){if(char_B[i] & (1<<j)) WriteData(font_color);else WriteData(background);}
 80057ea:	23d6      	movs	r3, #214	; 0xd6
 80057ec:	33ff      	adds	r3, #255	; 0xff
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	e03b      	b.n	800586e <app_init+0x266>
 80057f6:	23ea      	movs	r3, #234	; 0xea
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	18fb      	adds	r3, r7, r3
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	e028      	b.n	8005854 <app_init+0x24c>
 8005802:	23d6      	movs	r3, #214	; 0xd6
 8005804:	33ff      	adds	r3, #255	; 0xff
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	781a      	ldrb	r2, [r3, #0]
 800580a:	23a0      	movs	r3, #160	; 0xa0
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	0052      	lsls	r2, r2, #1
 8005812:	5ad3      	ldrh	r3, [r2, r3]
 8005814:	001a      	movs	r2, r3
 8005816:	23ea      	movs	r3, #234	; 0xea
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	411a      	asrs	r2, r3
 8005820:	0013      	movs	r3, r2
 8005822:	2201      	movs	r2, #1
 8005824:	4013      	ands	r3, r2
 8005826:	d007      	beq.n	8005838 <app_init+0x230>
 8005828:	23e4      	movs	r3, #228	; 0xe4
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	18fb      	adds	r3, r7, r3
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	0018      	movs	r0, r3
 8005832:	f000 fbab 	bl	8005f8c <WriteData>
 8005836:	e006      	b.n	8005846 <app_init+0x23e>
 8005838:	23e3      	movs	r3, #227	; 0xe3
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	18fb      	adds	r3, r7, r3
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	0018      	movs	r0, r3
 8005842:	f000 fba3 	bl	8005f8c <WriteData>
 8005846:	21ea      	movs	r1, #234	; 0xea
 8005848:	0049      	lsls	r1, r1, #1
 800584a:	187b      	adds	r3, r7, r1
 800584c:	781a      	ldrb	r2, [r3, #0]
 800584e:	187b      	adds	r3, r7, r1
 8005850:	3201      	adds	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	23ea      	movs	r3, #234	; 0xea
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b0f      	cmp	r3, #15
 800585e:	d9d0      	bls.n	8005802 <app_init+0x1fa>
 8005860:	21d6      	movs	r1, #214	; 0xd6
 8005862:	31ff      	adds	r1, #255	; 0xff
 8005864:	187b      	adds	r3, r7, r1
 8005866:	781a      	ldrb	r2, [r3, #0]
 8005868:	187b      	adds	r3, r7, r1
 800586a:	3201      	adds	r2, #1
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	23d6      	movs	r3, #214	; 0xd6
 8005870:	33ff      	adds	r3, #255	; 0xff
 8005872:	18fb      	adds	r3, r7, r3
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b1f      	cmp	r3, #31
 8005878:	d9bd      	bls.n	80057f6 <app_init+0x1ee>
	_NOP();
 800587a:	f000 fba1 	bl	8005fc0 <_NOP>

	_Column(x_pos-15,x_pos);
 800587e:	24e2      	movs	r4, #226	; 0xe2
 8005880:	0064      	lsls	r4, r4, #1
 8005882:	193b      	adds	r3, r7, r4
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	3b0f      	subs	r3, #15
 8005888:	001a      	movs	r2, r3
 800588a:	193b      	adds	r3, r7, r4
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	0019      	movs	r1, r3
 8005890:	0010      	movs	r0, r2
 8005892:	f000 fbc0 	bl	8006016 <_Column>
	_Page(y_pos,y_pos+31);
 8005896:	25e1      	movs	r5, #225	; 0xe1
 8005898:	006d      	lsls	r5, r5, #1
 800589a:	197b      	adds	r3, r7, r5
 800589c:	881a      	ldrh	r2, [r3, #0]
 800589e:	197b      	adds	r3, r7, r5
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	331f      	adds	r3, #31
 80058a4:	0019      	movs	r1, r3
 80058a6:	0010      	movs	r0, r2
 80058a8:	f000 fbdd 	bl	8006066 <_Page>
	x_pos = x_pos -16;
 80058ac:	193b      	adds	r3, r7, r4
 80058ae:	193a      	adds	r2, r7, r4
 80058b0:	8812      	ldrh	r2, [r2, #0]
 80058b2:	3a10      	subs	r2, #16
 80058b4:	801a      	strh	r2, [r3, #0]
	y_pos = y_pos + 0;
 80058b6:	197b      	adds	r3, r7, r5
 80058b8:	197a      	adds	r2, r7, r5
 80058ba:	8812      	ldrh	r2, [r2, #0]
 80058bc:	801a      	strh	r2, [r3, #0]
	WriteCommand(0x2C);
 80058be:	202c      	movs	r0, #44	; 0x2c
 80058c0:	f000 fb4a 	bl	8005f58 <WriteCommand>
	for(u8 i=0;i<32;i++)for(u8 j=0;j<16;j++){if(char_C[i] & (1<<j)) WriteData(font_color);else WriteData(background);}
 80058c4:	23d4      	movs	r3, #212	; 0xd4
 80058c6:	33ff      	adds	r3, #255	; 0xff
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	e050      	b.n	8005972 <app_init+0x36a>
 80058d0:	23e9      	movs	r3, #233	; 0xe9
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	2200      	movs	r2, #0
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	e03d      	b.n	8005958 <app_init+0x350>
 80058dc:	23d4      	movs	r3, #212	; 0xd4
 80058de:	33ff      	adds	r3, #255	; 0xff
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	1c7b      	adds	r3, r7, #1
 80058e6:	33ff      	adds	r3, #255	; 0xff
 80058e8:	0052      	lsls	r2, r2, #1
 80058ea:	5ad3      	ldrh	r3, [r2, r3]
 80058ec:	001a      	movs	r2, r3
 80058ee:	23e9      	movs	r3, #233	; 0xe9
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	411a      	asrs	r2, r3
 80058f8:	0013      	movs	r3, r2
 80058fa:	2201      	movs	r2, #1
 80058fc:	4013      	ands	r3, r2
 80058fe:	d01d      	beq.n	800593c <app_init+0x334>
 8005900:	23e4      	movs	r3, #228	; 0xe4
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	18fb      	adds	r3, r7, r3
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	0018      	movs	r0, r3
 800590a:	f000 fb3f 	bl	8005f8c <WriteData>
 800590e:	e01c      	b.n	800594a <app_init+0x342>
 8005910:	08007b3c 	.word	0x08007b3c
 8005914:	08007b7c 	.word	0x08007b7c
 8005918:	08007bbc 	.word	0x08007bbc
 800591c:	fffffee8 	.word	0xfffffee8
 8005920:	08007bfc 	.word	0x08007bfc
 8005924:	fffffea8 	.word	0xfffffea8
 8005928:	08007c3c 	.word	0x08007c3c
 800592c:	fffffe68 	.word	0xfffffe68
 8005930:	08007c7c 	.word	0x08007c7c
 8005934:	fffffe28 	.word	0xfffffe28
 8005938:	08007cbc 	.word	0x08007cbc
 800593c:	23e3      	movs	r3, #227	; 0xe3
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	18fb      	adds	r3, r7, r3
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	0018      	movs	r0, r3
 8005946:	f000 fb21 	bl	8005f8c <WriteData>
 800594a:	21e9      	movs	r1, #233	; 0xe9
 800594c:	0049      	lsls	r1, r1, #1
 800594e:	187b      	adds	r3, r7, r1
 8005950:	781a      	ldrb	r2, [r3, #0]
 8005952:	187b      	adds	r3, r7, r1
 8005954:	3201      	adds	r2, #1
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	23e9      	movs	r3, #233	; 0xe9
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b0f      	cmp	r3, #15
 8005962:	d9bb      	bls.n	80058dc <app_init+0x2d4>
 8005964:	21d4      	movs	r1, #212	; 0xd4
 8005966:	31ff      	adds	r1, #255	; 0xff
 8005968:	187b      	adds	r3, r7, r1
 800596a:	781a      	ldrb	r2, [r3, #0]
 800596c:	187b      	adds	r3, r7, r1
 800596e:	3201      	adds	r2, #1
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	23d4      	movs	r3, #212	; 0xd4
 8005974:	33ff      	adds	r3, #255	; 0xff
 8005976:	18fb      	adds	r3, r7, r3
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b1f      	cmp	r3, #31
 800597c:	d9a8      	bls.n	80058d0 <app_init+0x2c8>
	_NOP();
 800597e:	f000 fb1f 	bl	8005fc0 <_NOP>

	_Column(x_pos-15,x_pos);
 8005982:	24e2      	movs	r4, #226	; 0xe2
 8005984:	0064      	lsls	r4, r4, #1
 8005986:	193b      	adds	r3, r7, r4
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	3b0f      	subs	r3, #15
 800598c:	001a      	movs	r2, r3
 800598e:	193b      	adds	r3, r7, r4
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	0019      	movs	r1, r3
 8005994:	0010      	movs	r0, r2
 8005996:	f000 fb3e 	bl	8006016 <_Column>
	_Page(y_pos,y_pos+31);
 800599a:	25e1      	movs	r5, #225	; 0xe1
 800599c:	006d      	lsls	r5, r5, #1
 800599e:	197b      	adds	r3, r7, r5
 80059a0:	881a      	ldrh	r2, [r3, #0]
 80059a2:	197b      	adds	r3, r7, r5
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	331f      	adds	r3, #31
 80059a8:	0019      	movs	r1, r3
 80059aa:	0010      	movs	r0, r2
 80059ac:	f000 fb5b 	bl	8006066 <_Page>
	x_pos = x_pos -16;
 80059b0:	193b      	adds	r3, r7, r4
 80059b2:	193a      	adds	r2, r7, r4
 80059b4:	8812      	ldrh	r2, [r2, #0]
 80059b6:	3a10      	subs	r2, #16
 80059b8:	801a      	strh	r2, [r3, #0]
	y_pos = y_pos + 0;
 80059ba:	197b      	adds	r3, r7, r5
 80059bc:	197a      	adds	r2, r7, r5
 80059be:	8812      	ldrh	r2, [r2, #0]
 80059c0:	801a      	strh	r2, [r3, #0]
	WriteCommand(0x2C);
 80059c2:	202c      	movs	r0, #44	; 0x2c
 80059c4:	f000 fac8 	bl	8005f58 <WriteCommand>
	for(u8 i=0;i<32;i++)for(u8 j=0;j<16;j++){if(char_D[i] & (1<<j)) WriteData(font_color);else WriteData(background);}
 80059c8:	23d2      	movs	r3, #210	; 0xd2
 80059ca:	33ff      	adds	r3, #255	; 0xff
 80059cc:	18fb      	adds	r3, r7, r3
 80059ce:	2200      	movs	r2, #0
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	e03d      	b.n	8005a50 <app_init+0x448>
 80059d4:	23e8      	movs	r3, #232	; 0xe8
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	e02a      	b.n	8005a36 <app_init+0x42e>
 80059e0:	23d2      	movs	r3, #210	; 0xd2
 80059e2:	33ff      	adds	r3, #255	; 0xff
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	781a      	ldrb	r2, [r3, #0]
 80059e8:	4bc4      	ldr	r3, [pc, #784]	; (8005cfc <app_init+0x6f4>)
 80059ea:	21ec      	movs	r1, #236	; 0xec
 80059ec:	0049      	lsls	r1, r1, #1
 80059ee:	185b      	adds	r3, r3, r1
 80059f0:	19db      	adds	r3, r3, r7
 80059f2:	0052      	lsls	r2, r2, #1
 80059f4:	5ad3      	ldrh	r3, [r2, r3]
 80059f6:	001a      	movs	r2, r3
 80059f8:	23e8      	movs	r3, #232	; 0xe8
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	411a      	asrs	r2, r3
 8005a02:	0013      	movs	r3, r2
 8005a04:	2201      	movs	r2, #1
 8005a06:	4013      	ands	r3, r2
 8005a08:	d007      	beq.n	8005a1a <app_init+0x412>
 8005a0a:	23e4      	movs	r3, #228	; 0xe4
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	18fb      	adds	r3, r7, r3
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f000 faba 	bl	8005f8c <WriteData>
 8005a18:	e006      	b.n	8005a28 <app_init+0x420>
 8005a1a:	23e3      	movs	r3, #227	; 0xe3
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	0018      	movs	r0, r3
 8005a24:	f000 fab2 	bl	8005f8c <WriteData>
 8005a28:	21e8      	movs	r1, #232	; 0xe8
 8005a2a:	0049      	lsls	r1, r1, #1
 8005a2c:	187b      	adds	r3, r7, r1
 8005a2e:	781a      	ldrb	r2, [r3, #0]
 8005a30:	187b      	adds	r3, r7, r1
 8005a32:	3201      	adds	r2, #1
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	23e8      	movs	r3, #232	; 0xe8
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b0f      	cmp	r3, #15
 8005a40:	d9ce      	bls.n	80059e0 <app_init+0x3d8>
 8005a42:	21d2      	movs	r1, #210	; 0xd2
 8005a44:	31ff      	adds	r1, #255	; 0xff
 8005a46:	187b      	adds	r3, r7, r1
 8005a48:	781a      	ldrb	r2, [r3, #0]
 8005a4a:	187b      	adds	r3, r7, r1
 8005a4c:	3201      	adds	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	23d2      	movs	r3, #210	; 0xd2
 8005a52:	33ff      	adds	r3, #255	; 0xff
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b1f      	cmp	r3, #31
 8005a5a:	d9bb      	bls.n	80059d4 <app_init+0x3cc>
	_NOP();
 8005a5c:	f000 fab0 	bl	8005fc0 <_NOP>

	_Column(x_pos-15,x_pos);
 8005a60:	24e2      	movs	r4, #226	; 0xe2
 8005a62:	0064      	lsls	r4, r4, #1
 8005a64:	193b      	adds	r3, r7, r4
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	3b0f      	subs	r3, #15
 8005a6a:	001a      	movs	r2, r3
 8005a6c:	193b      	adds	r3, r7, r4
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	0019      	movs	r1, r3
 8005a72:	0010      	movs	r0, r2
 8005a74:	f000 facf 	bl	8006016 <_Column>
	_Page(y_pos,y_pos+31);
 8005a78:	25e1      	movs	r5, #225	; 0xe1
 8005a7a:	006d      	lsls	r5, r5, #1
 8005a7c:	197b      	adds	r3, r7, r5
 8005a7e:	881a      	ldrh	r2, [r3, #0]
 8005a80:	197b      	adds	r3, r7, r5
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	331f      	adds	r3, #31
 8005a86:	0019      	movs	r1, r3
 8005a88:	0010      	movs	r0, r2
 8005a8a:	f000 faec 	bl	8006066 <_Page>
	x_pos = x_pos -16;
 8005a8e:	193b      	adds	r3, r7, r4
 8005a90:	193a      	adds	r2, r7, r4
 8005a92:	8812      	ldrh	r2, [r2, #0]
 8005a94:	3a10      	subs	r2, #16
 8005a96:	801a      	strh	r2, [r3, #0]
	y_pos = y_pos + 0;
 8005a98:	197b      	adds	r3, r7, r5
 8005a9a:	197a      	adds	r2, r7, r5
 8005a9c:	8812      	ldrh	r2, [r2, #0]
 8005a9e:	801a      	strh	r2, [r3, #0]
	WriteCommand(0x2C);
 8005aa0:	202c      	movs	r0, #44	; 0x2c
 8005aa2:	f000 fa59 	bl	8005f58 <WriteCommand>
	for(u8 i=0;i<32;i++)for(u8 j=0;j<16;j++){if(char_E[i] & (1<<j)) WriteData(font_color);else WriteData(background);}
 8005aa6:	23d0      	movs	r3, #208	; 0xd0
 8005aa8:	33ff      	adds	r3, #255	; 0xff
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e03d      	b.n	8005b2e <app_init+0x526>
 8005ab2:	23e7      	movs	r3, #231	; 0xe7
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	18fb      	adds	r3, r7, r3
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	e02a      	b.n	8005b14 <app_init+0x50c>
 8005abe:	23d0      	movs	r3, #208	; 0xd0
 8005ac0:	33ff      	adds	r3, #255	; 0xff
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	4b8e      	ldr	r3, [pc, #568]	; (8005d00 <app_init+0x6f8>)
 8005ac8:	21ec      	movs	r1, #236	; 0xec
 8005aca:	0049      	lsls	r1, r1, #1
 8005acc:	185b      	adds	r3, r3, r1
 8005ace:	19db      	adds	r3, r3, r7
 8005ad0:	0052      	lsls	r2, r2, #1
 8005ad2:	5ad3      	ldrh	r3, [r2, r3]
 8005ad4:	001a      	movs	r2, r3
 8005ad6:	23e7      	movs	r3, #231	; 0xe7
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	18fb      	adds	r3, r7, r3
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	411a      	asrs	r2, r3
 8005ae0:	0013      	movs	r3, r2
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <app_init+0x4f0>
 8005ae8:	23e4      	movs	r3, #228	; 0xe4
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	0018      	movs	r0, r3
 8005af2:	f000 fa4b 	bl	8005f8c <WriteData>
 8005af6:	e006      	b.n	8005b06 <app_init+0x4fe>
 8005af8:	23e3      	movs	r3, #227	; 0xe3
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f000 fa43 	bl	8005f8c <WriteData>
 8005b06:	21e7      	movs	r1, #231	; 0xe7
 8005b08:	0049      	lsls	r1, r1, #1
 8005b0a:	187b      	adds	r3, r7, r1
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	187b      	adds	r3, r7, r1
 8005b10:	3201      	adds	r2, #1
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	23e7      	movs	r3, #231	; 0xe7
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b0f      	cmp	r3, #15
 8005b1e:	d9ce      	bls.n	8005abe <app_init+0x4b6>
 8005b20:	21d0      	movs	r1, #208	; 0xd0
 8005b22:	31ff      	adds	r1, #255	; 0xff
 8005b24:	187b      	adds	r3, r7, r1
 8005b26:	781a      	ldrb	r2, [r3, #0]
 8005b28:	187b      	adds	r3, r7, r1
 8005b2a:	3201      	adds	r2, #1
 8005b2c:	701a      	strb	r2, [r3, #0]
 8005b2e:	23d0      	movs	r3, #208	; 0xd0
 8005b30:	33ff      	adds	r3, #255	; 0xff
 8005b32:	18fb      	adds	r3, r7, r3
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b1f      	cmp	r3, #31
 8005b38:	d9bb      	bls.n	8005ab2 <app_init+0x4aa>
	_NOP();
 8005b3a:	f000 fa41 	bl	8005fc0 <_NOP>

	_Column(x_pos-15,x_pos);
 8005b3e:	24e2      	movs	r4, #226	; 0xe2
 8005b40:	0064      	lsls	r4, r4, #1
 8005b42:	193b      	adds	r3, r7, r4
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	3b0f      	subs	r3, #15
 8005b48:	001a      	movs	r2, r3
 8005b4a:	193b      	adds	r3, r7, r4
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	0019      	movs	r1, r3
 8005b50:	0010      	movs	r0, r2
 8005b52:	f000 fa60 	bl	8006016 <_Column>
	_Page(y_pos,y_pos+31);
 8005b56:	25e1      	movs	r5, #225	; 0xe1
 8005b58:	006d      	lsls	r5, r5, #1
 8005b5a:	197b      	adds	r3, r7, r5
 8005b5c:	881a      	ldrh	r2, [r3, #0]
 8005b5e:	197b      	adds	r3, r7, r5
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	331f      	adds	r3, #31
 8005b64:	0019      	movs	r1, r3
 8005b66:	0010      	movs	r0, r2
 8005b68:	f000 fa7d 	bl	8006066 <_Page>
	x_pos = x_pos -16;
 8005b6c:	193b      	adds	r3, r7, r4
 8005b6e:	193a      	adds	r2, r7, r4
 8005b70:	8812      	ldrh	r2, [r2, #0]
 8005b72:	3a10      	subs	r2, #16
 8005b74:	801a      	strh	r2, [r3, #0]
	y_pos = y_pos + 0;
 8005b76:	197b      	adds	r3, r7, r5
 8005b78:	197a      	adds	r2, r7, r5
 8005b7a:	8812      	ldrh	r2, [r2, #0]
 8005b7c:	801a      	strh	r2, [r3, #0]
	WriteCommand(0x2C);
 8005b7e:	202c      	movs	r0, #44	; 0x2c
 8005b80:	f000 f9ea 	bl	8005f58 <WriteCommand>
	for(u8 i=0;i<32;i++)for(u8 j=0;j<16;j++){if(char_F[i] & (1<<j)) WriteData(font_color);else WriteData(background);}
 8005b84:	23ce      	movs	r3, #206	; 0xce
 8005b86:	33ff      	adds	r3, #255	; 0xff
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	e03d      	b.n	8005c0c <app_init+0x604>
 8005b90:	23e6      	movs	r3, #230	; 0xe6
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	18fb      	adds	r3, r7, r3
 8005b96:	2200      	movs	r2, #0
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	e02a      	b.n	8005bf2 <app_init+0x5ea>
 8005b9c:	23ce      	movs	r3, #206	; 0xce
 8005b9e:	33ff      	adds	r3, #255	; 0xff
 8005ba0:	18fb      	adds	r3, r7, r3
 8005ba2:	781a      	ldrb	r2, [r3, #0]
 8005ba4:	4b57      	ldr	r3, [pc, #348]	; (8005d04 <app_init+0x6fc>)
 8005ba6:	21ec      	movs	r1, #236	; 0xec
 8005ba8:	0049      	lsls	r1, r1, #1
 8005baa:	185b      	adds	r3, r3, r1
 8005bac:	19db      	adds	r3, r3, r7
 8005bae:	0052      	lsls	r2, r2, #1
 8005bb0:	5ad3      	ldrh	r3, [r2, r3]
 8005bb2:	001a      	movs	r2, r3
 8005bb4:	23e6      	movs	r3, #230	; 0xe6
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	18fb      	adds	r3, r7, r3
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	411a      	asrs	r2, r3
 8005bbe:	0013      	movs	r3, r2
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d007      	beq.n	8005bd6 <app_init+0x5ce>
 8005bc6:	23e4      	movs	r3, #228	; 0xe4
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	18fb      	adds	r3, r7, r3
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f000 f9dc 	bl	8005f8c <WriteData>
 8005bd4:	e006      	b.n	8005be4 <app_init+0x5dc>
 8005bd6:	23e3      	movs	r3, #227	; 0xe3
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	18fb      	adds	r3, r7, r3
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	0018      	movs	r0, r3
 8005be0:	f000 f9d4 	bl	8005f8c <WriteData>
 8005be4:	21e6      	movs	r1, #230	; 0xe6
 8005be6:	0049      	lsls	r1, r1, #1
 8005be8:	187b      	adds	r3, r7, r1
 8005bea:	781a      	ldrb	r2, [r3, #0]
 8005bec:	187b      	adds	r3, r7, r1
 8005bee:	3201      	adds	r2, #1
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	23e6      	movs	r3, #230	; 0xe6
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	18fb      	adds	r3, r7, r3
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b0f      	cmp	r3, #15
 8005bfc:	d9ce      	bls.n	8005b9c <app_init+0x594>
 8005bfe:	21ce      	movs	r1, #206	; 0xce
 8005c00:	31ff      	adds	r1, #255	; 0xff
 8005c02:	187b      	adds	r3, r7, r1
 8005c04:	781a      	ldrb	r2, [r3, #0]
 8005c06:	187b      	adds	r3, r7, r1
 8005c08:	3201      	adds	r2, #1
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	23ce      	movs	r3, #206	; 0xce
 8005c0e:	33ff      	adds	r3, #255	; 0xff
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b1f      	cmp	r3, #31
 8005c16:	d9bb      	bls.n	8005b90 <app_init+0x588>
	_NOP();
 8005c18:	f000 f9d2 	bl	8005fc0 <_NOP>

	_Column(x_pos-15,x_pos);
 8005c1c:	24e2      	movs	r4, #226	; 0xe2
 8005c1e:	0064      	lsls	r4, r4, #1
 8005c20:	193b      	adds	r3, r7, r4
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	3b0f      	subs	r3, #15
 8005c26:	001a      	movs	r2, r3
 8005c28:	193b      	adds	r3, r7, r4
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	0019      	movs	r1, r3
 8005c2e:	0010      	movs	r0, r2
 8005c30:	f000 f9f1 	bl	8006016 <_Column>
	_Page(y_pos,y_pos+31);
 8005c34:	25e1      	movs	r5, #225	; 0xe1
 8005c36:	006d      	lsls	r5, r5, #1
 8005c38:	197b      	adds	r3, r7, r5
 8005c3a:	881a      	ldrh	r2, [r3, #0]
 8005c3c:	197b      	adds	r3, r7, r5
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	331f      	adds	r3, #31
 8005c42:	0019      	movs	r1, r3
 8005c44:	0010      	movs	r0, r2
 8005c46:	f000 fa0e 	bl	8006066 <_Page>
	x_pos = x_pos -16;
 8005c4a:	193b      	adds	r3, r7, r4
 8005c4c:	193a      	adds	r2, r7, r4
 8005c4e:	8812      	ldrh	r2, [r2, #0]
 8005c50:	3a10      	subs	r2, #16
 8005c52:	801a      	strh	r2, [r3, #0]
	y_pos = y_pos + 0;
 8005c54:	197b      	adds	r3, r7, r5
 8005c56:	197a      	adds	r2, r7, r5
 8005c58:	8812      	ldrh	r2, [r2, #0]
 8005c5a:	801a      	strh	r2, [r3, #0]
	WriteCommand(0x2C);
 8005c5c:	202c      	movs	r0, #44	; 0x2c
 8005c5e:	f000 f97b 	bl	8005f58 <WriteCommand>
	for(u8 i=0;i<32;i++)for(u8 j=0;j<16;j++){if(char_G[i] & (1<<j)) WriteData(font_color);else WriteData(background);}
 8005c62:	23cc      	movs	r3, #204	; 0xcc
 8005c64:	33ff      	adds	r3, #255	; 0xff
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	2200      	movs	r2, #0
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	e03d      	b.n	8005cea <app_init+0x6e2>
 8005c6e:	23e5      	movs	r3, #229	; 0xe5
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	18fb      	adds	r3, r7, r3
 8005c74:	2200      	movs	r2, #0
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	e02a      	b.n	8005cd0 <app_init+0x6c8>
 8005c7a:	23cc      	movs	r3, #204	; 0xcc
 8005c7c:	33ff      	adds	r3, #255	; 0xff
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	781a      	ldrb	r2, [r3, #0]
 8005c82:	4b21      	ldr	r3, [pc, #132]	; (8005d08 <app_init+0x700>)
 8005c84:	21ec      	movs	r1, #236	; 0xec
 8005c86:	0049      	lsls	r1, r1, #1
 8005c88:	185b      	adds	r3, r3, r1
 8005c8a:	19db      	adds	r3, r3, r7
 8005c8c:	0052      	lsls	r2, r2, #1
 8005c8e:	5ad3      	ldrh	r3, [r2, r3]
 8005c90:	001a      	movs	r2, r3
 8005c92:	23e5      	movs	r3, #229	; 0xe5
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	18fb      	adds	r3, r7, r3
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	411a      	asrs	r2, r3
 8005c9c:	0013      	movs	r3, r2
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d007      	beq.n	8005cb4 <app_init+0x6ac>
 8005ca4:	23e4      	movs	r3, #228	; 0xe4
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	0018      	movs	r0, r3
 8005cae:	f000 f96d 	bl	8005f8c <WriteData>
 8005cb2:	e006      	b.n	8005cc2 <app_init+0x6ba>
 8005cb4:	23e3      	movs	r3, #227	; 0xe3
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f000 f965 	bl	8005f8c <WriteData>
 8005cc2:	21e5      	movs	r1, #229	; 0xe5
 8005cc4:	0049      	lsls	r1, r1, #1
 8005cc6:	187b      	adds	r3, r7, r1
 8005cc8:	781a      	ldrb	r2, [r3, #0]
 8005cca:	187b      	adds	r3, r7, r1
 8005ccc:	3201      	adds	r2, #1
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	23e5      	movs	r3, #229	; 0xe5
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	18fb      	adds	r3, r7, r3
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b0f      	cmp	r3, #15
 8005cda:	d9ce      	bls.n	8005c7a <app_init+0x672>
 8005cdc:	21cc      	movs	r1, #204	; 0xcc
 8005cde:	31ff      	adds	r1, #255	; 0xff
 8005ce0:	187b      	adds	r3, r7, r1
 8005ce2:	781a      	ldrb	r2, [r3, #0]
 8005ce4:	187b      	adds	r3, r7, r1
 8005ce6:	3201      	adds	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	23cc      	movs	r3, #204	; 0xcc
 8005cec:	33ff      	adds	r3, #255	; 0xff
 8005cee:	18fb      	adds	r3, r7, r3
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b1f      	cmp	r3, #31
 8005cf4:	d9bb      	bls.n	8005c6e <app_init+0x666>
	_NOP();
 8005cf6:	f000 f963 	bl	8005fc0 <_NOP>

	while(1)
 8005cfa:	e7fe      	b.n	8005cfa <app_init+0x6f2>
 8005cfc:	fffffee8 	.word	0xfffffee8
 8005d00:	fffffea8 	.word	0xfffffea8
 8005d04:	fffffe68 	.word	0xfffffe68
 8005d08:	fffffe28 	.word	0xfffffe28

08005d0c <app_loop>:
	//driver.init();
}


void app_loop(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0



	// Infinite Loop
	while(1)
 8005d10:	e7fe      	b.n	8005d10 <app_loop+0x4>
	...

08005d14 <file_init>:
static UINT				byte_read;
static u32				totalSpace, freeSpace;
static u8			    buf[2304];

void file_init(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
	if (f_mount(&FatFs,"",1)!= FR_OK)LOG("Cannot mount the card SD\n");
 8005d18:	493a      	ldr	r1, [pc, #232]	; (8005e04 <file_init+0xf0>)
 8005d1a:	4b3b      	ldr	r3, [pc, #236]	; (8005e08 <file_init+0xf4>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	0018      	movs	r0, r3
 8005d20:	f001 f8ba 	bl	8006e98 <f_mount>
 8005d24:	1e03      	subs	r3, r0, #0
 8005d26:	d004      	beq.n	8005d32 <file_init+0x1e>
 8005d28:	4b38      	ldr	r3, [pc, #224]	; (8005e0c <file_init+0xf8>)
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	f000 f9e2 	bl	80060f4 <uart1_printSTR>
		LOG("\tTotalSpace:\t");			LOGn(totalSpace);
		LOG("\tMB.\n\tFreeSpace:\t");	LOGn(freeSpace);
		LOG("\tMB.\n");
		LOG("|------------------------------------------------|\n");
	}
}
 8005d30:	e065      	b.n	8005dfe <file_init+0xea>
		LOG("SD card infos:\n");
 8005d32:	4b37      	ldr	r3, [pc, #220]	; (8005e10 <file_init+0xfc>)
 8005d34:	0018      	movs	r0, r3
 8005d36:	f000 f9dd 	bl	80060f4 <uart1_printSTR>
		f_getfree("", &fre_clust, &pfs);
 8005d3a:	4a36      	ldr	r2, [pc, #216]	; (8005e14 <file_init+0x100>)
 8005d3c:	4936      	ldr	r1, [pc, #216]	; (8005e18 <file_init+0x104>)
 8005d3e:	4b31      	ldr	r3, [pc, #196]	; (8005e04 <file_init+0xf0>)
 8005d40:	0018      	movs	r0, r3
 8005d42:	f001 f8f9 	bl	8006f38 <f_getfree>
		totalSpace = (uint32_t)(((pfs->n_fatent - 2) * pfs->csize * 0.5)/1000);
 8005d46:	4b33      	ldr	r3, [pc, #204]	; (8005e14 <file_init+0x100>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a34      	ldr	r2, [pc, #208]	; (8005e1c <file_init+0x108>)
 8005d4c:	589b      	ldr	r3, [r3, r2]
 8005d4e:	1e9a      	subs	r2, r3, #2
 8005d50:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <file_init+0x100>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4932      	ldr	r1, [pc, #200]	; (8005e20 <file_init+0x10c>)
 8005d56:	5c5b      	ldrb	r3, [r3, r1]
 8005d58:	4353      	muls	r3, r2
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	f7fb fbb2 	bl	80014c4 <__aeabi_ui2d>
 8005d60:	2200      	movs	r2, #0
 8005d62:	4b30      	ldr	r3, [pc, #192]	; (8005e24 <file_init+0x110>)
 8005d64:	f7fa fd7a 	bl	800085c <__aeabi_dmul>
 8005d68:	0002      	movs	r2, r0
 8005d6a:	000b      	movs	r3, r1
 8005d6c:	0010      	movs	r0, r2
 8005d6e:	0019      	movs	r1, r3
 8005d70:	2200      	movs	r2, #0
 8005d72:	4b2d      	ldr	r3, [pc, #180]	; (8005e28 <file_init+0x114>)
 8005d74:	f7fa fa7c 	bl	8000270 <__aeabi_ddiv>
 8005d78:	0002      	movs	r2, r0
 8005d7a:	000b      	movs	r3, r1
 8005d7c:	0010      	movs	r0, r2
 8005d7e:	0019      	movs	r1, r3
 8005d80:	f7fa fa58 	bl	8000234 <__aeabi_d2uiz>
 8005d84:	0002      	movs	r2, r0
 8005d86:	4b29      	ldr	r3, [pc, #164]	; (8005e2c <file_init+0x118>)
 8005d88:	601a      	str	r2, [r3, #0]
		freeSpace = (uint32_t)((fre_clust * pfs->csize * 0.5)/1000);
 8005d8a:	4b22      	ldr	r3, [pc, #136]	; (8005e14 <file_init+0x100>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a24      	ldr	r2, [pc, #144]	; (8005e20 <file_init+0x10c>)
 8005d90:	5c9b      	ldrb	r3, [r3, r2]
 8005d92:	001a      	movs	r2, r3
 8005d94:	4b20      	ldr	r3, [pc, #128]	; (8005e18 <file_init+0x104>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4353      	muls	r3, r2
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f7fb fb92 	bl	80014c4 <__aeabi_ui2d>
 8005da0:	2200      	movs	r2, #0
 8005da2:	4b20      	ldr	r3, [pc, #128]	; (8005e24 <file_init+0x110>)
 8005da4:	f7fa fd5a 	bl	800085c <__aeabi_dmul>
 8005da8:	0002      	movs	r2, r0
 8005daa:	000b      	movs	r3, r1
 8005dac:	0010      	movs	r0, r2
 8005dae:	0019      	movs	r1, r3
 8005db0:	2200      	movs	r2, #0
 8005db2:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <file_init+0x114>)
 8005db4:	f7fa fa5c 	bl	8000270 <__aeabi_ddiv>
 8005db8:	0002      	movs	r2, r0
 8005dba:	000b      	movs	r3, r1
 8005dbc:	0010      	movs	r0, r2
 8005dbe:	0019      	movs	r1, r3
 8005dc0:	f7fa fa38 	bl	8000234 <__aeabi_d2uiz>
 8005dc4:	0002      	movs	r2, r0
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	; (8005e30 <file_init+0x11c>)
 8005dc8:	601a      	str	r2, [r3, #0]
		LOG("\tTotalSpace:\t");			LOGn(totalSpace);
 8005dca:	4b1a      	ldr	r3, [pc, #104]	; (8005e34 <file_init+0x120>)
 8005dcc:	0018      	movs	r0, r3
 8005dce:	f000 f991 	bl	80060f4 <uart1_printSTR>
 8005dd2:	4b16      	ldr	r3, [pc, #88]	; (8005e2c <file_init+0x118>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f000 f9b2 	bl	8006140 <uart1_printNUM>
		LOG("\tMB.\n\tFreeSpace:\t");	LOGn(freeSpace);
 8005ddc:	4b16      	ldr	r3, [pc, #88]	; (8005e38 <file_init+0x124>)
 8005dde:	0018      	movs	r0, r3
 8005de0:	f000 f988 	bl	80060f4 <uart1_printSTR>
 8005de4:	4b12      	ldr	r3, [pc, #72]	; (8005e30 <file_init+0x11c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	0018      	movs	r0, r3
 8005dea:	f000 f9a9 	bl	8006140 <uart1_printNUM>
		LOG("\tMB.\n");
 8005dee:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <file_init+0x128>)
 8005df0:	0018      	movs	r0, r3
 8005df2:	f000 f97f 	bl	80060f4 <uart1_printSTR>
		LOG("|------------------------------------------------|\n");
 8005df6:	4b12      	ldr	r3, [pc, #72]	; (8005e40 <file_init+0x12c>)
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f000 f97b 	bl	80060f4 <uart1_printSTR>
}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	08007cfc 	.word	0x08007cfc
 8005e08:	20000230 	.word	0x20000230
 8005e0c:	08007d00 	.word	0x08007d00
 8005e10:	08007d1c 	.word	0x08007d1c
 8005e14:	20000660 	.word	0x20000660
 8005e18:	20000664 	.word	0x20000664
 8005e1c:	00000414 	.word	0x00000414
 8005e20:	00000402 	.word	0x00000402
 8005e24:	3fe00000 	.word	0x3fe00000
 8005e28:	408f4000 	.word	0x408f4000
 8005e2c:	20000668 	.word	0x20000668
 8005e30:	2000066c 	.word	0x2000066c
 8005e34:	08007d2c 	.word	0x08007d2c
 8005e38:	08007d3c 	.word	0x08007d3c
 8005e3c:	08007d50 	.word	0x08007d50
 8005e40:	08007d58 	.word	0x08007d58

08005e44 <ili9488_init>:
#include <ili9488.h>


void ili9488_init(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
	// Hardware Reset:
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8005e48:	4b40      	ldr	r3, [pc, #256]	; (8005f4c <ili9488_init+0x108>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f7fd fb82 	bl	8003558 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8005e54:	20c8      	movs	r0, #200	; 0xc8
 8005e56:	f7fc ff01 	bl	8002c5c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8005e5a:	4b3c      	ldr	r3, [pc, #240]	; (8005f4c <ili9488_init+0x108>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	2101      	movs	r1, #1
 8005e60:	0018      	movs	r0, r3
 8005e62:	f7fd fb79 	bl	8003558 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8005e66:	20c8      	movs	r0, #200	; 0xc8
 8005e68:	f7fc fef8 	bl	8002c5c <HAL_Delay>

	_SleepOut();
 8005e6c:	f000 f8b0 	bl	8005fd0 <_SleepOut>
    WriteData(0x0B);
    WriteData(0x31);
    WriteData(0x37);
    WriteData(0x0F);*/

    WriteCommand(0XC0);   //Power Control 1
 8005e70:	20c0      	movs	r0, #192	; 0xc0
 8005e72:	f000 f871 	bl	8005f58 <WriteCommand>
    WriteData(0x18); //Vreg1out
 8005e76:	2018      	movs	r0, #24
 8005e78:	f000 f888 	bl	8005f8c <WriteData>
    WriteData(0x17); //Verg2out
 8005e7c:	2017      	movs	r0, #23
 8005e7e:	f000 f885 	bl	8005f8c <WriteData>

    WriteCommand(0xC1);   //Power Control 2
 8005e82:	20c1      	movs	r0, #193	; 0xc1
 8005e84:	f000 f868 	bl	8005f58 <WriteCommand>
    WriteData(0x41); //VGH,VGL
 8005e88:	2041      	movs	r0, #65	; 0x41
 8005e8a:	f000 f87f 	bl	8005f8c <WriteData>

    WriteCommand(0xC5);   //Power Control 3
 8005e8e:	20c5      	movs	r0, #197	; 0xc5
 8005e90:	f000 f862 	bl	8005f58 <WriteCommand>
    WriteData(0x00);
 8005e94:	2000      	movs	r0, #0
 8005e96:	f000 f879 	bl	8005f8c <WriteData>
    WriteData(0x1A); //Vcom
 8005e9a:	201a      	movs	r0, #26
 8005e9c:	f000 f876 	bl	8005f8c <WriteData>
    WriteData(0x80);
 8005ea0:	2080      	movs	r0, #128	; 0x80
 8005ea2:	f000 f873 	bl	8005f8c <WriteData>

    WriteCommand(0x36);
 8005ea6:	2036      	movs	r0, #54	; 0x36
 8005ea8:	f000 f856 	bl	8005f58 <WriteCommand>
    WriteData(0x00);  // MY MX MV ML BGR MH HF VF  4A     48  08
 8005eac:	2000      	movs	r0, #0
 8005eae:	f000 f86d 	bl	8005f8c <WriteData>
                    // (0=RGB color filter panel, 1=BGR color filter panel)
                    // MH Horizontal Refresh ORDER
                    // Horizontal Flip x
                    // Vertical Flip  y

    WriteCommand(0x3A);   // Interface Pixel Format
 8005eb2:	203a      	movs	r0, #58	; 0x3a
 8005eb4:	f000 f850 	bl	8005f58 <WriteCommand>
    WriteData(0x55); //16bit
 8005eb8:	2055      	movs	r0, #85	; 0x55
 8005eba:	f000 f867 	bl	8005f8c <WriteData>
    //WriteData(0x66); //18bit

    WriteCommand(0XB0);   // Interface Mode Control
 8005ebe:	20b0      	movs	r0, #176	; 0xb0
 8005ec0:	f000 f84a 	bl	8005f58 <WriteCommand>
    WriteData(0x00);
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	f000 f861 	bl	8005f8c <WriteData>

    WriteCommand(0xB1);   //Frame rate
 8005eca:	20b1      	movs	r0, #177	; 0xb1
 8005ecc:	f000 f844 	bl	8005f58 <WriteCommand>
    WriteData(0xA0); //60Hz
 8005ed0:	20a0      	movs	r0, #160	; 0xa0
 8005ed2:	f000 f85b 	bl	8005f8c <WriteData>

    WriteCommand(0xB4);   //Display Inversion Control
 8005ed6:	20b4      	movs	r0, #180	; 0xb4
 8005ed8:	f000 f83e 	bl	8005f58 <WriteCommand>
    //WriteData(0x02); 	//2-dot
    WriteData(0x00); 	//Column inversion
 8005edc:	2000      	movs	r0, #0
 8005ede:	f000 f855 	bl	8005f8c <WriteData>

    WriteCommand(0XB6);   //RGB/MCU Interface Control
 8005ee2:	20b6      	movs	r0, #182	; 0xb6
 8005ee4:	f000 f838 	bl	8005f58 <WriteCommand>
    WriteData(0x02); //MCU RGB
 8005ee8:	2002      	movs	r0, #2
 8005eea:	f000 f84f 	bl	8005f8c <WriteData>
    WriteData(0x02); //Source,Gate scan dieection
 8005eee:	2002      	movs	r0, #2
 8005ef0:	f000 f84c 	bl	8005f8c <WriteData>

    //WriteCommand(0XE9);    // Set Image Function
    //WriteData(0x00);  //disable 24 bit data input

    WriteCommand(0xF7);    // Adjust Control
 8005ef4:	20f7      	movs	r0, #247	; 0xf7
 8005ef6:	f000 f82f 	bl	8005f58 <WriteCommand>
    WriteData(0xA9);
 8005efa:	20a9      	movs	r0, #169	; 0xa9
 8005efc:	f000 f846 	bl	8005f8c <WriteData>
    WriteData(0x51);
 8005f00:	2051      	movs	r0, #81	; 0x51
 8005f02:	f000 f843 	bl	8005f8c <WriteData>

    _NormalMode();
 8005f06:	f000 f86e 	bl	8005fe6 <_NormalMode>
    _InversionOff();
 8005f0a:	f000 f874 	bl	8005ff6 <_InversionOff>
    _IDLEModeOff();
 8005f0e:	f000 f8d2 	bl	80060b6 <_IDLEModeOff>
	_DisplayOn();
 8005f12:	f000 f878 	bl	8006006 <_DisplayOn>

	_Column(0x0000,0x01DF);
 8005f16:	23e0      	movs	r3, #224	; 0xe0
 8005f18:	33ff      	adds	r3, #255	; 0xff
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	f000 f87a 	bl	8006016 <_Column>
	_Page(0x0000,0x013F);
 8005f22:	2340      	movs	r3, #64	; 0x40
 8005f24:	33ff      	adds	r3, #255	; 0xff
 8005f26:	0019      	movs	r1, r3
 8005f28:	2000      	movs	r0, #0
 8005f2a:	f000 f89c 	bl	8006066 <_Page>
    HAL_Delay(120);
 8005f2e:	2078      	movs	r0, #120	; 0x78
 8005f30:	f7fc fe94 	bl	8002c5c <HAL_Delay>

	LOG("TFT now has been initialized:\n");
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <ili9488_init+0x10c>)
 8005f36:	0018      	movs	r0, r3
 8005f38:	f000 f8dc 	bl	80060f4 <uart1_printSTR>
	LOG("|------------------------------------------------|\n");
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <ili9488_init+0x110>)
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f000 f8d8 	bl	80060f4 <uart1_printSTR>
}
 8005f44:	46c0      	nop			; (mov r8, r8)
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	48001400 	.word	0x48001400
 8005f50:	08008160 	.word	0x08008160
 8005f54:	08008180 	.word	0x08008180

08005f58 <WriteCommand>:


void WriteCommand(u8 cmd)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	0002      	movs	r2, r0
 8005f60:	1dfb      	adds	r3, r7, #7
 8005f62:	701a      	strb	r2, [r3, #0]
	// RD:1, WR:0->1, RS:0

	RWS_100;
 8005f64:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <WriteCommand+0x2c>)
 8005f66:	2280      	movs	r2, #128	; 0x80
 8005f68:	0212      	lsls	r2, r2, #8
 8005f6a:	615a      	str	r2, [r3, #20]

	GPIOB->ODR = (u32)cmd;
 8005f6c:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <WriteCommand+0x30>)
 8005f6e:	1dfa      	adds	r2, r7, #7
 8005f70:	7812      	ldrb	r2, [r2, #0]
 8005f72:	615a      	str	r2, [r3, #20]

	RWS_110;
 8005f74:	4b03      	ldr	r3, [pc, #12]	; (8005f84 <WriteCommand+0x2c>)
 8005f76:	22c0      	movs	r2, #192	; 0xc0
 8005f78:	0212      	lsls	r2, r2, #8
 8005f7a:	615a      	str	r2, [r3, #20]
}
 8005f7c:	46c0      	nop			; (mov r8, r8)
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	b002      	add	sp, #8
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	48000800 	.word	0x48000800
 8005f88:	48000400 	.word	0x48000400

08005f8c <WriteData>:
void WriteData(u16 data)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	0002      	movs	r2, r0
 8005f94:	1dbb      	adds	r3, r7, #6
 8005f96:	801a      	strh	r2, [r3, #0]
	// RD:1, WR:0->1, RS:1

	RWS_101;
 8005f98:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <WriteData+0x2c>)
 8005f9a:	22a0      	movs	r2, #160	; 0xa0
 8005f9c:	0212      	lsls	r2, r2, #8
 8005f9e:	615a      	str	r2, [r3, #20]

	GPIOB->ODR = (u32)data;
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <WriteData+0x30>)
 8005fa2:	1dba      	adds	r2, r7, #6
 8005fa4:	8812      	ldrh	r2, [r2, #0]
 8005fa6:	615a      	str	r2, [r3, #20]

	RWS_111;
 8005fa8:	4b03      	ldr	r3, [pc, #12]	; (8005fb8 <WriteData+0x2c>)
 8005faa:	22e0      	movs	r2, #224	; 0xe0
 8005fac:	0212      	lsls	r2, r2, #8
 8005fae:	615a      	str	r2, [r3, #20]
}
 8005fb0:	46c0      	nop			; (mov r8, r8)
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b002      	add	sp, #8
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	48000800 	.word	0x48000800
 8005fbc:	48000400 	.word	0x48000400

08005fc0 <_NOP>:
	GPIOB->MODER = 0x55555555;  // Set as output mode after read

	return rtnval;
}

void _NOP(void)						{WriteCommand(0x00);}
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	f7ff ffc7 	bl	8005f58 <WriteCommand>
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <_SleepOut>:
void _Reset(void)						{WriteCommand(0x01);HAL_Delay(120);}
void _SleepIn(void)					{WriteCommand(0x10);}
void _SleepOut(void)					{WriteCommand(0x11);HAL_Delay(5);}
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	2011      	movs	r0, #17
 8005fd6:	f7ff ffbf 	bl	8005f58 <WriteCommand>
 8005fda:	2005      	movs	r0, #5
 8005fdc:	f7fc fe3e 	bl	8002c5c <HAL_Delay>
 8005fe0:	46c0      	nop			; (mov r8, r8)
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <_NormalMode>:
void _PartialMode(void)				{WriteCommand(0x12);}
void _NormalMode(void)					{WriteCommand(0x13);}
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	2013      	movs	r0, #19
 8005fec:	f7ff ffb4 	bl	8005f58 <WriteCommand>
 8005ff0:	46c0      	nop			; (mov r8, r8)
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <_InversionOff>:
void _InversionOff(void)				{WriteCommand(0x20);}
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	2020      	movs	r0, #32
 8005ffc:	f7ff ffac 	bl	8005f58 <WriteCommand>
 8006000:	46c0      	nop			; (mov r8, r8)
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <_DisplayOn>:
void _InversionOn(void)				{WriteCommand(0x21);}
void _PxielOff(void)					{WriteCommand(0x22);}
void _PxielOn(void)					{WriteCommand(0x23);}
void _DisplayOff(void)					{WriteCommand(0x28);}
void _DisplayOn(void)					{WriteCommand(0x29);}
 8006006:	b580      	push	{r7, lr}
 8006008:	af00      	add	r7, sp, #0
 800600a:	2029      	movs	r0, #41	; 0x29
 800600c:	f7ff ffa4 	bl	8005f58 <WriteCommand>
 8006010:	46c0      	nop			; (mov r8, r8)
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <_Column>:
void _Column(u16 begin,u16 end)		{WriteCommand(0x2A);WriteData(begin>>8);WriteData(begin);WriteData(end>>8);WriteData(end);}
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	0002      	movs	r2, r0
 800601e:	1dbb      	adds	r3, r7, #6
 8006020:	801a      	strh	r2, [r3, #0]
 8006022:	1d3b      	adds	r3, r7, #4
 8006024:	1c0a      	adds	r2, r1, #0
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	202a      	movs	r0, #42	; 0x2a
 800602a:	f7ff ff95 	bl	8005f58 <WriteCommand>
 800602e:	1dbb      	adds	r3, r7, #6
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	b29b      	uxth	r3, r3
 8006036:	0018      	movs	r0, r3
 8006038:	f7ff ffa8 	bl	8005f8c <WriteData>
 800603c:	1dbb      	adds	r3, r7, #6
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	0018      	movs	r0, r3
 8006042:	f7ff ffa3 	bl	8005f8c <WriteData>
 8006046:	1d3b      	adds	r3, r7, #4
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	0a1b      	lsrs	r3, r3, #8
 800604c:	b29b      	uxth	r3, r3
 800604e:	0018      	movs	r0, r3
 8006050:	f7ff ff9c 	bl	8005f8c <WriteData>
 8006054:	1d3b      	adds	r3, r7, #4
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	0018      	movs	r0, r3
 800605a:	f7ff ff97 	bl	8005f8c <WriteData>
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	46bd      	mov	sp, r7
 8006062:	b002      	add	sp, #8
 8006064:	bd80      	pop	{r7, pc}

08006066 <_Page>:
void _Page(u16 begin,u16 end)			{WriteCommand(0x2B);WriteData(begin>>8);WriteData(begin);WriteData(end>>8);WriteData(end);}
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	0002      	movs	r2, r0
 800606e:	1dbb      	adds	r3, r7, #6
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	1d3b      	adds	r3, r7, #4
 8006074:	1c0a      	adds	r2, r1, #0
 8006076:	801a      	strh	r2, [r3, #0]
 8006078:	202b      	movs	r0, #43	; 0x2b
 800607a:	f7ff ff6d 	bl	8005f58 <WriteCommand>
 800607e:	1dbb      	adds	r3, r7, #6
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	0a1b      	lsrs	r3, r3, #8
 8006084:	b29b      	uxth	r3, r3
 8006086:	0018      	movs	r0, r3
 8006088:	f7ff ff80 	bl	8005f8c <WriteData>
 800608c:	1dbb      	adds	r3, r7, #6
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	0018      	movs	r0, r3
 8006092:	f7ff ff7b 	bl	8005f8c <WriteData>
 8006096:	1d3b      	adds	r3, r7, #4
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	b29b      	uxth	r3, r3
 800609e:	0018      	movs	r0, r3
 80060a0:	f7ff ff74 	bl	8005f8c <WriteData>
 80060a4:	1d3b      	adds	r3, r7, #4
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	0018      	movs	r0, r3
 80060aa:	f7ff ff6f 	bl	8005f8c <WriteData>
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	46bd      	mov	sp, r7
 80060b2:	b002      	add	sp, #8
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <_IDLEModeOff>:
void _IDLEModeOff(void)				{WriteCommand(0x38);}
 80060b6:	b580      	push	{r7, lr}
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	2038      	movs	r0, #56	; 0x38
 80060bc:	f7ff ff4c 	bl	8005f58 <WriteCommand>
 80060c0:	46c0      	nop			; (mov r8, r8)
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <uart1_init>:
#include <app.h>

void uart1_init(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
	LOG(" ------------------------------------------------|\n");
 80060cc:	4b07      	ldr	r3, [pc, #28]	; (80060ec <uart1_init+0x24>)
 80060ce:	0018      	movs	r0, r3
 80060d0:	f000 f810 	bl	80060f4 <uart1_printSTR>
	LOG("|		    TFT display Application Rev0.2		  |\n");
 80060d4:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <uart1_init+0x28>)
 80060d6:	0018      	movs	r0, r3
 80060d8:	f000 f80c 	bl	80060f4 <uart1_printSTR>
	LOG(" ------------------------------------------------|\n");
 80060dc:	4b03      	ldr	r3, [pc, #12]	; (80060ec <uart1_init+0x24>)
 80060de:	0018      	movs	r0, r3
 80060e0:	f000 f808 	bl	80060f4 <uart1_printSTR>
}
 80060e4:	46c0      	nop			; (mov r8, r8)
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	080081b4 	.word	0x080081b4
 80060f0:	080081e8 	.word	0x080081e8

080060f4 <uart1_printSTR>:
void uart1_printSTR(const char buf[])
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
	u8 len = 0;
 80060fc:	230f      	movs	r3, #15
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
	while(buf[len]!=0)len++;
 8006104:	e005      	b.n	8006112 <uart1_printSTR+0x1e>
 8006106:	210f      	movs	r1, #15
 8006108:	187b      	adds	r3, r7, r1
 800610a:	781a      	ldrb	r2, [r3, #0]
 800610c:	187b      	adds	r3, r7, r1
 800610e:	3201      	adds	r2, #1
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	210f      	movs	r1, #15
 8006114:	187b      	adds	r3, r7, r1
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	18d3      	adds	r3, r2, r3
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f1      	bne.n	8006106 <uart1_printSTR+0x12>
	HAL_UART_Transmit(&huart1,buf, len, HAL_MAX_DELAY);
 8006122:	187b      	adds	r3, r7, r1
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	b29a      	uxth	r2, r3
 8006128:	2301      	movs	r3, #1
 800612a:	425b      	negs	r3, r3
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	4803      	ldr	r0, [pc, #12]	; (800613c <uart1_printSTR+0x48>)
 8006130:	f7fe fe44 	bl	8004dbc <HAL_UART_Transmit>
}
 8006134:	46c0      	nop			; (mov r8, r8)
 8006136:	46bd      	mov	sp, r7
 8006138:	b004      	add	sp, #16
 800613a:	bd80      	pop	{r7, pc}
 800613c:	2000019c 	.word	0x2000019c

08006140 <uart1_printNUM>:
void uart1_printNUM(int64_t num)
{
 8006140:	b590      	push	{r4, r7, lr}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6038      	str	r0, [r7, #0]
 8006148:	6079      	str	r1, [r7, #4]
	char buf[10] = {0};
 800614a:	240c      	movs	r4, #12
 800614c:	193b      	adds	r3, r7, r4
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	3304      	adds	r3, #4
 8006154:	2206      	movs	r2, #6
 8006156:	2100      	movs	r1, #0
 8006158:	0018      	movs	r0, r3
 800615a:	f001 f86a 	bl	8007232 <memset>
	sprintf(buf, "%d",num);
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4906      	ldr	r1, [pc, #24]	; (800617c <uart1_printNUM+0x3c>)
 8006164:	1938      	adds	r0, r7, r4
 8006166:	f001 f86d 	bl	8007244 <siprintf>
	uart1_printSTR(buf);
 800616a:	193b      	adds	r3, r7, r4
 800616c:	0018      	movs	r0, r3
 800616e:	f7ff ffc1 	bl	80060f4 <uart1_printSTR>
}
 8006172:	46c0      	nop			; (mov r8, r8)
 8006174:	46bd      	mov	sp, r7
 8006176:	b007      	add	sp, #28
 8006178:	bd90      	pop	{r4, r7, pc}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	08008214 	.word	0x08008214

08006180 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006180:	b5b0      	push	{r4, r5, r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	0002      	movs	r2, r0
 8006188:	1dfb      	adds	r3, r7, #7
 800618a:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800618c:	1dfb      	adds	r3, r7, #7
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	4a0b      	ldr	r2, [pc, #44]	; (80061c0 <disk_status+0x40>)
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	18d3      	adds	r3, r2, r3
 8006196:	3304      	adds	r3, #4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	1dfa      	adds	r2, r7, #7
 800619e:	7812      	ldrb	r2, [r2, #0]
 80061a0:	4907      	ldr	r1, [pc, #28]	; (80061c0 <disk_status+0x40>)
 80061a2:	188a      	adds	r2, r1, r2
 80061a4:	7a12      	ldrb	r2, [r2, #8]
 80061a6:	250f      	movs	r5, #15
 80061a8:	197c      	adds	r4, r7, r5
 80061aa:	0010      	movs	r0, r2
 80061ac:	4798      	blx	r3
 80061ae:	0003      	movs	r3, r0
 80061b0:	7023      	strb	r3, [r4, #0]
  return stat;
 80061b2:	197b      	adds	r3, r7, r5
 80061b4:	781b      	ldrb	r3, [r3, #0]
}
 80061b6:	0018      	movs	r0, r3
 80061b8:	46bd      	mov	sp, r7
 80061ba:	b004      	add	sp, #16
 80061bc:	bdb0      	pop	{r4, r5, r7, pc}
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	20000690 	.word	0x20000690

080061c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80061c4:	b590      	push	{r4, r7, lr}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	0002      	movs	r2, r0
 80061cc:	1dfb      	adds	r3, r7, #7
 80061ce:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80061d0:	200f      	movs	r0, #15
 80061d2:	183b      	adds	r3, r7, r0
 80061d4:	2200      	movs	r2, #0
 80061d6:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 80061d8:	1dfb      	adds	r3, r7, #7
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	4a10      	ldr	r2, [pc, #64]	; (8006220 <disk_initialize+0x5c>)
 80061de:	5cd3      	ldrb	r3, [r2, r3]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d116      	bne.n	8006212 <disk_initialize+0x4e>
  { 
    disk.is_initialized[pdrv] = 1;
 80061e4:	1dfb      	adds	r3, r7, #7
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	4a0d      	ldr	r2, [pc, #52]	; (8006220 <disk_initialize+0x5c>)
 80061ea:	2101      	movs	r1, #1
 80061ec:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80061ee:	1dfb      	adds	r3, r7, #7
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	4a0b      	ldr	r2, [pc, #44]	; (8006220 <disk_initialize+0x5c>)
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	18d3      	adds	r3, r2, r3
 80061f8:	3304      	adds	r3, #4
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	1dfa      	adds	r2, r7, #7
 8006200:	7812      	ldrb	r2, [r2, #0]
 8006202:	4907      	ldr	r1, [pc, #28]	; (8006220 <disk_initialize+0x5c>)
 8006204:	188a      	adds	r2, r1, r2
 8006206:	7a12      	ldrb	r2, [r2, #8]
 8006208:	183c      	adds	r4, r7, r0
 800620a:	0010      	movs	r0, r2
 800620c:	4798      	blx	r3
 800620e:	0003      	movs	r3, r0
 8006210:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8006212:	230f      	movs	r3, #15
 8006214:	18fb      	adds	r3, r7, r3
 8006216:	781b      	ldrb	r3, [r3, #0]
}
 8006218:	0018      	movs	r0, r3
 800621a:	46bd      	mov	sp, r7
 800621c:	b005      	add	sp, #20
 800621e:	bd90      	pop	{r4, r7, pc}
 8006220:	20000690 	.word	0x20000690

08006224 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	210f      	movs	r1, #15
 8006232:	187b      	adds	r3, r7, r1
 8006234:	1c02      	adds	r2, r0, #0
 8006236:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006238:	187b      	adds	r3, r7, r1
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	4a0c      	ldr	r2, [pc, #48]	; (8006270 <disk_read+0x4c>)
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	18d3      	adds	r3, r2, r3
 8006242:	3304      	adds	r3, #4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689d      	ldr	r5, [r3, #8]
 8006248:	187b      	adds	r3, r7, r1
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	4a08      	ldr	r2, [pc, #32]	; (8006270 <disk_read+0x4c>)
 800624e:	18d3      	adds	r3, r2, r3
 8006250:	7a18      	ldrb	r0, [r3, #8]
 8006252:	2617      	movs	r6, #23
 8006254:	19bc      	adds	r4, r7, r6
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	47a8      	blx	r5
 800625e:	0003      	movs	r3, r0
 8006260:	7023      	strb	r3, [r4, #0]
  return res;
 8006262:	19bb      	adds	r3, r7, r6
 8006264:	781b      	ldrb	r3, [r3, #0]
}
 8006266:	0018      	movs	r0, r3
 8006268:	46bd      	mov	sp, r7
 800626a:	b007      	add	sp, #28
 800626c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800626e:	46c0      	nop			; (mov r8, r8)
 8006270:	20000690 	.word	0x20000690

08006274 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	607a      	str	r2, [r7, #4]
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	210f      	movs	r1, #15
 8006282:	187b      	adds	r3, r7, r1
 8006284:	1c02      	adds	r2, r0, #0
 8006286:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006288:	187b      	adds	r3, r7, r1
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	4a0c      	ldr	r2, [pc, #48]	; (80062c0 <disk_write+0x4c>)
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	18d3      	adds	r3, r2, r3
 8006292:	3304      	adds	r3, #4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68dd      	ldr	r5, [r3, #12]
 8006298:	187b      	adds	r3, r7, r1
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	4a08      	ldr	r2, [pc, #32]	; (80062c0 <disk_write+0x4c>)
 800629e:	18d3      	adds	r3, r2, r3
 80062a0:	7a18      	ldrb	r0, [r3, #8]
 80062a2:	2617      	movs	r6, #23
 80062a4:	19bc      	adds	r4, r7, r6
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	47a8      	blx	r5
 80062ae:	0003      	movs	r3, r0
 80062b0:	7023      	strb	r3, [r4, #0]
  return res;
 80062b2:	19bb      	adds	r3, r7, r6
 80062b4:	781b      	ldrb	r3, [r3, #0]
}
 80062b6:	0018      	movs	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b007      	add	sp, #28
 80062bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	20000690 	.word	0x20000690

080062c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80062c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	603a      	str	r2, [r7, #0]
 80062cc:	1dfb      	adds	r3, r7, #7
 80062ce:	1c02      	adds	r2, r0, #0
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	1dbb      	adds	r3, r7, #6
 80062d4:	1c0a      	adds	r2, r1, #0
 80062d6:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80062d8:	1dfb      	adds	r3, r7, #7
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	4a0c      	ldr	r2, [pc, #48]	; (8006310 <disk_ioctl+0x4c>)
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	18d3      	adds	r3, r2, r3
 80062e2:	3304      	adds	r3, #4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	1dfa      	adds	r2, r7, #7
 80062ea:	7812      	ldrb	r2, [r2, #0]
 80062ec:	4908      	ldr	r1, [pc, #32]	; (8006310 <disk_ioctl+0x4c>)
 80062ee:	188a      	adds	r2, r1, r2
 80062f0:	7a10      	ldrb	r0, [r2, #8]
 80062f2:	260f      	movs	r6, #15
 80062f4:	19bc      	adds	r4, r7, r6
 80062f6:	683d      	ldr	r5, [r7, #0]
 80062f8:	1dba      	adds	r2, r7, #6
 80062fa:	7811      	ldrb	r1, [r2, #0]
 80062fc:	002a      	movs	r2, r5
 80062fe:	4798      	blx	r3
 8006300:	0003      	movs	r3, r0
 8006302:	7023      	strb	r3, [r4, #0]
  return res;
 8006304:	19bb      	adds	r3, r7, r6
 8006306:	781b      	ldrb	r3, [r3, #0]
}
 8006308:	0018      	movs	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	b005      	add	sp, #20
 800630e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006310:	20000690 	.word	0x20000690

08006314 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	e014      	b.n	800634c <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006322:	490e      	ldr	r1, [pc, #56]	; (800635c <clear_lock+0x48>)
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	0013      	movs	r3, r2
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	189b      	adds	r3, r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	585b      	ldr	r3, [r3, r1]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	429a      	cmp	r2, r3
 8006334:	d107      	bne.n	8006346 <clear_lock+0x32>
 8006336:	4909      	ldr	r1, [pc, #36]	; (800635c <clear_lock+0x48>)
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	0013      	movs	r3, r2
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	189b      	adds	r3, r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	2200      	movs	r2, #0
 8006344:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3301      	adds	r3, #1
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d9e7      	bls.n	8006322 <clear_lock+0xe>
	}
}
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	46c0      	nop			; (mov r8, r8)
 8006356:	46bd      	mov	sp, r7
 8006358:	b004      	add	sp, #16
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000678 	.word	0x20000678

08006360 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006360:	b590      	push	{r4, r7, lr}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006368:	240f      	movs	r4, #15
 800636a:	193b      	adds	r3, r7, r4
 800636c:	2200      	movs	r2, #0
 800636e:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a23      	ldr	r2, [pc, #140]	; (8006400 <sync_window+0xa0>)
 8006374:	5c9b      	ldrb	r3, [r3, r2]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d03b      	beq.n	80063f2 <sync_window+0x92>
		wsect = fs->winsect;	/* Current sector number */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a21      	ldr	r2, [pc, #132]	; (8006404 <sync_window+0xa4>)
 800637e:	589b      	ldr	r3, [r3, r2]
 8006380:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a20      	ldr	r2, [pc, #128]	; (8006408 <sync_window+0xa8>)
 8006386:	5c98      	ldrb	r0, [r3, r2]
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	2301      	movs	r3, #1
 800638e:	f7ff ff71 	bl	8006274 <disk_write>
 8006392:	1e03      	subs	r3, r0, #0
 8006394:	d003      	beq.n	800639e <sync_window+0x3e>
			res = FR_DISK_ERR;
 8006396:	193b      	adds	r3, r7, r4
 8006398:	2201      	movs	r2, #1
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	e029      	b.n	80063f2 <sync_window+0x92>
		} else {
			fs->wflag = 0;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a17      	ldr	r2, [pc, #92]	; (8006400 <sync_window+0xa0>)
 80063a2:	2100      	movs	r1, #0
 80063a4:	5499      	strb	r1, [r3, r2]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	2384      	movs	r3, #132	; 0x84
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	58d3      	ldr	r3, [r2, r3]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	1ad2      	subs	r2, r2, r3
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	2383      	movs	r3, #131	; 0x83
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	58cb      	ldr	r3, [r1, r3]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d219      	bcs.n	80063f2 <sync_window+0x92>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a12      	ldr	r2, [pc, #72]	; (800640c <sync_window+0xac>)
 80063c2:	5c9b      	ldrb	r3, [r3, r2]
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	e011      	b.n	80063ec <sync_window+0x8c>
					wsect += fs->fsize;
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	2383      	movs	r3, #131	; 0x83
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	58d3      	ldr	r3, [r2, r3]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	18d3      	adds	r3, r2, r3
 80063d4:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a0b      	ldr	r2, [pc, #44]	; (8006408 <sync_window+0xa8>)
 80063da:	5c98      	ldrb	r0, [r3, r2]
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	2301      	movs	r3, #1
 80063e2:	f7ff ff47 	bl	8006274 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d8ea      	bhi.n	80063c8 <sync_window+0x68>
				}
			}
		}
	}
	return res;
 80063f2:	230f      	movs	r3, #15
 80063f4:	18fb      	adds	r3, r7, r3
 80063f6:	781b      	ldrb	r3, [r3, #0]
}
 80063f8:	0018      	movs	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	b007      	add	sp, #28
 80063fe:	bd90      	pop	{r4, r7, pc}
 8006400:	00000404 	.word	0x00000404
 8006404:	0000042c 	.word	0x0000042c
 8006408:	00000401 	.word	0x00000401
 800640c:	00000403 	.word	0x00000403

08006410 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006410:	b5b0      	push	{r4, r5, r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800641a:	250f      	movs	r5, #15
 800641c:	197b      	adds	r3, r7, r5
 800641e:	2200      	movs	r2, #0
 8006420:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a15      	ldr	r2, [pc, #84]	; (800647c <move_window+0x6c>)
 8006426:	589b      	ldr	r3, [r3, r2]
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d01f      	beq.n	800646e <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800642e:	197c      	adds	r4, r7, r5
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	0018      	movs	r0, r3
 8006434:	f7ff ff94 	bl	8006360 <sync_window>
 8006438:	0003      	movs	r3, r0
 800643a:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800643c:	002c      	movs	r4, r5
 800643e:	193b      	adds	r3, r7, r4
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d113      	bne.n	800646e <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a0d      	ldr	r2, [pc, #52]	; (8006480 <move_window+0x70>)
 800644a:	5c98      	ldrb	r0, [r3, r2]
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	2301      	movs	r3, #1
 8006452:	f7ff fee7 	bl	8006224 <disk_read>
 8006456:	1e03      	subs	r3, r0, #0
 8006458:	d005      	beq.n	8006466 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800645a:	2301      	movs	r3, #1
 800645c:	425b      	negs	r3, r3
 800645e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006460:	193b      	adds	r3, r7, r4
 8006462:	2201      	movs	r2, #1
 8006464:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4904      	ldr	r1, [pc, #16]	; (800647c <move_window+0x6c>)
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	505a      	str	r2, [r3, r1]
		}
	}
	return res;
 800646e:	230f      	movs	r3, #15
 8006470:	18fb      	adds	r3, r7, r3
 8006472:	781b      	ldrb	r3, [r3, #0]
}
 8006474:	0018      	movs	r0, r3
 8006476:	46bd      	mov	sp, r7
 8006478:	b004      	add	sp, #16
 800647a:	bdb0      	pop	{r4, r5, r7, pc}
 800647c:	0000042c 	.word	0x0000042c
 8006480:	00000401 	.word	0x00000401

08006484 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006484:	b590      	push	{r4, r7, lr}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d905      	bls.n	80064a0 <get_fat+0x1c>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a78      	ldr	r2, [pc, #480]	; (8006678 <get_fat+0x1f4>)
 8006498:	589b      	ldr	r3, [r3, r2]
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d302      	bcc.n	80064a6 <get_fat+0x22>
		val = 1;	/* Internal error */
 80064a0:	2301      	movs	r3, #1
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	e0e2      	b.n	800666c <get_fat+0x1e8>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80064a6:	2301      	movs	r3, #1
 80064a8:	425b      	negs	r3, r3
 80064aa:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	2380      	movs	r3, #128	; 0x80
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	5cd3      	ldrb	r3, [r2, r3]
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d100      	bne.n	80064ba <get_fat+0x36>
 80064b8:	e095      	b.n	80065e6 <get_fat+0x162>
 80064ba:	dd00      	ble.n	80064be <get_fat+0x3a>
 80064bc:	e0cc      	b.n	8006658 <get_fat+0x1d4>
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d002      	beq.n	80064c8 <get_fat+0x44>
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d05e      	beq.n	8006584 <get_fat+0x100>
 80064c6:	e0c7      	b.n	8006658 <get_fat+0x1d4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	085b      	lsrs	r3, r3, #1
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	18d3      	adds	r3, r2, r3
 80064d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	2384      	movs	r3, #132	; 0x84
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	58d4      	ldr	r4, [r2, r3]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a66      	ldr	r2, [pc, #408]	; (800667c <get_fat+0x1f8>)
 80064e2:	5a9b      	ldrh	r3, [r3, r2]
 80064e4:	0019      	movs	r1, r3
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f7f9 fe18 	bl	800011c <__udivsi3>
 80064ec:	0003      	movs	r3, r0
 80064ee:	18e2      	adds	r2, r4, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	0011      	movs	r1, r2
 80064f4:	0018      	movs	r0, r3
 80064f6:	f7ff ff8b 	bl	8006410 <move_window>
 80064fa:	1e03      	subs	r3, r0, #0
 80064fc:	d000      	beq.n	8006500 <get_fat+0x7c>
 80064fe:	e0ae      	b.n	800665e <get_fat+0x1da>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	60fa      	str	r2, [r7, #12]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	495c      	ldr	r1, [pc, #368]	; (800667c <get_fat+0x1f8>)
 800650a:	5a52      	ldrh	r2, [r2, r1]
 800650c:	0011      	movs	r1, r2
 800650e:	0018      	movs	r0, r3
 8006510:	f7f9 fe8a 	bl	8000228 <__aeabi_uidivmod>
 8006514:	000b      	movs	r3, r1
 8006516:	001a      	movs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	5c9b      	ldrb	r3, [r3, r2]
 800651c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	2384      	movs	r3, #132	; 0x84
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	58d4      	ldr	r4, [r2, r3]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a54      	ldr	r2, [pc, #336]	; (800667c <get_fat+0x1f8>)
 800652a:	5a9b      	ldrh	r3, [r3, r2]
 800652c:	0019      	movs	r1, r3
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7f9 fdf4 	bl	800011c <__udivsi3>
 8006534:	0003      	movs	r3, r0
 8006536:	18e2      	adds	r2, r4, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	0011      	movs	r1, r2
 800653c:	0018      	movs	r0, r3
 800653e:	f7ff ff67 	bl	8006410 <move_window>
 8006542:	1e03      	subs	r3, r0, #0
 8006544:	d000      	beq.n	8006548 <get_fat+0xc4>
 8006546:	e08c      	b.n	8006662 <get_fat+0x1de>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a4c      	ldr	r2, [pc, #304]	; (800667c <get_fat+0x1f8>)
 800654c:	5a9b      	ldrh	r3, [r3, r2]
 800654e:	001a      	movs	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	0011      	movs	r1, r2
 8006554:	0018      	movs	r0, r3
 8006556:	f7f9 fe67 	bl	8000228 <__aeabi_uidivmod>
 800655a:	000b      	movs	r3, r1
 800655c:	001a      	movs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	5c9b      	ldrb	r3, [r3, r2]
 8006562:	021b      	lsls	r3, r3, #8
 8006564:	001a      	movs	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4313      	orrs	r3, r2
 800656a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2201      	movs	r2, #1
 8006570:	4013      	ands	r3, r2
 8006572:	d002      	beq.n	800657a <get_fat+0xf6>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	091b      	lsrs	r3, r3, #4
 8006578:	e002      	b.n	8006580 <get_fat+0xfc>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	051b      	lsls	r3, r3, #20
 800657e:	0d1b      	lsrs	r3, r3, #20
 8006580:	617b      	str	r3, [r7, #20]
			break;
 8006582:	e073      	b.n	800666c <get_fat+0x1e8>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	2384      	movs	r3, #132	; 0x84
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	58d4      	ldr	r4, [r2, r3]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a3b      	ldr	r2, [pc, #236]	; (800667c <get_fat+0x1f8>)
 8006590:	5a9b      	ldrh	r3, [r3, r2]
 8006592:	085b      	lsrs	r3, r3, #1
 8006594:	b29b      	uxth	r3, r3
 8006596:	0019      	movs	r1, r3
 8006598:	6838      	ldr	r0, [r7, #0]
 800659a:	f7f9 fdbf 	bl	800011c <__udivsi3>
 800659e:	0003      	movs	r3, r0
 80065a0:	18e2      	adds	r2, r4, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	0011      	movs	r1, r2
 80065a6:	0018      	movs	r0, r3
 80065a8:	f7ff ff32 	bl	8006410 <move_window>
 80065ac:	1e03      	subs	r3, r0, #0
 80065ae:	d15a      	bne.n	8006666 <get_fat+0x1e2>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	005a      	lsls	r2, r3, #1
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4931      	ldr	r1, [pc, #196]	; (800667c <get_fat+0x1f8>)
 80065b8:	5a5b      	ldrh	r3, [r3, r1]
 80065ba:	0019      	movs	r1, r3
 80065bc:	0010      	movs	r0, r2
 80065be:	f7f9 fe33 	bl	8000228 <__aeabi_uidivmod>
 80065c2:	000b      	movs	r3, r1
 80065c4:	001a      	movs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	189b      	adds	r3, r3, r2
 80065ca:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	3301      	adds	r3, #1
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	021b      	lsls	r3, r3, #8
 80065d4:	b21a      	sxth	r2, r3
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	b21b      	sxth	r3, r3
 80065dc:	4313      	orrs	r3, r2
 80065de:	b21b      	sxth	r3, r3
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	617b      	str	r3, [r7, #20]
			break;
 80065e4:	e042      	b.n	800666c <get_fat+0x1e8>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	2384      	movs	r3, #132	; 0x84
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	58d4      	ldr	r4, [r2, r3]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a22      	ldr	r2, [pc, #136]	; (800667c <get_fat+0x1f8>)
 80065f2:	5a9b      	ldrh	r3, [r3, r2]
 80065f4:	089b      	lsrs	r3, r3, #2
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	0019      	movs	r1, r3
 80065fa:	6838      	ldr	r0, [r7, #0]
 80065fc:	f7f9 fd8e 	bl	800011c <__udivsi3>
 8006600:	0003      	movs	r3, r0
 8006602:	18e2      	adds	r2, r4, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	0011      	movs	r1, r2
 8006608:	0018      	movs	r0, r3
 800660a:	f7ff ff01 	bl	8006410 <move_window>
 800660e:	1e03      	subs	r3, r0, #0
 8006610:	d12b      	bne.n	800666a <get_fat+0x1e6>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	009a      	lsls	r2, r3, #2
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4918      	ldr	r1, [pc, #96]	; (800667c <get_fat+0x1f8>)
 800661a:	5a5b      	ldrh	r3, [r3, r1]
 800661c:	0019      	movs	r1, r3
 800661e:	0010      	movs	r0, r2
 8006620:	f7f9 fe02 	bl	8000228 <__aeabi_uidivmod>
 8006624:	000b      	movs	r3, r1
 8006626:	001a      	movs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	189b      	adds	r3, r3, r2
 800662c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	3303      	adds	r3, #3
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	061a      	lsls	r2, r3, #24
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	3302      	adds	r3, #2
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	041b      	lsls	r3, r3, #16
 800663e:	4313      	orrs	r3, r2
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	3201      	adds	r2, #1
 8006644:	7812      	ldrb	r2, [r2, #0]
 8006646:	0212      	lsls	r2, r2, #8
 8006648:	4313      	orrs	r3, r2
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	7812      	ldrb	r2, [r2, #0]
 800664e:	4313      	orrs	r3, r2
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	091b      	lsrs	r3, r3, #4
 8006654:	617b      	str	r3, [r7, #20]
			break;
 8006656:	e009      	b.n	800666c <get_fat+0x1e8>

		default:
			val = 1;	/* Internal error */
 8006658:	2301      	movs	r3, #1
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e006      	b.n	800666c <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	e004      	b.n	800666c <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	e002      	b.n	800666c <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	e000      	b.n	800666c <get_fat+0x1e8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800666a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 800666c:	697b      	ldr	r3, [r7, #20]
}
 800666e:	0018      	movs	r0, r3
 8006670:	46bd      	mov	sp, r7
 8006672:	b007      	add	sp, #28
 8006674:	bd90      	pop	{r4, r7, pc}
 8006676:	46c0      	nop			; (mov r8, r8)
 8006678:	00000414 	.word	0x00000414
 800667c:	0000040a 	.word	0x0000040a

08006680 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006688:	2301      	movs	r3, #1
 800668a:	425b      	negs	r3, r3
 800668c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d031      	beq.n	80066fa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	e002      	b.n	80066a4 <get_ldnumber+0x24>
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	3301      	adds	r3, #1
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b1f      	cmp	r3, #31
 80066aa:	d903      	bls.n	80066b4 <get_ldnumber+0x34>
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b3a      	cmp	r3, #58	; 0x3a
 80066b2:	d1f4      	bne.n	800669e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b3a      	cmp	r3, #58	; 0x3a
 80066ba:	d11c      	bne.n	80066f6 <get_ldnumber+0x76>
			tp = *path;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	60fa      	str	r2, [r7, #12]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	3b30      	subs	r3, #48	; 0x30
 80066cc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b09      	cmp	r3, #9
 80066d2:	d80e      	bhi.n	80066f2 <get_ldnumber+0x72>
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d10a      	bne.n	80066f2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d107      	bne.n	80066f2 <get_ldnumber+0x72>
					vol = (int)i;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	3301      	adds	r3, #1
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	e002      	b.n	80066fc <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80066f6:	2300      	movs	r3, #0
 80066f8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80066fa:	693b      	ldr	r3, [r7, #16]
}
 80066fc:	0018      	movs	r0, r3
 80066fe:	46bd      	mov	sp, r7
 8006700:	b006      	add	sp, #24
 8006702:	bd80      	pop	{r7, pc}

08006704 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a30      	ldr	r2, [pc, #192]	; (80067d4 <check_fs+0xd0>)
 8006712:	2100      	movs	r1, #0
 8006714:	5499      	strb	r1, [r3, r2]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	492f      	ldr	r1, [pc, #188]	; (80067d8 <check_fs+0xd4>)
 800671a:	2201      	movs	r2, #1
 800671c:	4252      	negs	r2, r2
 800671e:	505a      	str	r2, [r3, r1]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	0011      	movs	r1, r2
 8006726:	0018      	movs	r0, r3
 8006728:	f7ff fe72 	bl	8006410 <move_window>
 800672c:	1e03      	subs	r3, r0, #0
 800672e:	d001      	beq.n	8006734 <check_fs+0x30>
		return 3;
 8006730:	2303      	movs	r3, #3
 8006732:	e04b      	b.n	80067cc <check_fs+0xc8>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	33ff      	adds	r3, #255	; 0xff
 8006738:	33ff      	adds	r3, #255	; 0xff
 800673a:	3301      	adds	r3, #1
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	b21a      	sxth	r2, r3
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	23ff      	movs	r3, #255	; 0xff
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	5ccb      	ldrb	r3, [r1, r3]
 800674a:	b21b      	sxth	r3, r3
 800674c:	4313      	orrs	r3, r2
 800674e:	b21b      	sxth	r3, r3
 8006750:	4a22      	ldr	r2, [pc, #136]	; (80067dc <check_fs+0xd8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d001      	beq.n	800675a <check_fs+0x56>
		return 2;
 8006756:	2302      	movs	r3, #2
 8006758:	e038      	b.n	80067cc <check_fs+0xc8>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3336      	adds	r3, #54	; 0x36
 800675e:	3303      	adds	r3, #3
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	061a      	lsls	r2, r3, #24
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3336      	adds	r3, #54	; 0x36
 8006768:	3302      	adds	r3, #2
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	041b      	lsls	r3, r3, #16
 800676e:	4313      	orrs	r3, r2
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	3236      	adds	r2, #54	; 0x36
 8006774:	3201      	adds	r2, #1
 8006776:	7812      	ldrb	r2, [r2, #0]
 8006778:	0212      	lsls	r2, r2, #8
 800677a:	4313      	orrs	r3, r2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	2136      	movs	r1, #54	; 0x36
 8006780:	5c52      	ldrb	r2, [r2, r1]
 8006782:	4313      	orrs	r3, r2
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	0a1b      	lsrs	r3, r3, #8
 8006788:	4a15      	ldr	r2, [pc, #84]	; (80067e0 <check_fs+0xdc>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d101      	bne.n	8006792 <check_fs+0x8e>
		return 0;
 800678e:	2300      	movs	r3, #0
 8006790:	e01c      	b.n	80067cc <check_fs+0xc8>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3352      	adds	r3, #82	; 0x52
 8006796:	3303      	adds	r3, #3
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	061a      	lsls	r2, r3, #24
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3352      	adds	r3, #82	; 0x52
 80067a0:	3302      	adds	r3, #2
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	041b      	lsls	r3, r3, #16
 80067a6:	4313      	orrs	r3, r2
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	3252      	adds	r2, #82	; 0x52
 80067ac:	3201      	adds	r2, #1
 80067ae:	7812      	ldrb	r2, [r2, #0]
 80067b0:	0212      	lsls	r2, r2, #8
 80067b2:	4313      	orrs	r3, r2
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	2152      	movs	r1, #82	; 0x52
 80067b8:	5c52      	ldrb	r2, [r2, r1]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	021b      	lsls	r3, r3, #8
 80067be:	0a1b      	lsrs	r3, r3, #8
 80067c0:	4a07      	ldr	r2, [pc, #28]	; (80067e0 <check_fs+0xdc>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d101      	bne.n	80067ca <check_fs+0xc6>
		return 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	e000      	b.n	80067cc <check_fs+0xc8>

	return 1;
 80067ca:	2301      	movs	r3, #1
}
 80067cc:	0018      	movs	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b002      	add	sp, #8
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	00000404 	.word	0x00000404
 80067d8:	0000042c 	.word	0x0000042c
 80067dc:	ffffaa55 	.word	0xffffaa55
 80067e0:	00544146 	.word	0x00544146

080067e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80067e4:	b5b0      	push	{r4, r5, r7, lr}
 80067e6:	b096      	sub	sp, #88	; 0x58
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	1dfb      	adds	r3, r7, #7
 80067f0:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	0018      	movs	r0, r3
 80067fc:	f7ff ff40 	bl	8006680 <get_ldnumber>
 8006800:	0003      	movs	r3, r0
 8006802:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006806:	2b00      	cmp	r3, #0
 8006808:	da01      	bge.n	800680e <find_volume+0x2a>
 800680a:	230b      	movs	r3, #11
 800680c:	e321      	b.n	8006e52 <find_volume+0x66e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800680e:	4bd0      	ldr	r3, [pc, #832]	; (8006b50 <find_volume+0x36c>)
 8006810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006812:	0092      	lsls	r2, r2, #2
 8006814:	58d3      	ldr	r3, [r2, r3]
 8006816:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <find_volume+0x3e>
 800681e:	230c      	movs	r3, #12
 8006820:	e317      	b.n	8006e52 <find_volume+0x66e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006826:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800682a:	2380      	movs	r3, #128	; 0x80
 800682c:	00db      	lsls	r3, r3, #3
 800682e:	5cd3      	ldrb	r3, [r2, r3]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01c      	beq.n	800686e <find_volume+0x8a>
		stat = disk_status(fs->drv);
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	4ac7      	ldr	r2, [pc, #796]	; (8006b54 <find_volume+0x370>)
 8006838:	5c9b      	ldrb	r3, [r3, r2]
 800683a:	2537      	movs	r5, #55	; 0x37
 800683c:	197c      	adds	r4, r7, r5
 800683e:	0018      	movs	r0, r3
 8006840:	f7ff fc9e 	bl	8006180 <disk_status>
 8006844:	0003      	movs	r3, r0
 8006846:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006848:	0029      	movs	r1, r5
 800684a:	187b      	adds	r3, r7, r1
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2201      	movs	r2, #1
 8006850:	4013      	ands	r3, r2
 8006852:	d10c      	bne.n	800686e <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006854:	1dfb      	adds	r3, r7, #7
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d006      	beq.n	800686a <find_volume+0x86>
 800685c:	187b      	adds	r3, r7, r1
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2204      	movs	r2, #4
 8006862:	4013      	ands	r3, r2
 8006864:	d001      	beq.n	800686a <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 8006866:	230a      	movs	r3, #10
 8006868:	e2f3      	b.n	8006e52 <find_volume+0x66e>
			return FR_OK;				/* The file system object is valid */
 800686a:	2300      	movs	r3, #0
 800686c:	e2f1      	b.n	8006e52 <find_volume+0x66e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800686e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006870:	2380      	movs	r3, #128	; 0x80
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	2100      	movs	r1, #0
 8006876:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687a:	b2d9      	uxtb	r1, r3
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	4ab5      	ldr	r2, [pc, #724]	; (8006b54 <find_volume+0x370>)
 8006880:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	4ab3      	ldr	r2, [pc, #716]	; (8006b54 <find_volume+0x370>)
 8006886:	5c9b      	ldrb	r3, [r3, r2]
 8006888:	2537      	movs	r5, #55	; 0x37
 800688a:	197c      	adds	r4, r7, r5
 800688c:	0018      	movs	r0, r3
 800688e:	f7ff fc99 	bl	80061c4 <disk_initialize>
 8006892:	0003      	movs	r3, r0
 8006894:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006896:	197b      	adds	r3, r7, r5
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2201      	movs	r2, #1
 800689c:	4013      	ands	r3, r2
 800689e:	d001      	beq.n	80068a4 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80068a0:	2303      	movs	r3, #3
 80068a2:	e2d6      	b.n	8006e52 <find_volume+0x66e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80068a4:	1dfb      	adds	r3, r7, #7
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d007      	beq.n	80068bc <find_volume+0xd8>
 80068ac:	2337      	movs	r3, #55	; 0x37
 80068ae:	18fb      	adds	r3, r7, r3
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2204      	movs	r2, #4
 80068b4:	4013      	ands	r3, r2
 80068b6:	d001      	beq.n	80068bc <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 80068b8:	230a      	movs	r3, #10
 80068ba:	e2ca      	b.n	8006e52 <find_volume+0x66e>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	4aa5      	ldr	r2, [pc, #660]	; (8006b54 <find_volume+0x370>)
 80068c0:	5c98      	ldrb	r0, [r3, r2]
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	4aa4      	ldr	r2, [pc, #656]	; (8006b58 <find_volume+0x374>)
 80068c6:	4694      	mov	ip, r2
 80068c8:	4463      	add	r3, ip
 80068ca:	001a      	movs	r2, r3
 80068cc:	2102      	movs	r1, #2
 80068ce:	f7ff fcf9 	bl	80062c4 <disk_ioctl>
 80068d2:	1e03      	subs	r3, r0, #0
 80068d4:	d10d      	bne.n	80068f2 <find_volume+0x10e>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80068d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d8:	4a9f      	ldr	r2, [pc, #636]	; (8006b58 <find_volume+0x374>)
 80068da:	5a9a      	ldrh	r2, [r3, r2]
 80068dc:	2380      	movs	r3, #128	; 0x80
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d306      	bcc.n	80068f2 <find_volume+0x10e>
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	4a9c      	ldr	r2, [pc, #624]	; (8006b58 <find_volume+0x374>)
 80068e8:	5a9a      	ldrh	r2, [r3, r2]
 80068ea:	2380      	movs	r3, #128	; 0x80
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d901      	bls.n	80068f6 <find_volume+0x112>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e2ad      	b.n	8006e52 <find_volume+0x66e>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80068fa:	2557      	movs	r5, #87	; 0x57
 80068fc:	197c      	adds	r4, r7, r5
 80068fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	0011      	movs	r1, r2
 8006904:	0018      	movs	r0, r3
 8006906:	f7ff fefd 	bl	8006704 <check_fs>
 800690a:	0003      	movs	r3, r0
 800690c:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800690e:	197b      	adds	r3, r7, r5
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d155      	bne.n	80069c2 <find_volume+0x1de>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006916:	2300      	movs	r3, #0
 8006918:	643b      	str	r3, [r7, #64]	; 0x40
 800691a:	e027      	b.n	800696c <find_volume+0x188>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800691c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800691e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	33bf      	adds	r3, #191	; 0xbf
 8006924:	33ff      	adds	r3, #255	; 0xff
 8006926:	18d3      	adds	r3, r2, r3
 8006928:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	3304      	adds	r3, #4
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d012      	beq.n	800695a <find_volume+0x176>
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	330b      	adds	r3, #11
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	061a      	lsls	r2, r3, #24
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	330a      	adds	r3, #10
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	041b      	lsls	r3, r3, #16
 8006944:	4313      	orrs	r3, r2
 8006946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006948:	3209      	adds	r2, #9
 800694a:	7812      	ldrb	r2, [r2, #0]
 800694c:	0212      	lsls	r2, r2, #8
 800694e:	4313      	orrs	r3, r2
 8006950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006952:	3208      	adds	r2, #8
 8006954:	7812      	ldrb	r2, [r2, #0]
 8006956:	4313      	orrs	r3, r2
 8006958:	e000      	b.n	800695c <find_volume+0x178>
 800695a:	2300      	movs	r3, #0
 800695c:	2214      	movs	r2, #20
 800695e:	18ba      	adds	r2, r7, r2
 8006960:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006962:	0089      	lsls	r1, r1, #2
 8006964:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006968:	3301      	adds	r3, #1
 800696a:	643b      	str	r3, [r7, #64]	; 0x40
 800696c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800696e:	2b03      	cmp	r3, #3
 8006970:	d9d4      	bls.n	800691c <find_volume+0x138>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006972:	2300      	movs	r3, #0
 8006974:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <find_volume+0x19e>
 800697c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697e:	3b01      	subs	r3, #1
 8006980:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006982:	2314      	movs	r3, #20
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006988:	0092      	lsls	r2, r2, #2
 800698a:	58d3      	ldr	r3, [r2, r3]
 800698c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800698e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006990:	2b00      	cmp	r3, #0
 8006992:	d008      	beq.n	80069a6 <find_volume+0x1c2>
 8006994:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	0011      	movs	r1, r2
 800699a:	0018      	movs	r0, r3
 800699c:	f7ff feb2 	bl	8006704 <check_fs>
 80069a0:	0003      	movs	r3, r0
 80069a2:	001a      	movs	r2, r3
 80069a4:	e000      	b.n	80069a8 <find_volume+0x1c4>
 80069a6:	2202      	movs	r2, #2
 80069a8:	2157      	movs	r1, #87	; 0x57
 80069aa:	187b      	adds	r3, r7, r1
 80069ac:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80069ae:	187b      	adds	r3, r7, r1
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d005      	beq.n	80069c2 <find_volume+0x1de>
 80069b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b8:	3301      	adds	r3, #1
 80069ba:	643b      	str	r3, [r7, #64]	; 0x40
 80069bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d9df      	bls.n	8006982 <find_volume+0x19e>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80069c2:	2357      	movs	r3, #87	; 0x57
 80069c4:	18fb      	adds	r3, r7, r3
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d101      	bne.n	80069d0 <find_volume+0x1ec>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e240      	b.n	8006e52 <find_volume+0x66e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80069d0:	2357      	movs	r3, #87	; 0x57
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <find_volume+0x1fa>
 80069da:	230d      	movs	r3, #13
 80069dc:	e239      	b.n	8006e52 <find_volume+0x66e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	7b1b      	ldrb	r3, [r3, #12]
 80069e2:	021b      	lsls	r3, r3, #8
 80069e4:	b21a      	sxth	r2, r3
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	7adb      	ldrb	r3, [r3, #11]
 80069ea:	b21b      	sxth	r3, r3
 80069ec:	4313      	orrs	r3, r2
 80069ee:	b21a      	sxth	r2, r3
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	4959      	ldr	r1, [pc, #356]	; (8006b58 <find_volume+0x374>)
 80069f4:	5a5b      	ldrh	r3, [r3, r1]
 80069f6:	b21b      	sxth	r3, r3
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d001      	beq.n	8006a00 <find_volume+0x21c>
		return FR_NO_FILESYSTEM;
 80069fc:	230d      	movs	r3, #13
 80069fe:	e228      	b.n	8006e52 <find_volume+0x66e>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	7ddb      	ldrb	r3, [r3, #23]
 8006a04:	021b      	lsls	r3, r3, #8
 8006a06:	b21a      	sxth	r2, r3
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	7d9b      	ldrb	r3, [r3, #22]
 8006a0c:	b21b      	sxth	r3, r3
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	b21b      	sxth	r3, r3
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d112      	bne.n	8006a42 <find_volume+0x25e>
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	2227      	movs	r2, #39	; 0x27
 8006a20:	5c9b      	ldrb	r3, [r3, r2]
 8006a22:	061a      	lsls	r2, r3, #24
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	2126      	movs	r1, #38	; 0x26
 8006a28:	5c5b      	ldrb	r3, [r3, r1]
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a30:	2125      	movs	r1, #37	; 0x25
 8006a32:	5c52      	ldrb	r2, [r2, r1]
 8006a34:	0212      	lsls	r2, r2, #8
 8006a36:	4313      	orrs	r3, r2
 8006a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a3a:	2124      	movs	r1, #36	; 0x24
 8006a3c:	5c52      	ldrb	r2, [r2, r1]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a44:	2383      	movs	r3, #131	; 0x83
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006a4a:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	7c19      	ldrb	r1, [r3, #16]
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	4a42      	ldr	r2, [pc, #264]	; (8006b5c <find_volume+0x378>)
 8006a54:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a58:	4a40      	ldr	r2, [pc, #256]	; (8006b5c <find_volume+0x378>)
 8006a5a:	5c9b      	ldrb	r3, [r3, r2]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d006      	beq.n	8006a6e <find_volume+0x28a>
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	4a3e      	ldr	r2, [pc, #248]	; (8006b5c <find_volume+0x378>)
 8006a64:	5c9b      	ldrb	r3, [r3, r2]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d001      	beq.n	8006a6e <find_volume+0x28a>
		return FR_NO_FILESYSTEM;
 8006a6a:	230d      	movs	r3, #13
 8006a6c:	e1f1      	b.n	8006e52 <find_volume+0x66e>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	4a3a      	ldr	r2, [pc, #232]	; (8006b5c <find_volume+0x378>)
 8006a72:	5c9b      	ldrb	r3, [r3, r2]
 8006a74:	001a      	movs	r2, r3
 8006a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a78:	4353      	muls	r3, r2
 8006a7a:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	7b59      	ldrb	r1, [r3, #13]
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	4a37      	ldr	r2, [pc, #220]	; (8006b60 <find_volume+0x37c>)
 8006a84:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a88:	4a35      	ldr	r2, [pc, #212]	; (8006b60 <find_volume+0x37c>)
 8006a8a:	5c9b      	ldrb	r3, [r3, r2]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d009      	beq.n	8006aa4 <find_volume+0x2c0>
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	4a33      	ldr	r2, [pc, #204]	; (8006b60 <find_volume+0x37c>)
 8006a94:	5c9b      	ldrb	r3, [r3, r2]
 8006a96:	0019      	movs	r1, r3
 8006a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9a:	4a31      	ldr	r2, [pc, #196]	; (8006b60 <find_volume+0x37c>)
 8006a9c:	5c9b      	ldrb	r3, [r3, r2]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	400b      	ands	r3, r1
 8006aa2:	d001      	beq.n	8006aa8 <find_volume+0x2c4>
		return FR_NO_FILESYSTEM;
 8006aa4:	230d      	movs	r3, #13
 8006aa6:	e1d4      	b.n	8006e52 <find_volume+0x66e>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aaa:	7c9b      	ldrb	r3, [r3, #18]
 8006aac:	021b      	lsls	r3, r3, #8
 8006aae:	b21a      	sxth	r2, r3
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	7c5b      	ldrb	r3, [r3, #17]
 8006ab4:	b21b      	sxth	r3, r3
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	b21b      	sxth	r3, r3
 8006aba:	b299      	uxth	r1, r3
 8006abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006abe:	2381      	movs	r3, #129	; 0x81
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ac6:	2381      	movs	r3, #129	; 0x81
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	5ad2      	ldrh	r2, [r2, r3]
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	4922      	ldr	r1, [pc, #136]	; (8006b58 <find_volume+0x374>)
 8006ad0:	5a5b      	ldrh	r3, [r3, r1]
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	0019      	movs	r1, r3
 8006ad8:	0010      	movs	r0, r2
 8006ada:	f7f9 fba5 	bl	8000228 <__aeabi_uidivmod>
 8006ade:	000b      	movs	r3, r1
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <find_volume+0x306>
		return FR_NO_FILESYSTEM;
 8006ae6:	230d      	movs	r3, #13
 8006ae8:	e1b3      	b.n	8006e52 <find_volume+0x66e>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aec:	7d1b      	ldrb	r3, [r3, #20]
 8006aee:	021b      	lsls	r3, r3, #8
 8006af0:	b21a      	sxth	r2, r3
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	7cdb      	ldrb	r3, [r3, #19]
 8006af6:	b21b      	sxth	r3, r3
 8006af8:	4313      	orrs	r3, r2
 8006afa:	b21b      	sxth	r3, r3
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d112      	bne.n	8006b2c <find_volume+0x348>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	2223      	movs	r2, #35	; 0x23
 8006b0a:	5c9b      	ldrb	r3, [r3, r2]
 8006b0c:	061a      	lsls	r2, r3, #24
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	2122      	movs	r1, #34	; 0x22
 8006b12:	5c5b      	ldrb	r3, [r3, r1]
 8006b14:	041b      	lsls	r3, r3, #16
 8006b16:	4313      	orrs	r3, r2
 8006b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b1a:	2121      	movs	r1, #33	; 0x21
 8006b1c:	5c52      	ldrb	r2, [r2, r1]
 8006b1e:	0212      	lsls	r2, r2, #8
 8006b20:	4313      	orrs	r3, r2
 8006b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b24:	2120      	movs	r1, #32
 8006b26:	5c52      	ldrb	r2, [r2, r1]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2e:	7bdb      	ldrb	r3, [r3, #15]
 8006b30:	021b      	lsls	r3, r3, #8
 8006b32:	b21a      	sxth	r2, r3
 8006b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b36:	7b9b      	ldrb	r3, [r3, #14]
 8006b38:	b21b      	sxth	r3, r3
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	b21a      	sxth	r2, r3
 8006b3e:	212e      	movs	r1, #46	; 0x2e
 8006b40:	187b      	adds	r3, r7, r1
 8006b42:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006b44:	187b      	adds	r3, r7, r1
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10b      	bne.n	8006b64 <find_volume+0x380>
 8006b4c:	230d      	movs	r3, #13
 8006b4e:	e180      	b.n	8006e52 <find_volume+0x66e>
 8006b50:	20000670 	.word	0x20000670
 8006b54:	00000401 	.word	0x00000401
 8006b58:	0000040a 	.word	0x0000040a
 8006b5c:	00000403 	.word	0x00000403
 8006b60:	00000402 	.word	0x00000402

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006b64:	232e      	movs	r3, #46	; 0x2e
 8006b66:	18fb      	adds	r3, r7, r3
 8006b68:	881a      	ldrh	r2, [r3, #0]
 8006b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6c:	18d4      	adds	r4, r2, r3
 8006b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b70:	2381      	movs	r3, #129	; 0x81
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	5ad2      	ldrh	r2, [r2, r3]
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	49b8      	ldr	r1, [pc, #736]	; (8006e5c <find_volume+0x678>)
 8006b7a:	5a5b      	ldrh	r3, [r3, r1]
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	0019      	movs	r1, r3
 8006b82:	0010      	movs	r0, r2
 8006b84:	f7f9 faca 	bl	800011c <__udivsi3>
 8006b88:	0003      	movs	r3, r0
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	18e3      	adds	r3, r4, r3
 8006b8e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d201      	bcs.n	8006b9c <find_volume+0x3b8>
 8006b98:	230d      	movs	r3, #13
 8006b9a:	e15a      	b.n	8006e52 <find_volume+0x66e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	1ad2      	subs	r2, r2, r3
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	49ae      	ldr	r1, [pc, #696]	; (8006e60 <find_volume+0x67c>)
 8006ba6:	5c5b      	ldrb	r3, [r3, r1]
 8006ba8:	0019      	movs	r1, r3
 8006baa:	0010      	movs	r0, r2
 8006bac:	f7f9 fab6 	bl	800011c <__udivsi3>
 8006bb0:	0003      	movs	r3, r0
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <find_volume+0x3da>
 8006bba:	230d      	movs	r3, #13
 8006bbc:	e149      	b.n	8006e52 <find_volume+0x66e>
	fmt = FS_FAT12;
 8006bbe:	2157      	movs	r1, #87	; 0x57
 8006bc0:	187b      	adds	r3, r7, r1
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	4aa6      	ldr	r2, [pc, #664]	; (8006e64 <find_volume+0x680>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d902      	bls.n	8006bd4 <find_volume+0x3f0>
 8006bce:	187b      	adds	r3, r7, r1
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	4aa4      	ldr	r2, [pc, #656]	; (8006e68 <find_volume+0x684>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d903      	bls.n	8006be4 <find_volume+0x400>
 8006bdc:	2357      	movs	r3, #87	; 0x57
 8006bde:	18fb      	adds	r3, r7, r3
 8006be0:	2203      	movs	r2, #3
 8006be2:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	1c9a      	adds	r2, r3, #2
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	49a0      	ldr	r1, [pc, #640]	; (8006e6c <find_volume+0x688>)
 8006bec:	505a      	str	r2, [r3, r1]
	fs->volbase = bsect;								/* Volume start sector */
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	499f      	ldr	r1, [pc, #636]	; (8006e70 <find_volume+0x68c>)
 8006bf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bf4:	505a      	str	r2, [r3, r1]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006bf6:	232e      	movs	r3, #46	; 0x2e
 8006bf8:	18fb      	adds	r3, r7, r3
 8006bfa:	881a      	ldrh	r2, [r3, #0]
 8006bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bfe:	18d1      	adds	r1, r2, r3
 8006c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c02:	2384      	movs	r3, #132	; 0x84
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 8006c08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	18d1      	adds	r1, r2, r3
 8006c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c10:	2385      	movs	r3, #133	; 0x85
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 8006c16:	2357      	movs	r3, #87	; 0x57
 8006c18:	18fb      	adds	r3, r7, r3
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d122      	bne.n	8006c66 <find_volume+0x482>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c22:	2381      	movs	r3, #129	; 0x81
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	5ad3      	ldrh	r3, [r2, r3]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <find_volume+0x44c>
 8006c2c:	230d      	movs	r3, #13
 8006c2e:	e110      	b.n	8006e52 <find_volume+0x66e>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	222f      	movs	r2, #47	; 0x2f
 8006c34:	5c9b      	ldrb	r3, [r3, r2]
 8006c36:	061a      	lsls	r2, r3, #24
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	212e      	movs	r1, #46	; 0x2e
 8006c3c:	5c5b      	ldrb	r3, [r3, r1]
 8006c3e:	041b      	lsls	r3, r3, #16
 8006c40:	4313      	orrs	r3, r2
 8006c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c44:	212d      	movs	r1, #45	; 0x2d
 8006c46:	5c52      	ldrb	r2, [r2, r1]
 8006c48:	0212      	lsls	r2, r2, #8
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c4e:	212c      	movs	r1, #44	; 0x2c
 8006c50:	5c52      	ldrb	r2, [r2, r1]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	4987      	ldr	r1, [pc, #540]	; (8006e74 <find_volume+0x690>)
 8006c58:	505a      	str	r2, [r3, r1]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	4a83      	ldr	r2, [pc, #524]	; (8006e6c <find_volume+0x688>)
 8006c5e:	589b      	ldr	r3, [r3, r2]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	647b      	str	r3, [r7, #68]	; 0x44
 8006c64:	e028      	b.n	8006cb8 <find_volume+0x4d4>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c68:	2381      	movs	r3, #129	; 0x81
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	5ad3      	ldrh	r3, [r2, r3]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <find_volume+0x492>
 8006c72:	230d      	movs	r3, #13
 8006c74:	e0ed      	b.n	8006e52 <find_volume+0x66e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006c76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c78:	2384      	movs	r3, #132	; 0x84
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	58d2      	ldr	r2, [r2, r3]
 8006c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c80:	18d2      	adds	r2, r2, r3
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	497b      	ldr	r1, [pc, #492]	; (8006e74 <find_volume+0x690>)
 8006c86:	505a      	str	r2, [r3, r1]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006c88:	2357      	movs	r3, #87	; 0x57
 8006c8a:	18fb      	adds	r3, r7, r3
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d104      	bne.n	8006c9c <find_volume+0x4b8>
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	4a75      	ldr	r2, [pc, #468]	; (8006e6c <find_volume+0x688>)
 8006c96:	589b      	ldr	r3, [r3, r2]
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	e00c      	b.n	8006cb6 <find_volume+0x4d2>
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	4a73      	ldr	r2, [pc, #460]	; (8006e6c <find_volume+0x688>)
 8006ca0:	589a      	ldr	r2, [r3, r2]
 8006ca2:	0013      	movs	r3, r2
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	189b      	adds	r3, r3, r2
 8006ca8:	085a      	lsrs	r2, r3, #1
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	496f      	ldr	r1, [pc, #444]	; (8006e6c <find_volume+0x688>)
 8006cae:	585b      	ldr	r3, [r3, r1]
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	400b      	ands	r3, r1
 8006cb4:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006cb6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cba:	2383      	movs	r3, #131	; 0x83
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	58d4      	ldr	r4, [r2, r3]
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	4a66      	ldr	r2, [pc, #408]	; (8006e5c <find_volume+0x678>)
 8006cc4:	5a9b      	ldrh	r3, [r3, r2]
 8006cc6:	001a      	movs	r2, r3
 8006cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cca:	18d3      	adds	r3, r2, r3
 8006ccc:	1e5a      	subs	r2, r3, #1
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	4962      	ldr	r1, [pc, #392]	; (8006e5c <find_volume+0x678>)
 8006cd2:	5a5b      	ldrh	r3, [r3, r1]
 8006cd4:	0019      	movs	r1, r3
 8006cd6:	0010      	movs	r0, r2
 8006cd8:	f7f9 fa20 	bl	800011c <__udivsi3>
 8006cdc:	0003      	movs	r3, r0
 8006cde:	429c      	cmp	r4, r3
 8006ce0:	d201      	bcs.n	8006ce6 <find_volume+0x502>
		return FR_NO_FILESYSTEM;
 8006ce2:	230d      	movs	r3, #13
 8006ce4:	e0b5      	b.n	8006e52 <find_volume+0x66e>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006ce6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ce8:	2382      	movs	r3, #130	; 0x82
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	2101      	movs	r1, #1
 8006cee:	4249      	negs	r1, r1
 8006cf0:	50d1      	str	r1, [r2, r3]
 8006cf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cf4:	2382      	movs	r3, #130	; 0x82
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	58d2      	ldr	r2, [r2, r3]
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfc:	495e      	ldr	r1, [pc, #376]	; (8006e78 <find_volume+0x694>)
 8006cfe:	505a      	str	r2, [r3, r1]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d02:	4a5e      	ldr	r2, [pc, #376]	; (8006e7c <find_volume+0x698>)
 8006d04:	2180      	movs	r1, #128	; 0x80
 8006d06:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006d08:	2357      	movs	r3, #87	; 0x57
 8006d0a:	18fb      	adds	r3, r7, r3
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d000      	beq.n	8006d14 <find_volume+0x530>
 8006d12:	e087      	b.n	8006e24 <find_volume+0x640>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d16:	2231      	movs	r2, #49	; 0x31
 8006d18:	5c9b      	ldrb	r3, [r3, r2]
 8006d1a:	021b      	lsls	r3, r3, #8
 8006d1c:	b21a      	sxth	r2, r3
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d20:	2130      	movs	r1, #48	; 0x30
 8006d22:	5c5b      	ldrb	r3, [r3, r1]
 8006d24:	b21b      	sxth	r3, r3
 8006d26:	4313      	orrs	r3, r2
 8006d28:	b21b      	sxth	r3, r3
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d000      	beq.n	8006d30 <find_volume+0x54c>
 8006d2e:	e079      	b.n	8006e24 <find_volume+0x640>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	0011      	movs	r1, r2
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f7ff fb69 	bl	8006410 <move_window>
 8006d3e:	1e03      	subs	r3, r0, #0
 8006d40:	d170      	bne.n	8006e24 <find_volume+0x640>
	{
		fs->fsi_flag = 0;
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	4a4d      	ldr	r2, [pc, #308]	; (8006e7c <find_volume+0x698>)
 8006d46:	2100      	movs	r1, #0
 8006d48:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	4a4c      	ldr	r2, [pc, #304]	; (8006e80 <find_volume+0x69c>)
 8006d4e:	5c9b      	ldrb	r3, [r3, r2]
 8006d50:	021b      	lsls	r3, r3, #8
 8006d52:	b21a      	sxth	r2, r3
 8006d54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d56:	23ff      	movs	r3, #255	; 0xff
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	5ccb      	ldrb	r3, [r1, r3]
 8006d5c:	b21b      	sxth	r3, r3
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	b21b      	sxth	r3, r3
 8006d62:	4a48      	ldr	r2, [pc, #288]	; (8006e84 <find_volume+0x6a0>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d15d      	bne.n	8006e24 <find_volume+0x640>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	78db      	ldrb	r3, [r3, #3]
 8006d6c:	061a      	lsls	r2, r3, #24
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	789b      	ldrb	r3, [r3, #2]
 8006d72:	041b      	lsls	r3, r3, #16
 8006d74:	4313      	orrs	r3, r2
 8006d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d78:	7852      	ldrb	r2, [r2, #1]
 8006d7a:	0212      	lsls	r2, r2, #8
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d80:	7812      	ldrb	r2, [r2, #0]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	4a40      	ldr	r2, [pc, #256]	; (8006e88 <find_volume+0x6a4>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d14c      	bne.n	8006e24 <find_volume+0x640>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006d8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d8c:	23e8      	movs	r3, #232	; 0xe8
 8006d8e:	33ff      	adds	r3, #255	; 0xff
 8006d90:	5cd3      	ldrb	r3, [r2, r3]
 8006d92:	061a      	lsls	r2, r3, #24
 8006d94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d96:	23f3      	movs	r3, #243	; 0xf3
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	5ccb      	ldrb	r3, [r1, r3]
 8006d9c:	041b      	lsls	r3, r3, #16
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006da2:	22e6      	movs	r2, #230	; 0xe6
 8006da4:	32ff      	adds	r2, #255	; 0xff
 8006da6:	5c8a      	ldrb	r2, [r1, r2]
 8006da8:	0212      	lsls	r2, r2, #8
 8006daa:	4313      	orrs	r3, r2
 8006dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dae:	22f2      	movs	r2, #242	; 0xf2
 8006db0:	0052      	lsls	r2, r2, #1
 8006db2:	5c8a      	ldrb	r2, [r1, r2]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	4a35      	ldr	r2, [pc, #212]	; (8006e8c <find_volume+0x6a8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d133      	bne.n	8006e24 <find_volume+0x640>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dbe:	23ec      	movs	r3, #236	; 0xec
 8006dc0:	33ff      	adds	r3, #255	; 0xff
 8006dc2:	5cd3      	ldrb	r3, [r2, r3]
 8006dc4:	061a      	lsls	r2, r3, #24
 8006dc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dc8:	23f5      	movs	r3, #245	; 0xf5
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	5ccb      	ldrb	r3, [r1, r3]
 8006dce:	041b      	lsls	r3, r3, #16
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dd4:	22ea      	movs	r2, #234	; 0xea
 8006dd6:	32ff      	adds	r2, #255	; 0xff
 8006dd8:	5c8a      	ldrb	r2, [r1, r2]
 8006dda:	0212      	lsls	r2, r2, #8
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006de0:	22f4      	movs	r2, #244	; 0xf4
 8006de2:	0052      	lsls	r2, r2, #1
 8006de4:	5c8a      	ldrb	r2, [r1, r2]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	0019      	movs	r1, r3
 8006dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dec:	2382      	movs	r3, #130	; 0x82
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006df4:	23f0      	movs	r3, #240	; 0xf0
 8006df6:	33ff      	adds	r3, #255	; 0xff
 8006df8:	5cd3      	ldrb	r3, [r2, r3]
 8006dfa:	061a      	lsls	r2, r3, #24
 8006dfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dfe:	23f7      	movs	r3, #247	; 0xf7
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	5ccb      	ldrb	r3, [r1, r3]
 8006e04:	041b      	lsls	r3, r3, #16
 8006e06:	4313      	orrs	r3, r2
 8006e08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e0a:	22ee      	movs	r2, #238	; 0xee
 8006e0c:	32ff      	adds	r2, #255	; 0xff
 8006e0e:	5c8a      	ldrb	r2, [r1, r2]
 8006e10:	0212      	lsls	r2, r2, #8
 8006e12:	4313      	orrs	r3, r2
 8006e14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e16:	22f6      	movs	r2, #246	; 0xf6
 8006e18:	0052      	lsls	r2, r2, #1
 8006e1a:	5c8a      	ldrb	r2, [r1, r2]
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	4915      	ldr	r1, [pc, #84]	; (8006e78 <find_volume+0x694>)
 8006e22:	505a      	str	r2, [r3, r1]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e26:	2357      	movs	r3, #87	; 0x57
 8006e28:	18f9      	adds	r1, r7, r3
 8006e2a:	2380      	movs	r3, #128	; 0x80
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	7809      	ldrb	r1, [r1, #0]
 8006e30:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 8006e32:	4b17      	ldr	r3, [pc, #92]	; (8006e90 <find_volume+0x6ac>)
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	3301      	adds	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	4b15      	ldr	r3, [pc, #84]	; (8006e90 <find_volume+0x6ac>)
 8006e3c:	801a      	strh	r2, [r3, #0]
 8006e3e:	4b14      	ldr	r3, [pc, #80]	; (8006e90 <find_volume+0x6ac>)
 8006e40:	8819      	ldrh	r1, [r3, #0]
 8006e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e44:	4a13      	ldr	r2, [pc, #76]	; (8006e94 <find_volume+0x6b0>)
 8006e46:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f7ff fa62 	bl	8006314 <clear_lock>
#endif

	return FR_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	0018      	movs	r0, r3
 8006e54:	46bd      	mov	sp, r7
 8006e56:	b016      	add	sp, #88	; 0x58
 8006e58:	bdb0      	pop	{r4, r5, r7, pc}
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	0000040a 	.word	0x0000040a
 8006e60:	00000402 	.word	0x00000402
 8006e64:	00000ff5 	.word	0x00000ff5
 8006e68:	0000fff5 	.word	0x0000fff5
 8006e6c:	00000414 	.word	0x00000414
 8006e70:	0000041c 	.word	0x0000041c
 8006e74:	00000424 	.word	0x00000424
 8006e78:	0000040c 	.word	0x0000040c
 8006e7c:	00000405 	.word	0x00000405
 8006e80:	000001ff 	.word	0x000001ff
 8006e84:	ffffaa55 	.word	0xffffaa55
 8006e88:	41615252 	.word	0x41615252
 8006e8c:	61417272 	.word	0x61417272
 8006e90:	20000674 	.word	0x20000674
 8006e94:	00000406 	.word	0x00000406

08006e98 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006e98:	b5b0      	push	{r4, r5, r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	1dfb      	adds	r3, r7, #7
 8006ea4:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006eaa:	2310      	movs	r3, #16
 8006eac:	18fb      	adds	r3, r7, r3
 8006eae:	0018      	movs	r0, r3
 8006eb0:	f7ff fbe6 	bl	8006680 <get_ldnumber>
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	da01      	bge.n	8006ec2 <f_mount+0x2a>
 8006ebe:	230b      	movs	r3, #11
 8006ec0:	e034      	b.n	8006f2c <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006ec2:	4b1c      	ldr	r3, [pc, #112]	; (8006f34 <f_mount+0x9c>)
 8006ec4:	69fa      	ldr	r2, [r7, #28]
 8006ec6:	0092      	lsls	r2, r2, #2
 8006ec8:	58d3      	ldr	r3, [r2, r3]
 8006eca:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d008      	beq.n	8006ee4 <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f7ff fa1d 	bl	8006314 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	2380      	movs	r3, #128	; 0x80
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	2380      	movs	r3, #128	; 0x80
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006ef4:	68f9      	ldr	r1, [r7, #12]
 8006ef6:	4b0f      	ldr	r3, [pc, #60]	; (8006f34 <f_mount+0x9c>)
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	0092      	lsls	r2, r2, #2
 8006efc:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <f_mount+0x74>
 8006f04:	1dfb      	adds	r3, r7, #7
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d001      	beq.n	8006f10 <f_mount+0x78>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e00d      	b.n	8006f2c <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8006f10:	2517      	movs	r5, #23
 8006f12:	197c      	adds	r4, r7, r5
 8006f14:	2308      	movs	r3, #8
 8006f16:	18f9      	adds	r1, r7, r3
 8006f18:	230c      	movs	r3, #12
 8006f1a:	18fb      	adds	r3, r7, r3
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	0018      	movs	r0, r3
 8006f20:	f7ff fc60 	bl	80067e4 <find_volume>
 8006f24:	0003      	movs	r3, r0
 8006f26:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8006f28:	197b      	adds	r3, r7, r5
 8006f2a:	781b      	ldrb	r3, [r3, #0]
}
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b008      	add	sp, #32
 8006f32:	bdb0      	pop	{r4, r5, r7, pc}
 8006f34:	20000670 	.word	0x20000670

08006f38 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006f38:	b5b0      	push	{r4, r5, r7, lr}
 8006f3a:	b08e      	sub	sp, #56	; 0x38
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006f44:	2537      	movs	r5, #55	; 0x37
 8006f46:	197c      	adds	r4, r7, r5
 8006f48:	230c      	movs	r3, #12
 8006f4a:	18f9      	adds	r1, r7, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	0018      	movs	r0, r3
 8006f52:	f7ff fc47 	bl	80067e4 <find_volume>
 8006f56:	0003      	movs	r3, r0
 8006f58:	7023      	strb	r3, [r4, #0]
	fs = *fatfs;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8006f60:	197b      	adds	r3, r7, r5
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d000      	beq.n	8006f6a <f_getfree+0x32>
 8006f68:	e0be      	b.n	80070e8 <f_getfree+0x1b0>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	2382      	movs	r3, #130	; 0x82
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	58d2      	ldr	r2, [r2, r3]
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	4960      	ldr	r1, [pc, #384]	; (80070f8 <f_getfree+0x1c0>)
 8006f76:	585b      	ldr	r3, [r3, r1]
 8006f78:	3b02      	subs	r3, #2
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d806      	bhi.n	8006f8c <f_getfree+0x54>
			*nclst = fs->free_clust;
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	2382      	movs	r3, #130	; 0x82
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	58d2      	ldr	r2, [r2, r3]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e0ad      	b.n	80070e8 <f_getfree+0x1b0>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8006f8c:	201b      	movs	r0, #27
 8006f8e:	183b      	adds	r3, r7, r0
 8006f90:	69f9      	ldr	r1, [r7, #28]
 8006f92:	2280      	movs	r2, #128	; 0x80
 8006f94:	00d2      	lsls	r2, r2, #3
 8006f96:	5c8a      	ldrb	r2, [r1, r2]
 8006f98:	701a      	strb	r2, [r3, #0]
			n = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8006f9e:	183b      	adds	r3, r7, r0
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d129      	bne.n	8006ffa <f_getfree+0xc2>
				clst = 2;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8006faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	0011      	movs	r1, r2
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	f7ff fa67 	bl	8006484 <get_fat>
 8006fb6:	0003      	movs	r3, r0
 8006fb8:	617b      	str	r3, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	d104      	bne.n	8006fca <f_getfree+0x92>
 8006fc0:	2337      	movs	r3, #55	; 0x37
 8006fc2:	18fb      	adds	r3, r7, r3
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	701a      	strb	r2, [r3, #0]
 8006fc8:	e07d      	b.n	80070c6 <f_getfree+0x18e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d104      	bne.n	8006fda <f_getfree+0xa2>
 8006fd0:	2337      	movs	r3, #55	; 0x37
 8006fd2:	18fb      	adds	r3, r7, r3
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e075      	b.n	80070c6 <f_getfree+0x18e>
					if (stat == 0) n++;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d102      	bne.n	8006fe6 <f_getfree+0xae>
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	3301      	adds	r3, #1
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	4a42      	ldr	r2, [pc, #264]	; (80070f8 <f_getfree+0x1c0>)
 8006ff0:	589b      	ldr	r3, [r3, r2]
 8006ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d3d8      	bcc.n	8006faa <f_getfree+0x72>
 8006ff8:	e065      	b.n	80070c6 <f_getfree+0x18e>
			} else {
				clst = fs->n_fatent;
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	4a3e      	ldr	r2, [pc, #248]	; (80070f8 <f_getfree+0x1c0>)
 8006ffe:	589b      	ldr	r3, [r3, r2]
 8007000:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	2384      	movs	r3, #132	; 0x84
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	58d3      	ldr	r3, [r2, r3]
 800700a:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
 8007010:	2300      	movs	r3, #0
 8007012:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d115      	bne.n	8007046 <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007020:	2537      	movs	r5, #55	; 0x37
 8007022:	197c      	adds	r4, r7, r5
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	0019      	movs	r1, r3
 8007028:	0010      	movs	r0, r2
 800702a:	f7ff f9f1 	bl	8006410 <move_window>
 800702e:	0003      	movs	r3, r0
 8007030:	7023      	strb	r3, [r4, #0]
						if (res != FR_OK) break;
 8007032:	197b      	adds	r3, r7, r5
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d144      	bne.n	80070c4 <f_getfree+0x18c>
						p = fs->win.d8;
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	4a2e      	ldr	r2, [pc, #184]	; (80070fc <f_getfree+0x1c4>)
 8007042:	5a9b      	ldrh	r3, [r3, r2]
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8007046:	231b      	movs	r3, #27
 8007048:	18fb      	adds	r3, r7, r3
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b02      	cmp	r3, #2
 800704e:	d115      	bne.n	800707c <f_getfree+0x144>
						if (LD_WORD(p) == 0) n++;
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	3301      	adds	r3, #1
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	b21a      	sxth	r2, r3
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	b21b      	sxth	r3, r3
 8007060:	4313      	orrs	r3, r2
 8007062:	b21b      	sxth	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d102      	bne.n	800706e <f_getfree+0x136>
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	3301      	adds	r3, #1
 800706c:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	3302      	adds	r3, #2
 8007072:	623b      	str	r3, [r7, #32]
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	3b02      	subs	r3, #2
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
 800707a:	e01c      	b.n	80070b6 <f_getfree+0x17e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	3303      	adds	r3, #3
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	061a      	lsls	r2, r3, #24
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	3302      	adds	r3, #2
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	041b      	lsls	r3, r3, #16
 800708c:	4313      	orrs	r3, r2
 800708e:	6a3a      	ldr	r2, [r7, #32]
 8007090:	3201      	adds	r2, #1
 8007092:	7812      	ldrb	r2, [r2, #0]
 8007094:	0212      	lsls	r2, r2, #8
 8007096:	4313      	orrs	r3, r2
 8007098:	6a3a      	ldr	r2, [r7, #32]
 800709a:	7812      	ldrb	r2, [r2, #0]
 800709c:	4313      	orrs	r3, r2
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	091b      	lsrs	r3, r3, #4
 80070a2:	d102      	bne.n	80070aa <f_getfree+0x172>
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	3301      	adds	r3, #1
 80070a8:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	3304      	adds	r3, #4
 80070ae:	623b      	str	r3, [r7, #32]
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	3b04      	subs	r3, #4
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	3b01      	subs	r3, #1
 80070ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1a8      	bne.n	8007014 <f_getfree+0xdc>
 80070c2:	e000      	b.n	80070c6 <f_getfree+0x18e>
						if (res != FR_OK) break;
 80070c4:	46c0      	nop			; (mov r8, r8)
			}
			fs->free_clust = n;
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	2382      	movs	r3, #130	; 0x82
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ce:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	4a0b      	ldr	r2, [pc, #44]	; (8007100 <f_getfree+0x1c8>)
 80070d4:	5c9b      	ldrb	r3, [r3, r2]
 80070d6:	2201      	movs	r2, #1
 80070d8:	4313      	orrs	r3, r2
 80070da:	b2d9      	uxtb	r1, r3
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	4a08      	ldr	r2, [pc, #32]	; (8007100 <f_getfree+0x1c8>)
 80070e0:	5499      	strb	r1, [r3, r2]
			*nclst = n;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070e6:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80070e8:	2337      	movs	r3, #55	; 0x37
 80070ea:	18fb      	adds	r3, r7, r3
 80070ec:	781b      	ldrb	r3, [r3, #0]
}
 80070ee:	0018      	movs	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b00e      	add	sp, #56	; 0x38
 80070f4:	bdb0      	pop	{r4, r5, r7, pc}
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	00000414 	.word	0x00000414
 80070fc:	0000040a 	.word	0x0000040a
 8007100:	00000405 	.word	0x00000405

08007104 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007104:	b590      	push	{r4, r7, lr}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	1dfb      	adds	r3, r7, #7
 8007110:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8007112:	2417      	movs	r4, #23
 8007114:	193b      	adds	r3, r7, r4
 8007116:	2201      	movs	r2, #1
 8007118:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800711a:	2016      	movs	r0, #22
 800711c:	183b      	adds	r3, r7, r0
 800711e:	2200      	movs	r2, #0
 8007120:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 8007122:	4b21      	ldr	r3, [pc, #132]	; (80071a8 <FATFS_LinkDriverEx+0xa4>)
 8007124:	7a5b      	ldrb	r3, [r3, #9]
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b01      	cmp	r3, #1
 800712a:	d836      	bhi.n	800719a <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800712c:	4b1e      	ldr	r3, [pc, #120]	; (80071a8 <FATFS_LinkDriverEx+0xa4>)
 800712e:	7a5b      	ldrb	r3, [r3, #9]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	001a      	movs	r2, r3
 8007134:	4b1c      	ldr	r3, [pc, #112]	; (80071a8 <FATFS_LinkDriverEx+0xa4>)
 8007136:	2100      	movs	r1, #0
 8007138:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800713a:	4b1b      	ldr	r3, [pc, #108]	; (80071a8 <FATFS_LinkDriverEx+0xa4>)
 800713c:	7a5b      	ldrb	r3, [r3, #9]
 800713e:	b2db      	uxtb	r3, r3
 8007140:	4a19      	ldr	r2, [pc, #100]	; (80071a8 <FATFS_LinkDriverEx+0xa4>)
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	18d3      	adds	r3, r2, r3
 8007146:	3304      	adds	r3, #4
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 800714c:	4b16      	ldr	r3, [pc, #88]	; (80071a8 <FATFS_LinkDriverEx+0xa4>)
 800714e:	7a5b      	ldrb	r3, [r3, #9]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	001a      	movs	r2, r3
 8007154:	4b14      	ldr	r3, [pc, #80]	; (80071a8 <FATFS_LinkDriverEx+0xa4>)
 8007156:	189b      	adds	r3, r3, r2
 8007158:	1dfa      	adds	r2, r7, #7
 800715a:	7812      	ldrb	r2, [r2, #0]
 800715c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800715e:	4b12      	ldr	r3, [pc, #72]	; (80071a8 <FATFS_LinkDriverEx+0xa4>)
 8007160:	7a5b      	ldrb	r3, [r3, #9]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	b2d1      	uxtb	r1, r2
 8007168:	4a0f      	ldr	r2, [pc, #60]	; (80071a8 <FATFS_LinkDriverEx+0xa4>)
 800716a:	7251      	strb	r1, [r2, #9]
 800716c:	183a      	adds	r2, r7, r0
 800716e:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8007170:	183b      	adds	r3, r7, r0
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	3330      	adds	r3, #48	; 0x30
 8007176:	b2da      	uxtb	r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	3301      	adds	r3, #1
 8007180:	223a      	movs	r2, #58	; 0x3a
 8007182:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	3302      	adds	r3, #2
 8007188:	222f      	movs	r2, #47	; 0x2f
 800718a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	3303      	adds	r3, #3
 8007190:	2200      	movs	r2, #0
 8007192:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007194:	193b      	adds	r3, r7, r4
 8007196:	2200      	movs	r2, #0
 8007198:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800719a:	2317      	movs	r3, #23
 800719c:	18fb      	adds	r3, r7, r3
 800719e:	781b      	ldrb	r3, [r3, #0]
}
 80071a0:	0018      	movs	r0, r3
 80071a2:	46bd      	mov	sp, r7
 80071a4:	b007      	add	sp, #28
 80071a6:	bd90      	pop	{r4, r7, pc}
 80071a8:	20000690 	.word	0x20000690

080071ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	0018      	movs	r0, r3
 80071be:	f7ff ffa1 	bl	8007104 <FATFS_LinkDriverEx>
 80071c2:	0003      	movs	r3, r0
}
 80071c4:	0018      	movs	r0, r3
 80071c6:	46bd      	mov	sp, r7
 80071c8:	b002      	add	sp, #8
 80071ca:	bd80      	pop	{r7, pc}

080071cc <__errno>:
 80071cc:	4b01      	ldr	r3, [pc, #4]	; (80071d4 <__errno+0x8>)
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	4770      	bx	lr
 80071d2:	46c0      	nop			; (mov r8, r8)
 80071d4:	20000024 	.word	0x20000024

080071d8 <__libc_init_array>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	2600      	movs	r6, #0
 80071dc:	4d0c      	ldr	r5, [pc, #48]	; (8007210 <__libc_init_array+0x38>)
 80071de:	4c0d      	ldr	r4, [pc, #52]	; (8007214 <__libc_init_array+0x3c>)
 80071e0:	1b64      	subs	r4, r4, r5
 80071e2:	10a4      	asrs	r4, r4, #2
 80071e4:	42a6      	cmp	r6, r4
 80071e6:	d109      	bne.n	80071fc <__libc_init_array+0x24>
 80071e8:	2600      	movs	r6, #0
 80071ea:	f000 fc8b 	bl	8007b04 <_init>
 80071ee:	4d0a      	ldr	r5, [pc, #40]	; (8007218 <__libc_init_array+0x40>)
 80071f0:	4c0a      	ldr	r4, [pc, #40]	; (800721c <__libc_init_array+0x44>)
 80071f2:	1b64      	subs	r4, r4, r5
 80071f4:	10a4      	asrs	r4, r4, #2
 80071f6:	42a6      	cmp	r6, r4
 80071f8:	d105      	bne.n	8007206 <__libc_init_array+0x2e>
 80071fa:	bd70      	pop	{r4, r5, r6, pc}
 80071fc:	00b3      	lsls	r3, r6, #2
 80071fe:	58eb      	ldr	r3, [r5, r3]
 8007200:	4798      	blx	r3
 8007202:	3601      	adds	r6, #1
 8007204:	e7ee      	b.n	80071e4 <__libc_init_array+0xc>
 8007206:	00b3      	lsls	r3, r6, #2
 8007208:	58eb      	ldr	r3, [r5, r3]
 800720a:	4798      	blx	r3
 800720c:	3601      	adds	r6, #1
 800720e:	e7f2      	b.n	80071f6 <__libc_init_array+0x1e>
 8007210:	0800831c 	.word	0x0800831c
 8007214:	0800831c 	.word	0x0800831c
 8007218:	0800831c 	.word	0x0800831c
 800721c:	08008320 	.word	0x08008320

08007220 <memcpy>:
 8007220:	2300      	movs	r3, #0
 8007222:	b510      	push	{r4, lr}
 8007224:	429a      	cmp	r2, r3
 8007226:	d100      	bne.n	800722a <memcpy+0xa>
 8007228:	bd10      	pop	{r4, pc}
 800722a:	5ccc      	ldrb	r4, [r1, r3]
 800722c:	54c4      	strb	r4, [r0, r3]
 800722e:	3301      	adds	r3, #1
 8007230:	e7f8      	b.n	8007224 <memcpy+0x4>

08007232 <memset>:
 8007232:	0003      	movs	r3, r0
 8007234:	1882      	adds	r2, r0, r2
 8007236:	4293      	cmp	r3, r2
 8007238:	d100      	bne.n	800723c <memset+0xa>
 800723a:	4770      	bx	lr
 800723c:	7019      	strb	r1, [r3, #0]
 800723e:	3301      	adds	r3, #1
 8007240:	e7f9      	b.n	8007236 <memset+0x4>
	...

08007244 <siprintf>:
 8007244:	b40e      	push	{r1, r2, r3}
 8007246:	b500      	push	{lr}
 8007248:	490b      	ldr	r1, [pc, #44]	; (8007278 <siprintf+0x34>)
 800724a:	b09c      	sub	sp, #112	; 0x70
 800724c:	ab1d      	add	r3, sp, #116	; 0x74
 800724e:	9002      	str	r0, [sp, #8]
 8007250:	9006      	str	r0, [sp, #24]
 8007252:	9107      	str	r1, [sp, #28]
 8007254:	9104      	str	r1, [sp, #16]
 8007256:	4809      	ldr	r0, [pc, #36]	; (800727c <siprintf+0x38>)
 8007258:	4909      	ldr	r1, [pc, #36]	; (8007280 <siprintf+0x3c>)
 800725a:	cb04      	ldmia	r3!, {r2}
 800725c:	9105      	str	r1, [sp, #20]
 800725e:	6800      	ldr	r0, [r0, #0]
 8007260:	a902      	add	r1, sp, #8
 8007262:	9301      	str	r3, [sp, #4]
 8007264:	f000 f870 	bl	8007348 <_svfiprintf_r>
 8007268:	2300      	movs	r3, #0
 800726a:	9a02      	ldr	r2, [sp, #8]
 800726c:	7013      	strb	r3, [r2, #0]
 800726e:	b01c      	add	sp, #112	; 0x70
 8007270:	bc08      	pop	{r3}
 8007272:	b003      	add	sp, #12
 8007274:	4718      	bx	r3
 8007276:	46c0      	nop			; (mov r8, r8)
 8007278:	7fffffff 	.word	0x7fffffff
 800727c:	20000024 	.word	0x20000024
 8007280:	ffff0208 	.word	0xffff0208

08007284 <__ssputs_r>:
 8007284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007286:	688e      	ldr	r6, [r1, #8]
 8007288:	b085      	sub	sp, #20
 800728a:	0007      	movs	r7, r0
 800728c:	000c      	movs	r4, r1
 800728e:	9203      	str	r2, [sp, #12]
 8007290:	9301      	str	r3, [sp, #4]
 8007292:	429e      	cmp	r6, r3
 8007294:	d83c      	bhi.n	8007310 <__ssputs_r+0x8c>
 8007296:	2390      	movs	r3, #144	; 0x90
 8007298:	898a      	ldrh	r2, [r1, #12]
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	421a      	tst	r2, r3
 800729e:	d034      	beq.n	800730a <__ssputs_r+0x86>
 80072a0:	6909      	ldr	r1, [r1, #16]
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	6960      	ldr	r0, [r4, #20]
 80072a6:	1a5b      	subs	r3, r3, r1
 80072a8:	9302      	str	r3, [sp, #8]
 80072aa:	2303      	movs	r3, #3
 80072ac:	4343      	muls	r3, r0
 80072ae:	0fdd      	lsrs	r5, r3, #31
 80072b0:	18ed      	adds	r5, r5, r3
 80072b2:	9b01      	ldr	r3, [sp, #4]
 80072b4:	9802      	ldr	r0, [sp, #8]
 80072b6:	3301      	adds	r3, #1
 80072b8:	181b      	adds	r3, r3, r0
 80072ba:	106d      	asrs	r5, r5, #1
 80072bc:	42ab      	cmp	r3, r5
 80072be:	d900      	bls.n	80072c2 <__ssputs_r+0x3e>
 80072c0:	001d      	movs	r5, r3
 80072c2:	0553      	lsls	r3, r2, #21
 80072c4:	d532      	bpl.n	800732c <__ssputs_r+0xa8>
 80072c6:	0029      	movs	r1, r5
 80072c8:	0038      	movs	r0, r7
 80072ca:	f000 fb49 	bl	8007960 <_malloc_r>
 80072ce:	1e06      	subs	r6, r0, #0
 80072d0:	d109      	bne.n	80072e6 <__ssputs_r+0x62>
 80072d2:	230c      	movs	r3, #12
 80072d4:	603b      	str	r3, [r7, #0]
 80072d6:	2340      	movs	r3, #64	; 0x40
 80072d8:	2001      	movs	r0, #1
 80072da:	89a2      	ldrh	r2, [r4, #12]
 80072dc:	4240      	negs	r0, r0
 80072de:	4313      	orrs	r3, r2
 80072e0:	81a3      	strh	r3, [r4, #12]
 80072e2:	b005      	add	sp, #20
 80072e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072e6:	9a02      	ldr	r2, [sp, #8]
 80072e8:	6921      	ldr	r1, [r4, #16]
 80072ea:	f7ff ff99 	bl	8007220 <memcpy>
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	4a14      	ldr	r2, [pc, #80]	; (8007344 <__ssputs_r+0xc0>)
 80072f2:	401a      	ands	r2, r3
 80072f4:	2380      	movs	r3, #128	; 0x80
 80072f6:	4313      	orrs	r3, r2
 80072f8:	81a3      	strh	r3, [r4, #12]
 80072fa:	9b02      	ldr	r3, [sp, #8]
 80072fc:	6126      	str	r6, [r4, #16]
 80072fe:	18f6      	adds	r6, r6, r3
 8007300:	6026      	str	r6, [r4, #0]
 8007302:	6165      	str	r5, [r4, #20]
 8007304:	9e01      	ldr	r6, [sp, #4]
 8007306:	1aed      	subs	r5, r5, r3
 8007308:	60a5      	str	r5, [r4, #8]
 800730a:	9b01      	ldr	r3, [sp, #4]
 800730c:	429e      	cmp	r6, r3
 800730e:	d900      	bls.n	8007312 <__ssputs_r+0x8e>
 8007310:	9e01      	ldr	r6, [sp, #4]
 8007312:	0032      	movs	r2, r6
 8007314:	9903      	ldr	r1, [sp, #12]
 8007316:	6820      	ldr	r0, [r4, #0]
 8007318:	f000 faa3 	bl	8007862 <memmove>
 800731c:	68a3      	ldr	r3, [r4, #8]
 800731e:	2000      	movs	r0, #0
 8007320:	1b9b      	subs	r3, r3, r6
 8007322:	60a3      	str	r3, [r4, #8]
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	199e      	adds	r6, r3, r6
 8007328:	6026      	str	r6, [r4, #0]
 800732a:	e7da      	b.n	80072e2 <__ssputs_r+0x5e>
 800732c:	002a      	movs	r2, r5
 800732e:	0038      	movs	r0, r7
 8007330:	f000 fb8c 	bl	8007a4c <_realloc_r>
 8007334:	1e06      	subs	r6, r0, #0
 8007336:	d1e0      	bne.n	80072fa <__ssputs_r+0x76>
 8007338:	0038      	movs	r0, r7
 800733a:	6921      	ldr	r1, [r4, #16]
 800733c:	f000 faa4 	bl	8007888 <_free_r>
 8007340:	e7c7      	b.n	80072d2 <__ssputs_r+0x4e>
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	fffffb7f 	.word	0xfffffb7f

08007348 <_svfiprintf_r>:
 8007348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734a:	b0a1      	sub	sp, #132	; 0x84
 800734c:	9003      	str	r0, [sp, #12]
 800734e:	001d      	movs	r5, r3
 8007350:	898b      	ldrh	r3, [r1, #12]
 8007352:	000f      	movs	r7, r1
 8007354:	0016      	movs	r6, r2
 8007356:	061b      	lsls	r3, r3, #24
 8007358:	d511      	bpl.n	800737e <_svfiprintf_r+0x36>
 800735a:	690b      	ldr	r3, [r1, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10e      	bne.n	800737e <_svfiprintf_r+0x36>
 8007360:	2140      	movs	r1, #64	; 0x40
 8007362:	f000 fafd 	bl	8007960 <_malloc_r>
 8007366:	6038      	str	r0, [r7, #0]
 8007368:	6138      	str	r0, [r7, #16]
 800736a:	2800      	cmp	r0, #0
 800736c:	d105      	bne.n	800737a <_svfiprintf_r+0x32>
 800736e:	230c      	movs	r3, #12
 8007370:	9a03      	ldr	r2, [sp, #12]
 8007372:	3801      	subs	r0, #1
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	b021      	add	sp, #132	; 0x84
 8007378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800737a:	2340      	movs	r3, #64	; 0x40
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	2300      	movs	r3, #0
 8007380:	ac08      	add	r4, sp, #32
 8007382:	6163      	str	r3, [r4, #20]
 8007384:	3320      	adds	r3, #32
 8007386:	7663      	strb	r3, [r4, #25]
 8007388:	3310      	adds	r3, #16
 800738a:	76a3      	strb	r3, [r4, #26]
 800738c:	9507      	str	r5, [sp, #28]
 800738e:	0035      	movs	r5, r6
 8007390:	782b      	ldrb	r3, [r5, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <_svfiprintf_r+0x52>
 8007396:	2b25      	cmp	r3, #37	; 0x25
 8007398:	d147      	bne.n	800742a <_svfiprintf_r+0xe2>
 800739a:	1bab      	subs	r3, r5, r6
 800739c:	9305      	str	r3, [sp, #20]
 800739e:	42b5      	cmp	r5, r6
 80073a0:	d00c      	beq.n	80073bc <_svfiprintf_r+0x74>
 80073a2:	0032      	movs	r2, r6
 80073a4:	0039      	movs	r1, r7
 80073a6:	9803      	ldr	r0, [sp, #12]
 80073a8:	f7ff ff6c 	bl	8007284 <__ssputs_r>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d100      	bne.n	80073b2 <_svfiprintf_r+0x6a>
 80073b0:	e0ae      	b.n	8007510 <_svfiprintf_r+0x1c8>
 80073b2:	6962      	ldr	r2, [r4, #20]
 80073b4:	9b05      	ldr	r3, [sp, #20]
 80073b6:	4694      	mov	ip, r2
 80073b8:	4463      	add	r3, ip
 80073ba:	6163      	str	r3, [r4, #20]
 80073bc:	782b      	ldrb	r3, [r5, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d100      	bne.n	80073c4 <_svfiprintf_r+0x7c>
 80073c2:	e0a5      	b.n	8007510 <_svfiprintf_r+0x1c8>
 80073c4:	2201      	movs	r2, #1
 80073c6:	2300      	movs	r3, #0
 80073c8:	4252      	negs	r2, r2
 80073ca:	6062      	str	r2, [r4, #4]
 80073cc:	a904      	add	r1, sp, #16
 80073ce:	3254      	adds	r2, #84	; 0x54
 80073d0:	1852      	adds	r2, r2, r1
 80073d2:	1c6e      	adds	r6, r5, #1
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	60e3      	str	r3, [r4, #12]
 80073d8:	60a3      	str	r3, [r4, #8]
 80073da:	7013      	strb	r3, [r2, #0]
 80073dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80073de:	2205      	movs	r2, #5
 80073e0:	7831      	ldrb	r1, [r6, #0]
 80073e2:	4854      	ldr	r0, [pc, #336]	; (8007534 <_svfiprintf_r+0x1ec>)
 80073e4:	f000 fa32 	bl	800784c <memchr>
 80073e8:	1c75      	adds	r5, r6, #1
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d11f      	bne.n	800742e <_svfiprintf_r+0xe6>
 80073ee:	6822      	ldr	r2, [r4, #0]
 80073f0:	06d3      	lsls	r3, r2, #27
 80073f2:	d504      	bpl.n	80073fe <_svfiprintf_r+0xb6>
 80073f4:	2353      	movs	r3, #83	; 0x53
 80073f6:	a904      	add	r1, sp, #16
 80073f8:	185b      	adds	r3, r3, r1
 80073fa:	2120      	movs	r1, #32
 80073fc:	7019      	strb	r1, [r3, #0]
 80073fe:	0713      	lsls	r3, r2, #28
 8007400:	d504      	bpl.n	800740c <_svfiprintf_r+0xc4>
 8007402:	2353      	movs	r3, #83	; 0x53
 8007404:	a904      	add	r1, sp, #16
 8007406:	185b      	adds	r3, r3, r1
 8007408:	212b      	movs	r1, #43	; 0x2b
 800740a:	7019      	strb	r1, [r3, #0]
 800740c:	7833      	ldrb	r3, [r6, #0]
 800740e:	2b2a      	cmp	r3, #42	; 0x2a
 8007410:	d016      	beq.n	8007440 <_svfiprintf_r+0xf8>
 8007412:	0035      	movs	r5, r6
 8007414:	2100      	movs	r1, #0
 8007416:	200a      	movs	r0, #10
 8007418:	68e3      	ldr	r3, [r4, #12]
 800741a:	782a      	ldrb	r2, [r5, #0]
 800741c:	1c6e      	adds	r6, r5, #1
 800741e:	3a30      	subs	r2, #48	; 0x30
 8007420:	2a09      	cmp	r2, #9
 8007422:	d94e      	bls.n	80074c2 <_svfiprintf_r+0x17a>
 8007424:	2900      	cmp	r1, #0
 8007426:	d111      	bne.n	800744c <_svfiprintf_r+0x104>
 8007428:	e017      	b.n	800745a <_svfiprintf_r+0x112>
 800742a:	3501      	adds	r5, #1
 800742c:	e7b0      	b.n	8007390 <_svfiprintf_r+0x48>
 800742e:	4b41      	ldr	r3, [pc, #260]	; (8007534 <_svfiprintf_r+0x1ec>)
 8007430:	6822      	ldr	r2, [r4, #0]
 8007432:	1ac0      	subs	r0, r0, r3
 8007434:	2301      	movs	r3, #1
 8007436:	4083      	lsls	r3, r0
 8007438:	4313      	orrs	r3, r2
 800743a:	002e      	movs	r6, r5
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	e7ce      	b.n	80073de <_svfiprintf_r+0x96>
 8007440:	9b07      	ldr	r3, [sp, #28]
 8007442:	1d19      	adds	r1, r3, #4
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	9107      	str	r1, [sp, #28]
 8007448:	2b00      	cmp	r3, #0
 800744a:	db01      	blt.n	8007450 <_svfiprintf_r+0x108>
 800744c:	930b      	str	r3, [sp, #44]	; 0x2c
 800744e:	e004      	b.n	800745a <_svfiprintf_r+0x112>
 8007450:	425b      	negs	r3, r3
 8007452:	60e3      	str	r3, [r4, #12]
 8007454:	2302      	movs	r3, #2
 8007456:	4313      	orrs	r3, r2
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	782b      	ldrb	r3, [r5, #0]
 800745c:	2b2e      	cmp	r3, #46	; 0x2e
 800745e:	d10a      	bne.n	8007476 <_svfiprintf_r+0x12e>
 8007460:	786b      	ldrb	r3, [r5, #1]
 8007462:	2b2a      	cmp	r3, #42	; 0x2a
 8007464:	d135      	bne.n	80074d2 <_svfiprintf_r+0x18a>
 8007466:	9b07      	ldr	r3, [sp, #28]
 8007468:	3502      	adds	r5, #2
 800746a:	1d1a      	adds	r2, r3, #4
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	9207      	str	r2, [sp, #28]
 8007470:	2b00      	cmp	r3, #0
 8007472:	db2b      	blt.n	80074cc <_svfiprintf_r+0x184>
 8007474:	9309      	str	r3, [sp, #36]	; 0x24
 8007476:	4e30      	ldr	r6, [pc, #192]	; (8007538 <_svfiprintf_r+0x1f0>)
 8007478:	2203      	movs	r2, #3
 800747a:	0030      	movs	r0, r6
 800747c:	7829      	ldrb	r1, [r5, #0]
 800747e:	f000 f9e5 	bl	800784c <memchr>
 8007482:	2800      	cmp	r0, #0
 8007484:	d006      	beq.n	8007494 <_svfiprintf_r+0x14c>
 8007486:	2340      	movs	r3, #64	; 0x40
 8007488:	1b80      	subs	r0, r0, r6
 800748a:	4083      	lsls	r3, r0
 800748c:	6822      	ldr	r2, [r4, #0]
 800748e:	3501      	adds	r5, #1
 8007490:	4313      	orrs	r3, r2
 8007492:	6023      	str	r3, [r4, #0]
 8007494:	7829      	ldrb	r1, [r5, #0]
 8007496:	2206      	movs	r2, #6
 8007498:	4828      	ldr	r0, [pc, #160]	; (800753c <_svfiprintf_r+0x1f4>)
 800749a:	1c6e      	adds	r6, r5, #1
 800749c:	7621      	strb	r1, [r4, #24]
 800749e:	f000 f9d5 	bl	800784c <memchr>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d03c      	beq.n	8007520 <_svfiprintf_r+0x1d8>
 80074a6:	4b26      	ldr	r3, [pc, #152]	; (8007540 <_svfiprintf_r+0x1f8>)
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d125      	bne.n	80074f8 <_svfiprintf_r+0x1b0>
 80074ac:	2207      	movs	r2, #7
 80074ae:	9b07      	ldr	r3, [sp, #28]
 80074b0:	3307      	adds	r3, #7
 80074b2:	4393      	bics	r3, r2
 80074b4:	3308      	adds	r3, #8
 80074b6:	9307      	str	r3, [sp, #28]
 80074b8:	6963      	ldr	r3, [r4, #20]
 80074ba:	9a04      	ldr	r2, [sp, #16]
 80074bc:	189b      	adds	r3, r3, r2
 80074be:	6163      	str	r3, [r4, #20]
 80074c0:	e765      	b.n	800738e <_svfiprintf_r+0x46>
 80074c2:	4343      	muls	r3, r0
 80074c4:	0035      	movs	r5, r6
 80074c6:	2101      	movs	r1, #1
 80074c8:	189b      	adds	r3, r3, r2
 80074ca:	e7a6      	b.n	800741a <_svfiprintf_r+0xd2>
 80074cc:	2301      	movs	r3, #1
 80074ce:	425b      	negs	r3, r3
 80074d0:	e7d0      	b.n	8007474 <_svfiprintf_r+0x12c>
 80074d2:	2300      	movs	r3, #0
 80074d4:	200a      	movs	r0, #10
 80074d6:	001a      	movs	r2, r3
 80074d8:	3501      	adds	r5, #1
 80074da:	6063      	str	r3, [r4, #4]
 80074dc:	7829      	ldrb	r1, [r5, #0]
 80074de:	1c6e      	adds	r6, r5, #1
 80074e0:	3930      	subs	r1, #48	; 0x30
 80074e2:	2909      	cmp	r1, #9
 80074e4:	d903      	bls.n	80074ee <_svfiprintf_r+0x1a6>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0c5      	beq.n	8007476 <_svfiprintf_r+0x12e>
 80074ea:	9209      	str	r2, [sp, #36]	; 0x24
 80074ec:	e7c3      	b.n	8007476 <_svfiprintf_r+0x12e>
 80074ee:	4342      	muls	r2, r0
 80074f0:	0035      	movs	r5, r6
 80074f2:	2301      	movs	r3, #1
 80074f4:	1852      	adds	r2, r2, r1
 80074f6:	e7f1      	b.n	80074dc <_svfiprintf_r+0x194>
 80074f8:	ab07      	add	r3, sp, #28
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	003a      	movs	r2, r7
 80074fe:	0021      	movs	r1, r4
 8007500:	4b10      	ldr	r3, [pc, #64]	; (8007544 <_svfiprintf_r+0x1fc>)
 8007502:	9803      	ldr	r0, [sp, #12]
 8007504:	e000      	b.n	8007508 <_svfiprintf_r+0x1c0>
 8007506:	bf00      	nop
 8007508:	9004      	str	r0, [sp, #16]
 800750a:	9b04      	ldr	r3, [sp, #16]
 800750c:	3301      	adds	r3, #1
 800750e:	d1d3      	bne.n	80074b8 <_svfiprintf_r+0x170>
 8007510:	89bb      	ldrh	r3, [r7, #12]
 8007512:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007514:	065b      	lsls	r3, r3, #25
 8007516:	d400      	bmi.n	800751a <_svfiprintf_r+0x1d2>
 8007518:	e72d      	b.n	8007376 <_svfiprintf_r+0x2e>
 800751a:	2001      	movs	r0, #1
 800751c:	4240      	negs	r0, r0
 800751e:	e72a      	b.n	8007376 <_svfiprintf_r+0x2e>
 8007520:	ab07      	add	r3, sp, #28
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	003a      	movs	r2, r7
 8007526:	0021      	movs	r1, r4
 8007528:	4b06      	ldr	r3, [pc, #24]	; (8007544 <_svfiprintf_r+0x1fc>)
 800752a:	9803      	ldr	r0, [sp, #12]
 800752c:	f000 f87c 	bl	8007628 <_printf_i>
 8007530:	e7ea      	b.n	8007508 <_svfiprintf_r+0x1c0>
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	080082e8 	.word	0x080082e8
 8007538:	080082ee 	.word	0x080082ee
 800753c:	080082f2 	.word	0x080082f2
 8007540:	00000000 	.word	0x00000000
 8007544:	08007285 	.word	0x08007285

08007548 <_printf_common>:
 8007548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800754a:	0015      	movs	r5, r2
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	688a      	ldr	r2, [r1, #8]
 8007550:	690b      	ldr	r3, [r1, #16]
 8007552:	000c      	movs	r4, r1
 8007554:	9000      	str	r0, [sp, #0]
 8007556:	4293      	cmp	r3, r2
 8007558:	da00      	bge.n	800755c <_printf_common+0x14>
 800755a:	0013      	movs	r3, r2
 800755c:	0022      	movs	r2, r4
 800755e:	602b      	str	r3, [r5, #0]
 8007560:	3243      	adds	r2, #67	; 0x43
 8007562:	7812      	ldrb	r2, [r2, #0]
 8007564:	2a00      	cmp	r2, #0
 8007566:	d001      	beq.n	800756c <_printf_common+0x24>
 8007568:	3301      	adds	r3, #1
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	069b      	lsls	r3, r3, #26
 8007570:	d502      	bpl.n	8007578 <_printf_common+0x30>
 8007572:	682b      	ldr	r3, [r5, #0]
 8007574:	3302      	adds	r3, #2
 8007576:	602b      	str	r3, [r5, #0]
 8007578:	6822      	ldr	r2, [r4, #0]
 800757a:	2306      	movs	r3, #6
 800757c:	0017      	movs	r7, r2
 800757e:	401f      	ands	r7, r3
 8007580:	421a      	tst	r2, r3
 8007582:	d027      	beq.n	80075d4 <_printf_common+0x8c>
 8007584:	0023      	movs	r3, r4
 8007586:	3343      	adds	r3, #67	; 0x43
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	1e5a      	subs	r2, r3, #1
 800758c:	4193      	sbcs	r3, r2
 800758e:	6822      	ldr	r2, [r4, #0]
 8007590:	0692      	lsls	r2, r2, #26
 8007592:	d430      	bmi.n	80075f6 <_printf_common+0xae>
 8007594:	0022      	movs	r2, r4
 8007596:	9901      	ldr	r1, [sp, #4]
 8007598:	9800      	ldr	r0, [sp, #0]
 800759a:	9e08      	ldr	r6, [sp, #32]
 800759c:	3243      	adds	r2, #67	; 0x43
 800759e:	47b0      	blx	r6
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d025      	beq.n	80075f0 <_printf_common+0xa8>
 80075a4:	2306      	movs	r3, #6
 80075a6:	6820      	ldr	r0, [r4, #0]
 80075a8:	682a      	ldr	r2, [r5, #0]
 80075aa:	68e1      	ldr	r1, [r4, #12]
 80075ac:	2500      	movs	r5, #0
 80075ae:	4003      	ands	r3, r0
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d103      	bne.n	80075bc <_printf_common+0x74>
 80075b4:	1a8d      	subs	r5, r1, r2
 80075b6:	43eb      	mvns	r3, r5
 80075b8:	17db      	asrs	r3, r3, #31
 80075ba:	401d      	ands	r5, r3
 80075bc:	68a3      	ldr	r3, [r4, #8]
 80075be:	6922      	ldr	r2, [r4, #16]
 80075c0:	4293      	cmp	r3, r2
 80075c2:	dd01      	ble.n	80075c8 <_printf_common+0x80>
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	18ed      	adds	r5, r5, r3
 80075c8:	2700      	movs	r7, #0
 80075ca:	42bd      	cmp	r5, r7
 80075cc:	d120      	bne.n	8007610 <_printf_common+0xc8>
 80075ce:	2000      	movs	r0, #0
 80075d0:	e010      	b.n	80075f4 <_printf_common+0xac>
 80075d2:	3701      	adds	r7, #1
 80075d4:	68e3      	ldr	r3, [r4, #12]
 80075d6:	682a      	ldr	r2, [r5, #0]
 80075d8:	1a9b      	subs	r3, r3, r2
 80075da:	42bb      	cmp	r3, r7
 80075dc:	ddd2      	ble.n	8007584 <_printf_common+0x3c>
 80075de:	0022      	movs	r2, r4
 80075e0:	2301      	movs	r3, #1
 80075e2:	9901      	ldr	r1, [sp, #4]
 80075e4:	9800      	ldr	r0, [sp, #0]
 80075e6:	9e08      	ldr	r6, [sp, #32]
 80075e8:	3219      	adds	r2, #25
 80075ea:	47b0      	blx	r6
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	d1f0      	bne.n	80075d2 <_printf_common+0x8a>
 80075f0:	2001      	movs	r0, #1
 80075f2:	4240      	negs	r0, r0
 80075f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075f6:	2030      	movs	r0, #48	; 0x30
 80075f8:	18e1      	adds	r1, r4, r3
 80075fa:	3143      	adds	r1, #67	; 0x43
 80075fc:	7008      	strb	r0, [r1, #0]
 80075fe:	0021      	movs	r1, r4
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	3145      	adds	r1, #69	; 0x45
 8007604:	7809      	ldrb	r1, [r1, #0]
 8007606:	18a2      	adds	r2, r4, r2
 8007608:	3243      	adds	r2, #67	; 0x43
 800760a:	3302      	adds	r3, #2
 800760c:	7011      	strb	r1, [r2, #0]
 800760e:	e7c1      	b.n	8007594 <_printf_common+0x4c>
 8007610:	0022      	movs	r2, r4
 8007612:	2301      	movs	r3, #1
 8007614:	9901      	ldr	r1, [sp, #4]
 8007616:	9800      	ldr	r0, [sp, #0]
 8007618:	9e08      	ldr	r6, [sp, #32]
 800761a:	321a      	adds	r2, #26
 800761c:	47b0      	blx	r6
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	d0e6      	beq.n	80075f0 <_printf_common+0xa8>
 8007622:	3701      	adds	r7, #1
 8007624:	e7d1      	b.n	80075ca <_printf_common+0x82>
	...

08007628 <_printf_i>:
 8007628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800762a:	b08b      	sub	sp, #44	; 0x2c
 800762c:	9206      	str	r2, [sp, #24]
 800762e:	000a      	movs	r2, r1
 8007630:	3243      	adds	r2, #67	; 0x43
 8007632:	9307      	str	r3, [sp, #28]
 8007634:	9005      	str	r0, [sp, #20]
 8007636:	9204      	str	r2, [sp, #16]
 8007638:	7e0a      	ldrb	r2, [r1, #24]
 800763a:	000c      	movs	r4, r1
 800763c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800763e:	2a78      	cmp	r2, #120	; 0x78
 8007640:	d807      	bhi.n	8007652 <_printf_i+0x2a>
 8007642:	2a62      	cmp	r2, #98	; 0x62
 8007644:	d809      	bhi.n	800765a <_printf_i+0x32>
 8007646:	2a00      	cmp	r2, #0
 8007648:	d100      	bne.n	800764c <_printf_i+0x24>
 800764a:	e0c1      	b.n	80077d0 <_printf_i+0x1a8>
 800764c:	2a58      	cmp	r2, #88	; 0x58
 800764e:	d100      	bne.n	8007652 <_printf_i+0x2a>
 8007650:	e08c      	b.n	800776c <_printf_i+0x144>
 8007652:	0026      	movs	r6, r4
 8007654:	3642      	adds	r6, #66	; 0x42
 8007656:	7032      	strb	r2, [r6, #0]
 8007658:	e022      	b.n	80076a0 <_printf_i+0x78>
 800765a:	0010      	movs	r0, r2
 800765c:	3863      	subs	r0, #99	; 0x63
 800765e:	2815      	cmp	r0, #21
 8007660:	d8f7      	bhi.n	8007652 <_printf_i+0x2a>
 8007662:	f7f8 fd51 	bl	8000108 <__gnu_thumb1_case_shi>
 8007666:	0016      	.short	0x0016
 8007668:	fff6001f 	.word	0xfff6001f
 800766c:	fff6fff6 	.word	0xfff6fff6
 8007670:	001ffff6 	.word	0x001ffff6
 8007674:	fff6fff6 	.word	0xfff6fff6
 8007678:	fff6fff6 	.word	0xfff6fff6
 800767c:	003600a8 	.word	0x003600a8
 8007680:	fff6009a 	.word	0xfff6009a
 8007684:	00b9fff6 	.word	0x00b9fff6
 8007688:	0036fff6 	.word	0x0036fff6
 800768c:	fff6fff6 	.word	0xfff6fff6
 8007690:	009e      	.short	0x009e
 8007692:	0026      	movs	r6, r4
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	3642      	adds	r6, #66	; 0x42
 8007698:	1d11      	adds	r1, r2, #4
 800769a:	6019      	str	r1, [r3, #0]
 800769c:	6813      	ldr	r3, [r2, #0]
 800769e:	7033      	strb	r3, [r6, #0]
 80076a0:	2301      	movs	r3, #1
 80076a2:	e0a7      	b.n	80077f4 <_printf_i+0x1cc>
 80076a4:	6808      	ldr	r0, [r1, #0]
 80076a6:	6819      	ldr	r1, [r3, #0]
 80076a8:	1d0a      	adds	r2, r1, #4
 80076aa:	0605      	lsls	r5, r0, #24
 80076ac:	d50b      	bpl.n	80076c6 <_printf_i+0x9e>
 80076ae:	680d      	ldr	r5, [r1, #0]
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	2d00      	cmp	r5, #0
 80076b4:	da03      	bge.n	80076be <_printf_i+0x96>
 80076b6:	232d      	movs	r3, #45	; 0x2d
 80076b8:	9a04      	ldr	r2, [sp, #16]
 80076ba:	426d      	negs	r5, r5
 80076bc:	7013      	strb	r3, [r2, #0]
 80076be:	4b61      	ldr	r3, [pc, #388]	; (8007844 <_printf_i+0x21c>)
 80076c0:	270a      	movs	r7, #10
 80076c2:	9303      	str	r3, [sp, #12]
 80076c4:	e01b      	b.n	80076fe <_printf_i+0xd6>
 80076c6:	680d      	ldr	r5, [r1, #0]
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	0641      	lsls	r1, r0, #25
 80076cc:	d5f1      	bpl.n	80076b2 <_printf_i+0x8a>
 80076ce:	b22d      	sxth	r5, r5
 80076d0:	e7ef      	b.n	80076b2 <_printf_i+0x8a>
 80076d2:	680d      	ldr	r5, [r1, #0]
 80076d4:	6819      	ldr	r1, [r3, #0]
 80076d6:	1d08      	adds	r0, r1, #4
 80076d8:	6018      	str	r0, [r3, #0]
 80076da:	062e      	lsls	r6, r5, #24
 80076dc:	d501      	bpl.n	80076e2 <_printf_i+0xba>
 80076de:	680d      	ldr	r5, [r1, #0]
 80076e0:	e003      	b.n	80076ea <_printf_i+0xc2>
 80076e2:	066d      	lsls	r5, r5, #25
 80076e4:	d5fb      	bpl.n	80076de <_printf_i+0xb6>
 80076e6:	680d      	ldr	r5, [r1, #0]
 80076e8:	b2ad      	uxth	r5, r5
 80076ea:	4b56      	ldr	r3, [pc, #344]	; (8007844 <_printf_i+0x21c>)
 80076ec:	2708      	movs	r7, #8
 80076ee:	9303      	str	r3, [sp, #12]
 80076f0:	2a6f      	cmp	r2, #111	; 0x6f
 80076f2:	d000      	beq.n	80076f6 <_printf_i+0xce>
 80076f4:	3702      	adds	r7, #2
 80076f6:	0023      	movs	r3, r4
 80076f8:	2200      	movs	r2, #0
 80076fa:	3343      	adds	r3, #67	; 0x43
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	6863      	ldr	r3, [r4, #4]
 8007700:	60a3      	str	r3, [r4, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	db03      	blt.n	800770e <_printf_i+0xe6>
 8007706:	2204      	movs	r2, #4
 8007708:	6821      	ldr	r1, [r4, #0]
 800770a:	4391      	bics	r1, r2
 800770c:	6021      	str	r1, [r4, #0]
 800770e:	2d00      	cmp	r5, #0
 8007710:	d102      	bne.n	8007718 <_printf_i+0xf0>
 8007712:	9e04      	ldr	r6, [sp, #16]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00c      	beq.n	8007732 <_printf_i+0x10a>
 8007718:	9e04      	ldr	r6, [sp, #16]
 800771a:	0028      	movs	r0, r5
 800771c:	0039      	movs	r1, r7
 800771e:	f7f8 fd83 	bl	8000228 <__aeabi_uidivmod>
 8007722:	9b03      	ldr	r3, [sp, #12]
 8007724:	3e01      	subs	r6, #1
 8007726:	5c5b      	ldrb	r3, [r3, r1]
 8007728:	7033      	strb	r3, [r6, #0]
 800772a:	002b      	movs	r3, r5
 800772c:	0005      	movs	r5, r0
 800772e:	429f      	cmp	r7, r3
 8007730:	d9f3      	bls.n	800771a <_printf_i+0xf2>
 8007732:	2f08      	cmp	r7, #8
 8007734:	d109      	bne.n	800774a <_printf_i+0x122>
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	07db      	lsls	r3, r3, #31
 800773a:	d506      	bpl.n	800774a <_printf_i+0x122>
 800773c:	6863      	ldr	r3, [r4, #4]
 800773e:	6922      	ldr	r2, [r4, #16]
 8007740:	4293      	cmp	r3, r2
 8007742:	dc02      	bgt.n	800774a <_printf_i+0x122>
 8007744:	2330      	movs	r3, #48	; 0x30
 8007746:	3e01      	subs	r6, #1
 8007748:	7033      	strb	r3, [r6, #0]
 800774a:	9b04      	ldr	r3, [sp, #16]
 800774c:	1b9b      	subs	r3, r3, r6
 800774e:	6123      	str	r3, [r4, #16]
 8007750:	9b07      	ldr	r3, [sp, #28]
 8007752:	0021      	movs	r1, r4
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	9805      	ldr	r0, [sp, #20]
 8007758:	9b06      	ldr	r3, [sp, #24]
 800775a:	aa09      	add	r2, sp, #36	; 0x24
 800775c:	f7ff fef4 	bl	8007548 <_printf_common>
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	d14c      	bne.n	80077fe <_printf_i+0x1d6>
 8007764:	2001      	movs	r0, #1
 8007766:	4240      	negs	r0, r0
 8007768:	b00b      	add	sp, #44	; 0x2c
 800776a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800776c:	3145      	adds	r1, #69	; 0x45
 800776e:	700a      	strb	r2, [r1, #0]
 8007770:	4a34      	ldr	r2, [pc, #208]	; (8007844 <_printf_i+0x21c>)
 8007772:	9203      	str	r2, [sp, #12]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	6821      	ldr	r1, [r4, #0]
 8007778:	ca20      	ldmia	r2!, {r5}
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	0608      	lsls	r0, r1, #24
 800777e:	d516      	bpl.n	80077ae <_printf_i+0x186>
 8007780:	07cb      	lsls	r3, r1, #31
 8007782:	d502      	bpl.n	800778a <_printf_i+0x162>
 8007784:	2320      	movs	r3, #32
 8007786:	4319      	orrs	r1, r3
 8007788:	6021      	str	r1, [r4, #0]
 800778a:	2710      	movs	r7, #16
 800778c:	2d00      	cmp	r5, #0
 800778e:	d1b2      	bne.n	80076f6 <_printf_i+0xce>
 8007790:	2320      	movs	r3, #32
 8007792:	6822      	ldr	r2, [r4, #0]
 8007794:	439a      	bics	r2, r3
 8007796:	6022      	str	r2, [r4, #0]
 8007798:	e7ad      	b.n	80076f6 <_printf_i+0xce>
 800779a:	2220      	movs	r2, #32
 800779c:	6809      	ldr	r1, [r1, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	6022      	str	r2, [r4, #0]
 80077a2:	0022      	movs	r2, r4
 80077a4:	2178      	movs	r1, #120	; 0x78
 80077a6:	3245      	adds	r2, #69	; 0x45
 80077a8:	7011      	strb	r1, [r2, #0]
 80077aa:	4a27      	ldr	r2, [pc, #156]	; (8007848 <_printf_i+0x220>)
 80077ac:	e7e1      	b.n	8007772 <_printf_i+0x14a>
 80077ae:	0648      	lsls	r0, r1, #25
 80077b0:	d5e6      	bpl.n	8007780 <_printf_i+0x158>
 80077b2:	b2ad      	uxth	r5, r5
 80077b4:	e7e4      	b.n	8007780 <_printf_i+0x158>
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	680d      	ldr	r5, [r1, #0]
 80077ba:	1d10      	adds	r0, r2, #4
 80077bc:	6949      	ldr	r1, [r1, #20]
 80077be:	6018      	str	r0, [r3, #0]
 80077c0:	6813      	ldr	r3, [r2, #0]
 80077c2:	062e      	lsls	r6, r5, #24
 80077c4:	d501      	bpl.n	80077ca <_printf_i+0x1a2>
 80077c6:	6019      	str	r1, [r3, #0]
 80077c8:	e002      	b.n	80077d0 <_printf_i+0x1a8>
 80077ca:	066d      	lsls	r5, r5, #25
 80077cc:	d5fb      	bpl.n	80077c6 <_printf_i+0x19e>
 80077ce:	8019      	strh	r1, [r3, #0]
 80077d0:	2300      	movs	r3, #0
 80077d2:	9e04      	ldr	r6, [sp, #16]
 80077d4:	6123      	str	r3, [r4, #16]
 80077d6:	e7bb      	b.n	8007750 <_printf_i+0x128>
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	1d11      	adds	r1, r2, #4
 80077dc:	6019      	str	r1, [r3, #0]
 80077de:	6816      	ldr	r6, [r2, #0]
 80077e0:	2100      	movs	r1, #0
 80077e2:	0030      	movs	r0, r6
 80077e4:	6862      	ldr	r2, [r4, #4]
 80077e6:	f000 f831 	bl	800784c <memchr>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d001      	beq.n	80077f2 <_printf_i+0x1ca>
 80077ee:	1b80      	subs	r0, r0, r6
 80077f0:	6060      	str	r0, [r4, #4]
 80077f2:	6863      	ldr	r3, [r4, #4]
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	2300      	movs	r3, #0
 80077f8:	9a04      	ldr	r2, [sp, #16]
 80077fa:	7013      	strb	r3, [r2, #0]
 80077fc:	e7a8      	b.n	8007750 <_printf_i+0x128>
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	0032      	movs	r2, r6
 8007802:	9906      	ldr	r1, [sp, #24]
 8007804:	9805      	ldr	r0, [sp, #20]
 8007806:	9d07      	ldr	r5, [sp, #28]
 8007808:	47a8      	blx	r5
 800780a:	1c43      	adds	r3, r0, #1
 800780c:	d0aa      	beq.n	8007764 <_printf_i+0x13c>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	079b      	lsls	r3, r3, #30
 8007812:	d415      	bmi.n	8007840 <_printf_i+0x218>
 8007814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007816:	68e0      	ldr	r0, [r4, #12]
 8007818:	4298      	cmp	r0, r3
 800781a:	daa5      	bge.n	8007768 <_printf_i+0x140>
 800781c:	0018      	movs	r0, r3
 800781e:	e7a3      	b.n	8007768 <_printf_i+0x140>
 8007820:	0022      	movs	r2, r4
 8007822:	2301      	movs	r3, #1
 8007824:	9906      	ldr	r1, [sp, #24]
 8007826:	9805      	ldr	r0, [sp, #20]
 8007828:	9e07      	ldr	r6, [sp, #28]
 800782a:	3219      	adds	r2, #25
 800782c:	47b0      	blx	r6
 800782e:	1c43      	adds	r3, r0, #1
 8007830:	d098      	beq.n	8007764 <_printf_i+0x13c>
 8007832:	3501      	adds	r5, #1
 8007834:	68e3      	ldr	r3, [r4, #12]
 8007836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007838:	1a9b      	subs	r3, r3, r2
 800783a:	42ab      	cmp	r3, r5
 800783c:	dcf0      	bgt.n	8007820 <_printf_i+0x1f8>
 800783e:	e7e9      	b.n	8007814 <_printf_i+0x1ec>
 8007840:	2500      	movs	r5, #0
 8007842:	e7f7      	b.n	8007834 <_printf_i+0x20c>
 8007844:	080082f9 	.word	0x080082f9
 8007848:	0800830a 	.word	0x0800830a

0800784c <memchr>:
 800784c:	b2c9      	uxtb	r1, r1
 800784e:	1882      	adds	r2, r0, r2
 8007850:	4290      	cmp	r0, r2
 8007852:	d101      	bne.n	8007858 <memchr+0xc>
 8007854:	2000      	movs	r0, #0
 8007856:	4770      	bx	lr
 8007858:	7803      	ldrb	r3, [r0, #0]
 800785a:	428b      	cmp	r3, r1
 800785c:	d0fb      	beq.n	8007856 <memchr+0xa>
 800785e:	3001      	adds	r0, #1
 8007860:	e7f6      	b.n	8007850 <memchr+0x4>

08007862 <memmove>:
 8007862:	b510      	push	{r4, lr}
 8007864:	4288      	cmp	r0, r1
 8007866:	d902      	bls.n	800786e <memmove+0xc>
 8007868:	188b      	adds	r3, r1, r2
 800786a:	4298      	cmp	r0, r3
 800786c:	d303      	bcc.n	8007876 <memmove+0x14>
 800786e:	2300      	movs	r3, #0
 8007870:	e007      	b.n	8007882 <memmove+0x20>
 8007872:	5c8b      	ldrb	r3, [r1, r2]
 8007874:	5483      	strb	r3, [r0, r2]
 8007876:	3a01      	subs	r2, #1
 8007878:	d2fb      	bcs.n	8007872 <memmove+0x10>
 800787a:	bd10      	pop	{r4, pc}
 800787c:	5ccc      	ldrb	r4, [r1, r3]
 800787e:	54c4      	strb	r4, [r0, r3]
 8007880:	3301      	adds	r3, #1
 8007882:	429a      	cmp	r2, r3
 8007884:	d1fa      	bne.n	800787c <memmove+0x1a>
 8007886:	e7f8      	b.n	800787a <memmove+0x18>

08007888 <_free_r>:
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	0005      	movs	r5, r0
 800788c:	2900      	cmp	r1, #0
 800788e:	d010      	beq.n	80078b2 <_free_r+0x2a>
 8007890:	1f0c      	subs	r4, r1, #4
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	da00      	bge.n	800789a <_free_r+0x12>
 8007898:	18e4      	adds	r4, r4, r3
 800789a:	0028      	movs	r0, r5
 800789c:	f000 f918 	bl	8007ad0 <__malloc_lock>
 80078a0:	4a1d      	ldr	r2, [pc, #116]	; (8007918 <_free_r+0x90>)
 80078a2:	6813      	ldr	r3, [r2, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d105      	bne.n	80078b4 <_free_r+0x2c>
 80078a8:	6063      	str	r3, [r4, #4]
 80078aa:	6014      	str	r4, [r2, #0]
 80078ac:	0028      	movs	r0, r5
 80078ae:	f000 f917 	bl	8007ae0 <__malloc_unlock>
 80078b2:	bd70      	pop	{r4, r5, r6, pc}
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	d908      	bls.n	80078ca <_free_r+0x42>
 80078b8:	6821      	ldr	r1, [r4, #0]
 80078ba:	1860      	adds	r0, r4, r1
 80078bc:	4283      	cmp	r3, r0
 80078be:	d1f3      	bne.n	80078a8 <_free_r+0x20>
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	1841      	adds	r1, r0, r1
 80078c6:	6021      	str	r1, [r4, #0]
 80078c8:	e7ee      	b.n	80078a8 <_free_r+0x20>
 80078ca:	001a      	movs	r2, r3
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <_free_r+0x4e>
 80078d2:	42a3      	cmp	r3, r4
 80078d4:	d9f9      	bls.n	80078ca <_free_r+0x42>
 80078d6:	6811      	ldr	r1, [r2, #0]
 80078d8:	1850      	adds	r0, r2, r1
 80078da:	42a0      	cmp	r0, r4
 80078dc:	d10b      	bne.n	80078f6 <_free_r+0x6e>
 80078de:	6820      	ldr	r0, [r4, #0]
 80078e0:	1809      	adds	r1, r1, r0
 80078e2:	1850      	adds	r0, r2, r1
 80078e4:	6011      	str	r1, [r2, #0]
 80078e6:	4283      	cmp	r3, r0
 80078e8:	d1e0      	bne.n	80078ac <_free_r+0x24>
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	1841      	adds	r1, r0, r1
 80078f0:	6011      	str	r1, [r2, #0]
 80078f2:	6053      	str	r3, [r2, #4]
 80078f4:	e7da      	b.n	80078ac <_free_r+0x24>
 80078f6:	42a0      	cmp	r0, r4
 80078f8:	d902      	bls.n	8007900 <_free_r+0x78>
 80078fa:	230c      	movs	r3, #12
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	e7d5      	b.n	80078ac <_free_r+0x24>
 8007900:	6821      	ldr	r1, [r4, #0]
 8007902:	1860      	adds	r0, r4, r1
 8007904:	4283      	cmp	r3, r0
 8007906:	d103      	bne.n	8007910 <_free_r+0x88>
 8007908:	6818      	ldr	r0, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	1841      	adds	r1, r0, r1
 800790e:	6021      	str	r1, [r4, #0]
 8007910:	6063      	str	r3, [r4, #4]
 8007912:	6054      	str	r4, [r2, #4]
 8007914:	e7ca      	b.n	80078ac <_free_r+0x24>
 8007916:	46c0      	nop			; (mov r8, r8)
 8007918:	2000069c 	.word	0x2000069c

0800791c <sbrk_aligned>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	4e0f      	ldr	r6, [pc, #60]	; (800795c <sbrk_aligned+0x40>)
 8007920:	000d      	movs	r5, r1
 8007922:	6831      	ldr	r1, [r6, #0]
 8007924:	0004      	movs	r4, r0
 8007926:	2900      	cmp	r1, #0
 8007928:	d102      	bne.n	8007930 <sbrk_aligned+0x14>
 800792a:	f000 f8bf 	bl	8007aac <_sbrk_r>
 800792e:	6030      	str	r0, [r6, #0]
 8007930:	0029      	movs	r1, r5
 8007932:	0020      	movs	r0, r4
 8007934:	f000 f8ba 	bl	8007aac <_sbrk_r>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d00a      	beq.n	8007952 <sbrk_aligned+0x36>
 800793c:	2303      	movs	r3, #3
 800793e:	1cc5      	adds	r5, r0, #3
 8007940:	439d      	bics	r5, r3
 8007942:	42a8      	cmp	r0, r5
 8007944:	d007      	beq.n	8007956 <sbrk_aligned+0x3a>
 8007946:	1a29      	subs	r1, r5, r0
 8007948:	0020      	movs	r0, r4
 800794a:	f000 f8af 	bl	8007aac <_sbrk_r>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	d101      	bne.n	8007956 <sbrk_aligned+0x3a>
 8007952:	2501      	movs	r5, #1
 8007954:	426d      	negs	r5, r5
 8007956:	0028      	movs	r0, r5
 8007958:	bd70      	pop	{r4, r5, r6, pc}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	200006a0 	.word	0x200006a0

08007960 <_malloc_r>:
 8007960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007962:	2203      	movs	r2, #3
 8007964:	1ccb      	adds	r3, r1, #3
 8007966:	4393      	bics	r3, r2
 8007968:	3308      	adds	r3, #8
 800796a:	0006      	movs	r6, r0
 800796c:	001f      	movs	r7, r3
 800796e:	2b0c      	cmp	r3, #12
 8007970:	d232      	bcs.n	80079d8 <_malloc_r+0x78>
 8007972:	270c      	movs	r7, #12
 8007974:	42b9      	cmp	r1, r7
 8007976:	d831      	bhi.n	80079dc <_malloc_r+0x7c>
 8007978:	0030      	movs	r0, r6
 800797a:	f000 f8a9 	bl	8007ad0 <__malloc_lock>
 800797e:	4d32      	ldr	r5, [pc, #200]	; (8007a48 <_malloc_r+0xe8>)
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	001c      	movs	r4, r3
 8007984:	2c00      	cmp	r4, #0
 8007986:	d12e      	bne.n	80079e6 <_malloc_r+0x86>
 8007988:	0039      	movs	r1, r7
 800798a:	0030      	movs	r0, r6
 800798c:	f7ff ffc6 	bl	800791c <sbrk_aligned>
 8007990:	0004      	movs	r4, r0
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	d11e      	bne.n	80079d4 <_malloc_r+0x74>
 8007996:	682c      	ldr	r4, [r5, #0]
 8007998:	0025      	movs	r5, r4
 800799a:	2d00      	cmp	r5, #0
 800799c:	d14a      	bne.n	8007a34 <_malloc_r+0xd4>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	0029      	movs	r1, r5
 80079a2:	18e3      	adds	r3, r4, r3
 80079a4:	0030      	movs	r0, r6
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	f000 f880 	bl	8007aac <_sbrk_r>
 80079ac:	9b01      	ldr	r3, [sp, #4]
 80079ae:	4283      	cmp	r3, r0
 80079b0:	d143      	bne.n	8007a3a <_malloc_r+0xda>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	3703      	adds	r7, #3
 80079b6:	1aff      	subs	r7, r7, r3
 80079b8:	2303      	movs	r3, #3
 80079ba:	439f      	bics	r7, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	2f0c      	cmp	r7, #12
 80079c0:	d200      	bcs.n	80079c4 <_malloc_r+0x64>
 80079c2:	270c      	movs	r7, #12
 80079c4:	0039      	movs	r1, r7
 80079c6:	0030      	movs	r0, r6
 80079c8:	f7ff ffa8 	bl	800791c <sbrk_aligned>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d034      	beq.n	8007a3a <_malloc_r+0xda>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	19df      	adds	r7, r3, r7
 80079d4:	6027      	str	r7, [r4, #0]
 80079d6:	e013      	b.n	8007a00 <_malloc_r+0xa0>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	dacb      	bge.n	8007974 <_malloc_r+0x14>
 80079dc:	230c      	movs	r3, #12
 80079de:	2500      	movs	r5, #0
 80079e0:	6033      	str	r3, [r6, #0]
 80079e2:	0028      	movs	r0, r5
 80079e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079e6:	6822      	ldr	r2, [r4, #0]
 80079e8:	1bd1      	subs	r1, r2, r7
 80079ea:	d420      	bmi.n	8007a2e <_malloc_r+0xce>
 80079ec:	290b      	cmp	r1, #11
 80079ee:	d917      	bls.n	8007a20 <_malloc_r+0xc0>
 80079f0:	19e2      	adds	r2, r4, r7
 80079f2:	6027      	str	r7, [r4, #0]
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	d111      	bne.n	8007a1c <_malloc_r+0xbc>
 80079f8:	602a      	str	r2, [r5, #0]
 80079fa:	6863      	ldr	r3, [r4, #4]
 80079fc:	6011      	str	r1, [r2, #0]
 80079fe:	6053      	str	r3, [r2, #4]
 8007a00:	0030      	movs	r0, r6
 8007a02:	0025      	movs	r5, r4
 8007a04:	f000 f86c 	bl	8007ae0 <__malloc_unlock>
 8007a08:	2207      	movs	r2, #7
 8007a0a:	350b      	adds	r5, #11
 8007a0c:	1d23      	adds	r3, r4, #4
 8007a0e:	4395      	bics	r5, r2
 8007a10:	1aea      	subs	r2, r5, r3
 8007a12:	429d      	cmp	r5, r3
 8007a14:	d0e5      	beq.n	80079e2 <_malloc_r+0x82>
 8007a16:	1b5b      	subs	r3, r3, r5
 8007a18:	50a3      	str	r3, [r4, r2]
 8007a1a:	e7e2      	b.n	80079e2 <_malloc_r+0x82>
 8007a1c:	605a      	str	r2, [r3, #4]
 8007a1e:	e7ec      	b.n	80079fa <_malloc_r+0x9a>
 8007a20:	6862      	ldr	r2, [r4, #4]
 8007a22:	42a3      	cmp	r3, r4
 8007a24:	d101      	bne.n	8007a2a <_malloc_r+0xca>
 8007a26:	602a      	str	r2, [r5, #0]
 8007a28:	e7ea      	b.n	8007a00 <_malloc_r+0xa0>
 8007a2a:	605a      	str	r2, [r3, #4]
 8007a2c:	e7e8      	b.n	8007a00 <_malloc_r+0xa0>
 8007a2e:	0023      	movs	r3, r4
 8007a30:	6864      	ldr	r4, [r4, #4]
 8007a32:	e7a7      	b.n	8007984 <_malloc_r+0x24>
 8007a34:	002c      	movs	r4, r5
 8007a36:	686d      	ldr	r5, [r5, #4]
 8007a38:	e7af      	b.n	800799a <_malloc_r+0x3a>
 8007a3a:	230c      	movs	r3, #12
 8007a3c:	0030      	movs	r0, r6
 8007a3e:	6033      	str	r3, [r6, #0]
 8007a40:	f000 f84e 	bl	8007ae0 <__malloc_unlock>
 8007a44:	e7cd      	b.n	80079e2 <_malloc_r+0x82>
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	2000069c 	.word	0x2000069c

08007a4c <_realloc_r>:
 8007a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a4e:	0007      	movs	r7, r0
 8007a50:	000e      	movs	r6, r1
 8007a52:	0014      	movs	r4, r2
 8007a54:	2900      	cmp	r1, #0
 8007a56:	d105      	bne.n	8007a64 <_realloc_r+0x18>
 8007a58:	0011      	movs	r1, r2
 8007a5a:	f7ff ff81 	bl	8007960 <_malloc_r>
 8007a5e:	0005      	movs	r5, r0
 8007a60:	0028      	movs	r0, r5
 8007a62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a64:	2a00      	cmp	r2, #0
 8007a66:	d103      	bne.n	8007a70 <_realloc_r+0x24>
 8007a68:	f7ff ff0e 	bl	8007888 <_free_r>
 8007a6c:	0025      	movs	r5, r4
 8007a6e:	e7f7      	b.n	8007a60 <_realloc_r+0x14>
 8007a70:	f000 f83e 	bl	8007af0 <_malloc_usable_size_r>
 8007a74:	9001      	str	r0, [sp, #4]
 8007a76:	4284      	cmp	r4, r0
 8007a78:	d803      	bhi.n	8007a82 <_realloc_r+0x36>
 8007a7a:	0035      	movs	r5, r6
 8007a7c:	0843      	lsrs	r3, r0, #1
 8007a7e:	42a3      	cmp	r3, r4
 8007a80:	d3ee      	bcc.n	8007a60 <_realloc_r+0x14>
 8007a82:	0021      	movs	r1, r4
 8007a84:	0038      	movs	r0, r7
 8007a86:	f7ff ff6b 	bl	8007960 <_malloc_r>
 8007a8a:	1e05      	subs	r5, r0, #0
 8007a8c:	d0e8      	beq.n	8007a60 <_realloc_r+0x14>
 8007a8e:	9b01      	ldr	r3, [sp, #4]
 8007a90:	0022      	movs	r2, r4
 8007a92:	429c      	cmp	r4, r3
 8007a94:	d900      	bls.n	8007a98 <_realloc_r+0x4c>
 8007a96:	001a      	movs	r2, r3
 8007a98:	0031      	movs	r1, r6
 8007a9a:	0028      	movs	r0, r5
 8007a9c:	f7ff fbc0 	bl	8007220 <memcpy>
 8007aa0:	0031      	movs	r1, r6
 8007aa2:	0038      	movs	r0, r7
 8007aa4:	f7ff fef0 	bl	8007888 <_free_r>
 8007aa8:	e7da      	b.n	8007a60 <_realloc_r+0x14>
	...

08007aac <_sbrk_r>:
 8007aac:	2300      	movs	r3, #0
 8007aae:	b570      	push	{r4, r5, r6, lr}
 8007ab0:	4d06      	ldr	r5, [pc, #24]	; (8007acc <_sbrk_r+0x20>)
 8007ab2:	0004      	movs	r4, r0
 8007ab4:	0008      	movs	r0, r1
 8007ab6:	602b      	str	r3, [r5, #0]
 8007ab8:	f7fb f806 	bl	8002ac8 <_sbrk>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	d103      	bne.n	8007ac8 <_sbrk_r+0x1c>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d000      	beq.n	8007ac8 <_sbrk_r+0x1c>
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	bd70      	pop	{r4, r5, r6, pc}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	200006a4 	.word	0x200006a4

08007ad0 <__malloc_lock>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	4802      	ldr	r0, [pc, #8]	; (8007adc <__malloc_lock+0xc>)
 8007ad4:	f000 f814 	bl	8007b00 <__retarget_lock_acquire_recursive>
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	46c0      	nop			; (mov r8, r8)
 8007adc:	200006a8 	.word	0x200006a8

08007ae0 <__malloc_unlock>:
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	4802      	ldr	r0, [pc, #8]	; (8007aec <__malloc_unlock+0xc>)
 8007ae4:	f000 f80d 	bl	8007b02 <__retarget_lock_release_recursive>
 8007ae8:	bd10      	pop	{r4, pc}
 8007aea:	46c0      	nop			; (mov r8, r8)
 8007aec:	200006a8 	.word	0x200006a8

08007af0 <_malloc_usable_size_r>:
 8007af0:	1f0b      	subs	r3, r1, #4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	1f18      	subs	r0, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	da01      	bge.n	8007afe <_malloc_usable_size_r+0xe>
 8007afa:	580b      	ldr	r3, [r1, r0]
 8007afc:	18c0      	adds	r0, r0, r3
 8007afe:	4770      	bx	lr

08007b00 <__retarget_lock_acquire_recursive>:
 8007b00:	4770      	bx	lr

08007b02 <__retarget_lock_release_recursive>:
 8007b02:	4770      	bx	lr

08007b04 <_init>:
 8007b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b06:	46c0      	nop			; (mov r8, r8)
 8007b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0a:	bc08      	pop	{r3}
 8007b0c:	469e      	mov	lr, r3
 8007b0e:	4770      	bx	lr

08007b10 <_fini>:
 8007b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b16:	bc08      	pop	{r3}
 8007b18:	469e      	mov	lr, r3
 8007b1a:	4770      	bx	lr
